<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>建立自己的部落格(4)：了解Hexo指令，更換next部落格主題</title>
    <url>/Blog/hexo-github-4/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg" alt="Blog背景圖"></p>
<h2 id="Hexo常用指令說明"><a href="#Hexo常用指令說明" class="headerlink" title="Hexo常用指令說明"></a>Hexo常用指令說明</h2><h3 id="hexo-init-初始化資訊"><a href="#hexo-init-初始化資訊" class="headerlink" title="hexo init 初始化資訊"></a>hexo init 初始化資訊</h3><ul>
<li>在當前路徑下建造hexo初始化的相關資訊<br>(Day2使用過此指令，在一開始初始化並生成Hexo資訊的時候使用)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h3 id="hexo-new-title-生成文章"><a href="#hexo-new-title-生成文章" class="headerlink" title="hexo new title 生成文章"></a>hexo new title 生成文章</h3><ul>
<li>創建一篇文章(<strong><code><code>&lt;title&gt;</code></code></strong>要記得替換成你想使用的文章名稱)</li>
<li>創文章流程：<ul>
<li>文章會根據<strong><code>./scaffolds</code></strong>路徑下的<strong><code>post.md</code></strong>模板生成文章格式</li>
<li>生成完的文章會在<strong><code>./source/_posts</code></strong>路徑下生成</li>
</ul>
</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h3 id="hexo-g-生成靜態檔案"><a href="#hexo-g-生成靜態檔案" class="headerlink" title="hexo g 生成靜態檔案"></a>hexo g 生成靜態檔案</h3><ul>
<li>在.&#x2F;public的路徑下生成靜態檔案<br>(會將文章的md檔案轉換成html的檔案)</li>
<li>g是generate的縮寫</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h3 id="hexo-s-本地伺服器預覽畫面"><a href="#hexo-s-本地伺服器預覽畫面" class="headerlink" title="hexo s 本地伺服器預覽畫面"></a>hexo s 本地伺服器預覽畫面</h3><ul>
<li>啟動本地伺服器<br>(可以在自己電腦上預覽部落格樣式及文章內容)</li>
<li>s是server的縮寫</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="hexo-d-部屬靜態檔案至上線環境"><a href="#hexo-d-部屬靜態檔案至上線環境" class="headerlink" title="hexo d 部屬靜態檔案至上線環境"></a>hexo d 部屬靜態檔案至上線環境</h3><ul>
<li>部署public生成的靜態檔案至網站讓其他人也能看到你的文章</li>
<li>d是deploy的縮寫</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="hexo-clean-清除快取資源及已生成的靜態檔案"><a href="#hexo-clean-清除快取資源及已生成的靜態檔案" class="headerlink" title="hexo clean 清除快取資源及已生成的靜態檔案"></a>hexo clean 清除快取資源及已生成的靜態檔案</h3><ul>
<li>清除快取檔案<strong><code>db.json</code></strong>及<strong><code>./puclic</code></strong>路徑下已生成的靜態檔案</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="更換部落格主題"><a href="#更換部落格主題" class="headerlink" title="更換部落格主題"></a>更換部落格主題</h2><p>這邊使用大家較常使用的版型Next，等等將會拉取以下檔案至本地喔<br><strong><a href="https://github.com/theme-next/hexo-theme-next">Next官方Github資料請點我查看</a></strong></p>
<h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><ul>
<li>Step 1:進去hexo init初始化的資料夾</li>
<li>Step 2:在資料夾路徑的部分輸入cmd打開當前路徑的命令提示字元</li>
</ul>
<hr>
<h3 id="將next模板資料拉取至本地上"><a href="#將next模板資料拉取至本地上" class="headerlink" title="將next模板資料拉取至本地上"></a>將next模板資料拉取至本地上</h3><ul>
<li>輸入以下指令，將github的資料拉取至本機電腦上</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ul>
<li>當安裝完成時，可以看到<strong><code>./themes</code></strong>路徑下多了<strong><code>next</code></strong>的資料夾，裡面已經有剛剛下載的模板資料了</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/Next%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.jpg" alt="Next安裝完成"></p>
<h3 id="修改根目錄下的-config-yml檔案-不是next資料夾下的喔"><a href="#修改根目錄下的-config-yml檔案-不是next資料夾下的喔" class="headerlink" title="修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)"></a>修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)</h3><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/%E4%BF%AE%E6%94%B9%E6%A0%B9%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94.png" alt="修改根目錄下的設定檔"></p>
<ul>
<li>看到theme: landscape的部分，我們要換掉，換成自己的模板next<br>(請修改如下)</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="查看next的模板新世界吧"><a href="#查看next的模板新世界吧" class="headerlink" title="查看next的模板新世界吧&gt; &lt;"></a>查看next的模板新世界吧&gt; &lt;</h3><ul>
<li>輸入以下指令</li>
</ul>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ul>
<li>透過瀏覽器查看當前部落格新造型<br>(<a href="http://localhost:4000/">http://localhost:4000/</a>)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/next%E6%A8%A1%E6%9D%BF%E9%80%A0%E5%9E%8B.png" alt="next模板造型"></p>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>看到新造型感覺越來越有樣子了吧!!!希望我們都能夠將部落格布置成每個人獨一無二的秘密基地。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[1] <a href="https://hexo.io/zh-tw/docs/">Hexo官方文件-指令</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>前端開發神器(1)：使用Emmet提升網頁開發效率</title>
    <url>/Blog/Emmet-1/</url>
    <content><![CDATA[<h2 id="Emmet是甚麼呢"><a href="#Emmet是甚麼呢" class="headerlink" title="Emmet是甚麼呢?"></a>Emmet是甚麼呢?</h2><p>這是一套文字編輯器的外掛程式，輔助用縮寫的編排方式提升編輯HTML、XML、XSL的速度。</p>
<p>簡單來說就是前端的開發利器，大部分編譯器都已經內鍵安裝此套件了，學會使用能大大加速撰寫整體架構的速度(相見恨晚是不是!!!)。</p>
<h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><ul>
<li>打開Vscode點選<strong><code>new File</code></strong></li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/image-3_ohwpsn.png" alt="Vscode打開new File"></p>
<ul>
<li>輸入<strong><code>Test.html</code></strong>創立這個html檔案</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/%E5%89%B5%E5%BB%BAhtml.png" alt="Vscode創建html檔案"></p>
<ul>
<li>檢查一下右下角是否是<strong><code>HTML</code></strong>，否則Emmet語法可能會沒有反應</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Vscode%E5%8F%B3%E4%B8%8B%E8%A7%92%E9%A1%AF%E7%A4%BAHTML.png" alt="Vscode確認右下角顯示HTML"></p>
<h2 id="常用語法-我自己常用的語法QQ"><a href="#常用語法-我自己常用的語法QQ" class="headerlink" title="常用語法(我自己常用的語法QQ)"></a>常用語法(我自己常用的語法QQ)</h2><p><strong><code>以下所有的空白鍵(Enter)均能替換成Tab鍵(英文字母Q旁邊的Tab按鍵)</code></strong></p>
<h3 id="html檔案基本架構"><a href="#html檔案基本架構" class="headerlink" title="html檔案基本架構"></a>html檔案基本架構</h3><ul>
<li>輸入! + Enter(有看到旁邊提示才能按空白鍵)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E7%94%A2%E7%94%9FHTML%E5%BF%AB%E6%8D%B7%E9%8D%B5%28%21%20%2B%20%E7%A9%BA%E7%99%BD%E9%8D%B5%29.png" alt="Emmet 輸入! + Enter"></p>
<ul>
<li>登登登登~快速產生了一個html</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E7%9A%84HTML.png" alt="Emmet 快速產生html"></p>
<hr>
<h3 id="HTML標籤-無Class"><a href="#HTML標籤-無Class" class="headerlink" title="HTML標籤(無Class)"></a>HTML標籤(無Class)</h3><ul>
<li>輸入標籤名稱 + Enter(有看到旁邊提示才能按空白鍵)</li>
<li>以下範例圖片輸入h1 + Enter</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9Fh1%E6%A8%99%E7%B1%A4%28h1%20%2B%20Enter%29.png" alt="Emmet HTML標籤"></p>
<hr>
<h3 id="HTML標籤-Class"><a href="#HTML標籤-Class" class="headerlink" title="HTML標籤 + Class"></a>HTML標籤 + Class</h3><p>單單只是產生標籤那一定不夠，腦中可能已經將畫面各自命名了(Class)，那就要一次到位</p>
<ul>
<li>輸入標籤名稱 + . + class名稱 + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個Class就多幾組的 . + class名稱</li>
<li>範例圖片使用 p + . + name + . + number(一次給他兩個Class名稱)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20HTML%E6%A8%99%E7%B1%A4%20%2B%20Class.png" alt="Emmet HTML標籤 + Class"></p>
<ul>
<li>順帶一提，如果沒有給標籤名稱會變成神麼樣子呢?</li>
<li>登登登登答案就是div，也就是只有div可以省略標籤名稱</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20%E7%84%A1%E6%A8%99%E7%B1%A4%20%2B%20Class.png" alt="Emmet 無標籤 + Class"></p>
<hr>
<h3 id="HTML標籤-Attribute"><a href="#HTML標籤-Attribute" class="headerlink" title="HTML標籤 + Attribute"></a>HTML標籤 + Attribute</h3><p>標籤屬性也是HTML裡面很重要的一環，讓我們把這個也學起來</p>
<ul>
<li>輸入標籤名稱 + [屬性名稱:屬性值] + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個屬性就用空格分開</li>
<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框]</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/HTML%E6%A8%99%E7%B1%A4%20%2B%20Attribute.png" alt="Emmet HTML標籤 + Attribute"></p>
<hr>
<h3 id="Class-Attribute一次滿足"><a href="#Class-Attribute一次滿足" class="headerlink" title="Class + Attribute一次滿足"></a>Class + Attribute一次滿足</h3><p>偷偷告訴你一個小技巧，Emmet語法可以混用喔!!!</p>
<ul>
<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框].UserInput</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20Class%20%2B%20Attribute%E4%B8%80%E6%AC%A1%E6%BB%BF%E8%B6%B3.png" alt="Emmet Class + Attribute一次滿足"></p>
<hr>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>上面僅僅只是冰山一角呢，有時間會補齊自己常用的語法，如果你還是那麼想知道的話就告訴你吧。</p>
<p>最完整的使用方法就在<a href="https://docs.emmet.io/cheat-sheet/">Emmet官方文件</a>(不要打我QQ)</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[1] <a href="https://zh.wikipedia.org/wiki/Emmet">Emmet維基百科</a><br>[2] <a href="https://docs.emmet.io/cheat-sheet/">Emmet官方文件</a></p>
]]></content>
      <categories>
        <category>Emmet</category>
      </categories>
      <tags>
        <tag>Web Development Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>建立自己的部落格(1)：認識Hexo及所其需工具(Nodejs &amp; Git)</title>
    <url>/Blog/hexo-github-1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg" alt="Blog背景圖"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>雖然網路上充斥著各式架設網站的教學，但當我真正動手操作時，發現還有許多細節值得探討和設定。為了幫助更多有此需求的朋友，我決定將這些寶貴的經驗細節記錄下來。架設部落格其實並不困難，只要跟著我的步伐，你也可以輕鬆擁有一個專屬於自己的部落格。</p>
<h2 id="什麼是Hexo呢"><a href="#什麼是Hexo呢" class="headerlink" title="什麼是Hexo呢?"></a>什麼是Hexo呢?</h2><ul>
<li>Hexo 是一個快速、簡單且強大的部落格框架，透過設定檔調整即可將對應的網頁進行樣式變更</li>
<li>使用Markdown(md)語法撰寫屬於自己的文章</li>
</ul>
<h2 id="開始安裝看看"><a href="#開始安裝看看" class="headerlink" title="開始安裝看看"></a>開始安裝看看</h2><p>首先要先介紹我們要安裝的兩個軟體Node.js及Git安裝流程</p>
<h3 id="Nodejs程式語言安裝"><a href="#Nodejs程式語言安裝" class="headerlink" title="Nodejs程式語言安裝"></a>Nodejs程式語言安裝</h3><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png" alt="Nodejs程式語言官方載點"></p>
<ul>
<li>🔗 <a href="https://nodejs.org/en">Nodejs程式語言官方載點請點我</a><ul>
<li>建議使用Node.js 10.0及以上版本</li>
<li>點選<strong><code>Recommended For Most Users</code></strong>推薦版本(通常使用上相較右邊最新版本穩定)</li>
<li>安裝上都按照預設點選下一步直至完成即可</li>
</ul>
</li>
</ul>
<h3 id="檢驗Nodejs安裝完成"><a href="#檢驗Nodejs安裝完成" class="headerlink" title="檢驗Nodejs安裝完成"></a>檢驗Nodejs安裝完成</h3><ul>
<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><strong><a href="#command-line">(如果不知道命令提示字元怎麼開請點我)</a></strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nodejs -v</span><br></pre></td></tr></table></figure>

<ul>
<li><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png" alt="Nodejs版本查詢"></li>
<li>有寫版本號碼就代表安裝完成囉!!!</li>
</ul>
<hr>
<h3 id="Git版本控制系統安裝"><a href="#Git版本控制系統安裝" class="headerlink" title="Git版本控制系統安裝"></a>Git版本控制系統安裝</h3><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png" alt="Git版本控制系統官方載點"></p>
<ul>
<li>點選對應的電腦系統(Windows、macOS、Linux&#x2F;Unix)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%8C%89%E7%85%A7%E5%B0%8D%E6%87%89%E7%9A%84%E4%BD%8D%E5%85%83%E6%95%B8%E9%80%B2%E8%A1%8C%E4%B8%8B%E8%BC%89.png" alt="按照對應的位元數進行下載"></p>
<ul>
<li><p>按照對應的位元數進行下載<br><strong><a href="#bits">(如果不知道位元數哪裡看請點我)</a></strong></p>
</li>
<li><p>安裝上都按照預設點選下一步直至完成即可</p>
</li>
</ul>
<h3 id="檢驗Git安裝完成"><a href="#檢驗Git安裝完成" class="headerlink" title="檢驗Git安裝完成"></a>檢驗Git安裝完成</h3><ul>
<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><a href="#command-line">(如果不知道命令提示字元怎麼開請點我)</a></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure>

<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/git%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png" alt="git版本查詢"></p>
<ul>
<li>有寫版本號碼就代表安裝完成囉!!!</li>
</ul>
<hr>
<p><a id="bits"></a></p>
<h2 id="如何查看電腦系統位元數"><a href="#如何查看電腦系統位元數" class="headerlink" title="如何查看電腦系統位元數?"></a>如何查看電腦系統位元數?</h2><ul>
<li>Step 1：在搜尋框輸入<strong><code>系統</code></strong>點開</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007037/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png" alt="檢查自己電腦位元數"></p>
<p>Step 2：<strong><code>系統</code></strong>這邊可以查看電腦位元數<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png" alt="查看電腦位元數"></p>
<p><a id="command-line"></a></p>
<h2 id="如何開啟命令提示字元介面"><a href="#如何開啟命令提示字元介面" class="headerlink" title="如何開啟命令提示字元介面"></a>如何開啟命令提示字元介面</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E9%9B%BB%E8%85%A6%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%BB%8B%E9%9D%A2%E6%AA%A2%E6%9F%A5.png" alt="電腦終端機介面檢查"></p>
<ul>
<li>點選<strong><code>搜尋框</code></strong>輸入cmd(cmd：Command Line)</li>
<li>點選<strong><code>命令提示字元</code></strong>(與電腦溝通的介面)</li>
</ul>
<hr>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>希望讓想架設部落格的任何人，都可以有第一步可以踏出(跟我一樣)。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[1] <a href="https://hexo.io/zh-tw/docs/">Hexo官方文件</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(3)：掌握箭頭函式，優雅簡約的程式寫作</title>
    <url>/Blog/JS-3/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<p><strong>箭頭函數是ES6的新語法，能夠有效縮短傳統函式寫法</strong></p>
<h2 id="傳統函式-VS-箭頭函式情境說明"><a href="#傳統函式-VS-箭頭函式情境說明" class="headerlink" title="傳統函式 VS 箭頭函式情境說明"></a>傳統函式 VS 箭頭函式情境說明</h2><ul>
<li>直接透過一個例子來進行比較更快瞭解，透過箭頭函式縮短傳統函式。</li>
<li>情境：我想快速將陣列中的每個元素都變成兩倍(map對原陣列進行操作產生一個新的陣列)。</li>
</ul>
<h3 id="傳統函式"><a href="#傳統函式" class="headerlink" title="傳統函式"></a>傳統函式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> resultarr = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultarr)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="箭頭函式"><a href="#箭頭函式" class="headerlink" title="箭頭函式"></a>箭頭函式</h3><ul>
<li>方法1：省略function替換成箭頭函數的方式。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> resultarr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultarr)</span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：省略function + 省略return。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> resultarr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (item * <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultarr)</span><br></pre></td></tr></table></figure>

<ul>
<li>方法3：當確定僅有一個參數(item)，不可為空或超過一個參數，可以省略成以下寫法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> resultarr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultarr)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="this指向差別-箭頭函式沒有自己的this指向"><a href="#this指向差別-箭頭函式沒有自己的this指向" class="headerlink" title="this指向差別-箭頭函式沒有自己的this指向"></a>this指向差別-箭頭函式沒有自己的this指向</h2><ul>
<li>當看到this的時候自動忽視包覆他的函式</li>
</ul>
<h2 id="傳統函式的this指向"><a href="#傳統函式的this指向" class="headerlink" title="傳統函式的this指向"></a>傳統函式的this指向</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="title function_">callName</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">全域</span><br></pre></td></tr></table></figure>

<h3 id="案例1-回調函數遇到箭頭函式"><a href="#案例1-回調函數遇到箭頭函式" class="headerlink" title="案例1.回調函數遇到箭頭函式"></a>案例1.回調函數遇到箭頭函式</h3><ul>
<li>當看到this的時候自動忽視包覆他的函式(setTimeout)，可以想像成this.name又變成在callName函式之下，因此這時候this.name就會從全域變數變成指向person物件下的name。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="title function_">callName</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">小明</span><br></pre></td></tr></table></figure>

<h3 id="案例2-傳統函式遇到箭頭函式-單層"><a href="#案例2-傳統函式遇到箭頭函式-單層" class="headerlink" title="案例2.傳統函式遇到箭頭函式(單層)"></a>案例2.傳統函式遇到箭頭函式(單層)</h3><ul>
<li>使用箭頭函式會直接跳出當前包覆的function(callName)，也就是目前並沒有人調用person本身，因此this會指向全域。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="function">() =&gt;</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">全域</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="案例3-傳統函式遇到箭頭函式-雙層"><a href="#案例3-傳統函式遇到箭頭函式-雙層" class="headerlink" title="案例3.傳統函式遇到箭頭函式(雙層)"></a>案例3.傳統函式遇到箭頭函式(雙層)</h3><ul>
<li>this.name跳脫包覆他的callName函式，變成直接在callMe下面，因此callMe被person呼叫使用，this將會指向person。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="title function_">callMe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">callName</span> = (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 請尋找箭頭所在的作用域為何？</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">callName</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callMe</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">小明</span><br></pre></td></tr></table></figure>

<h2 id="this指向實戰作法，讓this取得正確的值"><a href="#this指向實戰作法，讓this取得正確的值" class="headerlink" title="this指向實戰作法，讓this取得正確的值"></a>this指向實戰作法，讓this取得正確的值</h2><ul>
<li>回調函式使用傳統函式的寫法一般指向全域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 4&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">全域</span><br></pre></td></tr></table></figure>

<h3 id="修改方式1-利用其他變數取代當前this"><a href="#修改方式1-利用其他變數取代當前this" class="headerlink" title="修改方式1.利用其他變數取代當前this"></a>修改方式1.利用其他變數取代當前this</h3><ul>
<li>透過在fn使用變數儲存當前this位置指向fn，在回調函式中使用該變數以讓this指向obj4，取得物件 4的值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 4&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">someone</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">物件 <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="修改方式2-使用箭頭函數"><a href="#修改方式2-使用箭頭函數" class="headerlink" title="修改方式2.使用箭頭函數"></a>修改方式2.使用箭頭函數</h3><ul>
<li>透過箭頭函數忽視函式setTimeout，讓this變成在fn函式下，this就會指向使用fn的obj4，進而取得obj4下的someone。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 4&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">物件 <span class="number">4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Arrow Function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(1)：淺談ES6常見縮寫</title>
    <url>/Blog/JS-1/</url>
    <content><![CDATA[<p><strong>ES6語法糖：不會影響運作，邏輯與當前 JS 一致</strong></p>
<hr>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="物件內的函式"><a href="#物件內的函式" class="headerlink" title="物件內的函式"></a>物件內的函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">hello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">hello</span>()</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>

<h3 id="ES6縮寫-去除funtion"><a href="#ES6縮寫-去除funtion" class="headerlink" title="ES6縮寫(去除funtion)"></a>ES6縮寫(去除funtion)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">hello</span>()</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="物件內變數"><a href="#物件內變數" class="headerlink" title="物件內變數"></a>物件內變數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> B = &#123;<span class="string">&quot;A&quot;</span>: A&#125;</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">A</span>:<span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ES6縮寫-將同名變數僅寫一個"><a href="#ES6縮寫-將同名變數僅寫一個" class="headerlink" title="ES6縮寫(將同名變數僅寫一個)"></a>ES6縮寫(將同名變數僅寫一個)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> C = &#123;A&#125;</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>A<span class="punctuation">:</span><span class="number">100</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>這樣的效果跟原本{“A”: A}一樣</li>
</ul>
<hr>
<h2 id="物件展開-陣列相加"><a href="#物件展開-陣列相加" class="headerlink" title="物件展開-陣列相加"></a>物件展開-陣列相加</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> groupA = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> groupB = [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> groupAll = groupA.<span class="title function_">concat</span>(groupB);</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;]</span><br></pre></td></tr></table></figure>

<h3 id="ES6陣列相加縮寫"><a href="#ES6陣列相加縮寫" class="headerlink" title="ES6陣列相加縮寫"></a>ES6陣列相加縮寫</h3><ul>
<li>能夠透過…的方式代表陣列展開的形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> groupA = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> groupB = [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> groupAll = [...groupA, ...groupB]</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ES6物件展開"><a href="#ES6物件展開" class="headerlink" title="ES6物件展開"></a>ES6物件展開</h3><ul>
<li>新增一個物件包含新方法，同時加入原有的方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = &#123;</span><br><span class="line">  <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newmethod = &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  ...methods</span><br><span class="line">&#125;</span><br><span class="line">newmethod.<span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(2)：深入了解This的指向與應用</title>
    <url>/Blog/JS-2/</url>
    <content><![CDATA[<p><strong>JavaScript this指向跟調用關係有關</strong></p>
<hr>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="一個函式中包含多少參數"><a href="#一個函式中包含多少參數" class="headerlink" title="一個函式中包含多少參數"></a>一個函式中包含多少參數</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params, <span class="variable language_">this</span>, <span class="variable language_">window</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>每個Function都擁有<strong>params</strong>及<strong>arguments</strong><ul>
<li>params(參數)：參數是函式定義中所列出的變數<ul>
<li>100</li>
</ul>
</li>
<li>arguments(引數)：引數是當我們呼叫函式時傳遞給它的值<ul>
<li>[100, 200, 300]</li>
<li>這個是類陣列(Array-like)：意思就是他不是真的陣列，有一些方法他並無法使用，雖然他可以查看長度，以及變更參數的值，但是他不是純陣列。</li>
</ul>
</li>
<li>this(隱含的引數)：根據調用的方式指向的位置不同(這邊是全域變數也就是window)</li>
</ul>
</li>
<li>window：預設的全域變數。</li>
</ul>
<hr>
<ul>
<li>接著讓我們來了解不同情況的this的指向(以調用的方式為主)</li>
<li>這邊this是callSomeone的孩子，本身自己調用函式的情況下this會指向全域(window)變數，也就是全域變數的someone。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callSomeone</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">全域</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="案例1-傳統函式this指向"><a href="#案例1-傳統函式this指向" class="headerlink" title="案例1.傳統函式this指向"></a>案例1.傳統函式this指向</h3><ul>
<li>當前案例this是callSomeone的小孩。</li>
<li>調用的方式改成透過obj去調用這個callSome，這時候this會改指向前面的這個怪叔叔，也就是obj，所以這邊的this已經不是window，已經改變成obj，自然this.someone就會變成obj裡面的someone。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;搗蛋鬼&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件&#x27;</span>,</span><br><span class="line">  <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">callSomeone</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">物件</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="案例2-引用傳統函式this指向-小小變形一下"><a href="#案例2-引用傳統函式this指向-小小變形一下" class="headerlink" title="案例2.引用傳統函式this指向(小小變形一下)"></a>案例2.引用傳統函式this指向(小小變形一下)</h3><ul>
<li>雖然原本定義在obj裡面的function變成引用外面的function，但調用的方式依然是obj2.callSomeone()，傳統函式的情況大多符合這種規則。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件2&#x27;</span>,</span><br><span class="line">  callSomeone</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">callSomeone</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">物件<span class="number">2</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="案例3-夾帶兩層函式的this指向"><a href="#案例3-夾帶兩層函式的this指向" class="headerlink" title="案例3.夾帶兩層函式的this指向"></a>案例3.夾帶兩層函式的this指向</h3><ul>
<li>這邊可以看到wrapObj.callSomeone()這個是由wrapObj調用，因此this會指向wrapObj這個物件，自然就會將this.someone定義成外層物件。</li>
<li>而wrapObj.innerObj.callSomeone()調用的人改變成innderObj，因此調用的this.someone將會定義成innerObj裡面的內層物件。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wrapObj = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;外層物件&#x27;</span>,</span><br><span class="line">  callSomeone,</span><br><span class="line">  <span class="attr">innerObj</span>: &#123;</span><br><span class="line">    <span class="attr">someone</span>: <span class="string">&#x27;內層物件&#x27;</span>,</span><br><span class="line">    callSomeone,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wrapObj.<span class="title function_">callSomeone</span>()</span><br><span class="line">wrapObj.<span class="property">innerObj</span>.<span class="title function_">callSomeone</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">外層物件</span><br><span class="line">內層物件</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="特殊案例1-間接使用this函式"><a href="#特殊案例1-間接使用this函式" class="headerlink" title="特殊案例1.間接使用this函式"></a>特殊案例1.間接使用this函式</h3><ul>
<li>我們來看看特別一些的案例，記清楚剛剛說過this只取決於調用他的人是誰，callSomeone前面並沒有人使用它，因此他的this會指向全域(陷阱題)。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 3&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">callSomeone</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">搗蛋鬼</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="特殊案例2-setTimeout回調函式"><a href="#特殊案例2-setTimeout回調函式" class="headerlink" title="特殊案例2.setTimeout回調函式"></a>特殊案例2.setTimeout回調函式</h3><ul>
<li>大部分傳統函式的情況下，遇到回調函式，this會指向全域變數，因此this.someone會變成搗蛋鬼。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 4&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">搗蛋鬼</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>建立自己的部落格(2)：創建Hexo Blog初始的模板</title>
    <url>/Blog/hexo-github-2/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg" alt="Blog背景圖"></p>
<h2 id="安裝Hexo手把手教學"><a href="#安裝Hexo手把手教學" class="headerlink" title="安裝Hexo手把手教學"></a>安裝Hexo手把手教學</h2><ul>
<li>在你的桌面上建立一個資料夾</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E4%BD%BF%E7%94%A8cmd.png" alt="建立新資料夾"></p>
<ul>
<li>點進去資料夾之後在資料夾路徑的位置上輸入cmd按下Enter按鍵</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91.png" alt="利用資料夾打開cmd"></p>
<h3 id="安裝項目-hexo-cli"><a href="#安裝項目-hexo-cli" class="headerlink" title="安裝項目-hexo-cli"></a>安裝項目-hexo-cli</h3><ul>
<li>輸入以下指令安裝，讓你也能使用Hexo命令列功能</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/hexo-cli%E5%AE%89%E8%A3%9D.png" alt="hexo-cli安裝"></p>
<h2 id="檢查hexo-cli安裝完成"><a href="#檢查hexo-cli安裝完成" class="headerlink" title="檢查hexo-cli安裝完成"></a>檢查hexo-cli安裝完成</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E6%AA%A2%E9%A9%97hexo-cli%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.png" alt="檢驗hexo-cli安裝完成"></p>
<ul>
<li>確認顯示版本號代表已安裝完成</li>
</ul>
<hr>
<h2 id="初始化Hexo檔案"><a href="#初始化Hexo檔案" class="headerlink" title="初始化Hexo檔案"></a>初始化Hexo檔案</h2><ul>
<li>輸入以下指令產生Hexo初始化需要的檔案及資料夾<br><strong><a href="#hexo-init-bug">如果出現黃色訊息的意外情況請點我</a></strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h2 id="檢查Hexo安裝成功"><a href="#檢查Hexo安裝成功" class="headerlink" title="檢查Hexo安裝成功"></a>檢查Hexo安裝成功</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%AE%89%E8%A3%9D%E6%88%90%E5%8A%9F.png" alt="Hexo安裝成功"></p>
<ul>
<li>成功看到<strong><code>Start blogging with Hexo!</code></strong>代表安裝完成囉</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E8%B3%87%E6%96%99%E5%A4%BE.png" alt="Hexo初始化成功資料夾"></p>
<ul>
<li>可以看到剛剛的資料夾中出現了許多資料夾及檔案</li>
</ul>
<hr>
<h2 id="部落格產生-預設版本"><a href="#部落格產生-預設版本" class="headerlink" title="部落格產生(預設版本)"></a>部落格產生(預設版本)</h2><ul>
<li>在前面我們產生的cmd介面中輸入以下指令即可看到預設的版本<br>(指令意思是啟動本地服務器預覽部落格畫面，預設Port使用4000)</li>
<li><strong><a href="#PortInUse">如果出現黃色訊息的意外情況請點我</a></strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<ul>
<li>打開你的瀏覽器(Chrome、Edge)</li>
<li>輸入以下的網址</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>

<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E9%A0%90%E8%A8%AD%E7%B6%B2%E7%AB%99.png" alt="Hexo預設網站"></p>
<ul>
<li>出現這個畫面代表你已經成功架設起屬於自己的部落格了</li>
</ul>
<hr>
<h2 id="Hexo初始化資料夾講解"><a href="#Hexo初始化資料夾講解" class="headerlink" title="Hexo初始化資料夾講解"></a>Hexo初始化資料夾講解</h2><ul>
<li>_config.yml<ul>
<li>部落格的設定檔</li>
</ul>
</li>
<li>scaffolds<ul>
<li>Markdown(md)檔案生成的模板<ul>
<li>draft.md：草稿使用的文章模板</li>
<li>page.md：分頁畫面使用的網頁模板</li>
<li>post.md：正式區使用的文章模板</li>
</ul>
</li>
</ul>
</li>
<li>source<ul>
<li>放置網站內容的地方(前輟帶有_會被Hexo忽略，僅有_posts不會)<br>這邊的所有md、html檔案在處理之後會放置<strong><code>/public</code></strong></li>
</ul>
</li>
<li>themes<ul>
<li>根據不同的主題生成不同的靜態網頁風格。<br><strong><a href="https://hexo.io/themes/">快點擊我找一個自己喜歡的模板吧!!!</a></strong><br><strong><a href="#Preview">(如果官方預覽不知道怎麼看到點我)</a></strong></li>
</ul>
</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E5%AE%98%E6%96%B9%E7%9A%84Themes%20shops.png" alt="官方的Themes shops"></p>
<hr>
<p><a id="hexo-init-bug"></a></p>
<h2 id="hexo-init故障排除"><a href="#hexo-init故障排除" class="headerlink" title="hexo init故障排除"></a>hexo init故障排除</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%9D%9E%E7%A9%BA%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E6%95%85%E9%9A%9C%E9%A1%AF%E7%A4%BA.png" alt="cmd非空初始化hexo故障顯示"></p>
<ul>
<li>這代表你的資料夾並非空的導致初始化失敗喔!!!<br>檢查一下你安裝Hexo的資料夾吧(以下是失敗可能範例)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E5%B7%B2%E6%9C%89%E6%AA%94%E6%A1%88%28package.json%29.png" alt="資料夾已有檔案(package.json)"></p>
<p><a id="Preview"></a></p>
<hr>
<h2 id="官方主題看預覽畫面教學-選好的主題將在Day4進行更換"><a href="#官方主題看預覽畫面教學-選好的主題將在Day4進行更換" class="headerlink" title="官方主題看預覽畫面教學(選好的主題將在Day4進行更換)"></a>官方主題看預覽畫面教學(選好的主題將在Day4進行更換)</h2><ul>
<li>通常點進去都會有對應的靜態網頁連結可以點擊</li>
<li>leedom主題</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/leedom%E4%B8%BB%E9%A1%8C.png" alt="leedom主題"></p>
<ul>
<li>Tranquilpeak主題</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Tranquilpeak%E4%B8%BB%E9%A1%8C.png" alt="Tranquilpeak主題"></p>
<ul>
<li>Oliver主題</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Oliver%E4%B8%BB%E9%A1%8C.png" alt="Oliver主題"></p>
<p><a id="PortInUse"></a></p>
<h2 id="hexo-s故障排除"><a href="#hexo-s故障排除" class="headerlink" title="hexo s故障排除"></a>hexo s故障排除</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/port%E8%99%9F%E5%8D%A0%E7%94%A8.png" alt="port號佔用"></p>
<ul>
<li><p>這代表port號被占用了</p>
</li>
<li><p>可以試著改用以下方式讓使用的port號改變</p>
</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s -p 6000</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>今天也好好的邁出第二步了，看到屬於自己的畫面，希望能夠幫助所有喜歡部落格的我跟你。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[1] <a href="https://hexo.io/zh-tw/docs/">Hexo官方文件</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>建立自己的部落格(3)：修改Hexo設定檔中Site，查看其變化</title>
    <url>/Blog/hexo-github-3/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg" alt="Blog背景圖"></p>
<h2 id="查看Hexo設定檔"><a href="#查看Hexo設定檔" class="headerlink" title="查看Hexo設定檔"></a>查看Hexo設定檔</h2><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%E8%B3%87%E6%96%99%E5%A4%BE.png" alt="Hexo資料夾"></p>
<ul>
<li>使用記事本打開的情況(看起來就很不容易修改吧…..)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E8%A8%98%E4%BA%8B%E6%9C%AC%E6%89%93%E9%96%8B%E8%A8%AD%E5%AE%9A%E6%AA%94.png" alt="記事本打開"></p>
<ul>
<li>這時候需要搬出編輯器工具美化它</li>
</ul>
<hr>
<h2 id="編譯器工具推薦"><a href="#編譯器工具推薦" class="headerlink" title="編譯器工具推薦"></a>編譯器工具推薦</h2><h3 id="推薦工具1-Vscode"><a href="#推薦工具1-Vscode" class="headerlink" title="推薦工具1-Vscode"></a>推薦工具1-Vscode</h3><ul>
<li><strong><code><a href="https://code.visualstudio.com/download">官方下載連結請點我</a></code></strong></li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png" alt="Vscode官方下載圖片"></p>
<ul>
<li>安裝上都按照預設點選下一步直至完成即可</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png" alt="Vscode打開資料夾"></p>
<ul>
<li>使用Vscode編譯器將資料夾打開吧(File -&gt; Open Folder)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007047/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E8%B3%87%E6%96%99%E5%A4%BE%E6%AA%A2%E8%A6%96%E7%95%AB%E9%9D%A2.png" alt="Vscode資料夾檢視畫面"></p>
<ul>
<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>
<li>登登登登~看起來五顏六色的漂亮多了吧，這樣好編譯多了(加上#就變成綠色的註解寫法)</li>
</ul>
<h3 id="推薦工具2-Sublime-Text"><a href="#推薦工具2-Sublime-Text" class="headerlink" title="推薦工具2-Sublime Text"></a>推薦工具2-Sublime Text</h3><ul>
<li><strong><code><a href="https://www.sublimetext.com/download">官方下載連結請點我</a></code></strong></li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png" alt="Subline官方下載圖片"></p>
<ul>
<li>安裝上都按照預設點選下一步直至完成即可</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png" alt="Subline打開資料夾"></p>
<ul>
<li>使用Subline編譯器將資料夾打開吧(File -&gt; Open Folder)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E8%B3%87%E6%96%99%E5%A4%BE%E7%95%AB%E9%9D%A2.png" alt="Subline資料夾畫面"></p>
<ul>
<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>
<li>質感不太一樣，有些人更喜歡這種感覺(加上#就變成灰色的註解寫法)</li>
</ul>
<p>兩者當然有各自優缺點，且均有免費的版本可以使用，只是Subline免費版本會很偶爾的跳出來問你要不要購買，就看大家的喜好挑選囉。</p>
<hr>
<h2 id="認識Hexo設定檔的第一步"><a href="#認識Hexo設定檔的第一步" class="headerlink" title="認識Hexo設定檔的第一步"></a>認識Hexo設定檔的第一步</h2><ul>
<li>打開資料夾下的<strong><code>_config.yml</code></strong>檔案</li>
<li>認識第一區塊的設計目的</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E8%A8%AD%E5%AE%9A.png" alt="Hexo Site設定"></p>
<ul>
<li>先試著使用剛剛說的#註解說明文字幫助自己更加了解這些參數特性吧!</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E5%82%99%E8%A8%BB.png" alt="Hexo Site備註"></p>
<ul>
<li>title：網站標題</li>
<li>subtitle：網站副標題</li>
<li>description：網站描述(SEO優化相關)</li>
<li>keywords：網站的關鍵字(SEO優化相關)</li>
<li>author：網站作者的名字</li>
<li>language：網站使用的語系(會跟顯示內容相關)</li>
<li>timezone：網站使用的時區(預設電腦系統的時區)</li>
</ul>
<h2 id="調整根目錄下-config-yml的Site參數"><a href="#調整根目錄下-config-yml的Site參數" class="headerlink" title="調整根目錄下_config.yml的Site參數"></a>調整根目錄下_config.yml的Site參數</h2><ul>
<li>複製以下的內容更換原先的Site參數</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class="line">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class="line">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class="line">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class="line">author: John Doe #網站作者的名字</span><br><span class="line">language: en #網站使用的語系(會跟顯示內容相關)</span><br><span class="line">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>

<ul>
<li>打開cmd介面輸入以下指令編譯並生成對應靜態網站<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<ul>
<li>打開cmd介面輸入以下指令啟動本地服務器預覽修改的畫面<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="調整Site參數-title、subtitle成果展示"><a href="#調整Site參數-title、subtitle成果展示" class="headerlink" title="調整Site參數-title、subtitle成果展示"></a>調整Site參數-title、subtitle成果展示</h2><ul>
<li><p>根據模板(Theme)的不同，顯示的位置會有些此不同。</p>
</li>
<li><p>title、subtitle<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007044/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20title%20and%20subtitle%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png" alt="Hexo title&amp;subtitle修改成果"></p>
</li>
<li><p>author<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20author%20%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png" alt="Hexo author修改成果"></p>
</li>
<li><p>description(因為預設版面沒有顯示這部分改以我的版面進行說明)<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Antonio%20Hexo%E7%89%88%E9%9D%A2.png" alt="Antonio Hexo版面"></p>
</li>
<li><p>這部分關於網站的敘述也會在搜尋時被大家看到喔!!!<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E7%B6%B2%E7%AB%99Google%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C.png" alt="網站Google搜尋結果"></p>
</li>
</ul>
<h2 id="調整Site參數-language成果展示"><a href="#調整Site參數-language成果展示" class="headerlink" title="調整Site參數-language成果展示"></a>調整Site參數-language成果展示</h2><ul>
<li>試著將language的參數從en(英文)修改成zh-TW(中文)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class="line">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class="line">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class="line">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class="line">author: John Doe #網站作者的名字</span><br><span class="line">language: zh-TW #網站使用的語系(會跟顯示內容相關)</span><br><span class="line">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>

<ul>
<li>別忘了編譯網站指令跟啟動本地服務器預覽指令<br>(只要有調整設定檔案建議都要重新編譯過比較保險)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20%E8%AA%9E%E7%B3%BB%E8%AE%8A%E6%9B%B4%E4%B8%AD%E6%96%87.png" alt="Hexo 語系變更中文"></p>
<ul>
<li>剛剛右邊區塊的英文都變成中文</li>
</ul>
<h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>雖然今天只有做出小小的改變，但每個部落格都是從小地方開始慢慢修改成自己喜歡的模樣。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[1] <a href="https://hexo.io/zh-tw/docs/">Hexo官方文件-配置</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(5)：物件傳參考特性(Pass by reference)</title>
    <url>/Blog/JS-5/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="JS-5-Javascript物件傳參考特性"><a href="#JS-5-Javascript物件傳參考特性" class="headerlink" title="JS-5 Javascript物件傳參考特性"></a>JS-5 Javascript物件傳參考特性</h2><p>JS的型別大致可分為原始型別(Primitive Types)及物件(Object)兩種</p>
<ul>
<li>原始型別(Primitive Types)：傳值(Pass by value)<ul>
<li><strong>本身不可變</strong></li>
</ul>
</li>
<li>物件(Object)：傳參考(Pass by reference)<ul>
<li><strong>本身可變</strong></li>
</ul>
</li>
</ul>
<h2 id="原始型別-Primitive-Types"><a href="#原始型別-Primitive-Types" class="headerlink" title="原始型別(Primitive Types)"></a>原始型別(Primitive Types)</h2><ul>
<li>Number<ul>
<li>整數</li>
<li>含小數點</li>
<li>Infinity(無窮大)</li>
<li>-Infinity(負無窮大)</li>
<li>NaN(Not A Number)—&gt;不是數值</li>
</ul>
</li>
<li>BigInt</li>
<li>String</li>
<li>Boolean<ul>
<li>true</li>
<li>false</li>
</ul>
</li>
<li>Undefined</li>
<li>Null</li>
<li>Symbol</li>
</ul>
<hr>
<ul>
<li>宣告方式如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓數字</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="comment">// ↓字串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="comment">// ↓布林</span></span><br><span class="line"><span class="keyword">let</span> isTrue = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> isFalse = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ↓未定義</span></span><br><span class="line"><span class="keyword">let</span> undefinedVar;</span><br><span class="line"><span class="comment">// ↓空值</span></span><br><span class="line"><span class="keyword">let</span> nullVar = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// ↓符號</span></span><br><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>(<span class="string">&quot;uniqueSymbol&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="物件資料-Object-data"><a href="#物件資料-Object-data" class="headerlink" title="物件資料(Object data)"></a>物件資料(Object data)</h2><ul>
<li>物件 (Object)</li>
<li>陣列 (Array)</li>
<li>函數 (Function)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓物件 (Object)</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">isStudent</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ↓陣列 (Array)</span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="comment">// ↓函數 (Function)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="javascript-原始型別-傳值-Pass-by-value"><a href="#javascript-原始型別-傳值-Pass-by-value" class="headerlink" title="javascript-原始型別-傳值(Pass by value)"></a>javascript-原始型別-傳值(Pass by value)</h2><ul>
<li>傳遞原始型別的值時，是按值傳遞的。函數接收的是原始值的一個複本，對這個複本的修改不會影響原始值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b = <span class="number">200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h2 id="javascript-物件-傳參考-Pass-by-reference"><a href="#javascript-物件-傳參考-Pass-by-reference" class="headerlink" title="javascript-物件-傳參考(Pass by reference)"></a>javascript-物件-傳參考(Pass by reference)</h2><ul>
<li>當傳遞物件（Object）或陣列（Array）等引用型別的值時，函數接收的是物件或陣列的參考，對這個參考的修改會影響原始物件或陣列。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="string">&quot;food&quot;</span>: <span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b.<span class="property">food</span> = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">food</span>: <span class="string">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="淺拷貝-Shallow-copy"><a href="#淺拷貝-Shallow-copy" class="headerlink" title="淺拷貝(Shallow copy)"></a>淺拷貝(Shallow copy)</h2><ul>
<li>只拷貝被複製物件的第一層屬性，而不是整個物件及其嵌套的屬性。換句話說，淺拷貝創建了一個新的物件，並將原始物件的直接屬性複製到新的物件中，但對於原始物件中的物件（如物件中的物件），它們仍然是引用，而不是被複製的。</li>
<li>成功複製第一層物件的屬性，且彼此互不影響。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="string">&quot;food&quot;</span>: <span class="string">&quot;apple&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; ...a &#125;</span><br><span class="line">b.<span class="property">food</span> = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a變數= &quot;</span>, a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a變數=  &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span> &#125;</span><br><span class="line">b變數=  &#123; <span class="attr">food</span>: <span class="string">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>物件中的物件因為指向同一記憶體位址，因此彼此變動會連動。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="string">&quot;food&quot;</span>: <span class="string">&quot;apple&quot;</span>, obj : &#123;<span class="string">&quot;feeling&quot;</span>: <span class="string">&quot;happy&quot;</span>&#125; &#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; ...a &#125;</span><br><span class="line">a.<span class="property">obj</span>.<span class="property">feeling</span> = <span class="string">&quot;sad&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a變數= &quot;</span>, a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a變數=  &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class="line">b變數=  &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="淺拷貝的方式"><a href="#淺拷貝的方式" class="headerlink" title="淺拷貝的方式"></a>淺拷貝的方式</h2><h3 id="…展開運算子-Spread-operator"><a href="#…展開運算子-Spread-operator" class="headerlink" title="…展開運算子(Spread operator)"></a>…展開運算子(Spread operator)</h3><ul>
<li>上面的案例即是採用展開運算子</li>
</ul>
<h3 id="使用Object-assign-的方法"><a href="#使用Object-assign-的方法" class="headerlink" title="使用Object.assign()的方法"></a>使用Object.assign()的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> shallowCopiedObject = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, originalObject);</span><br><span class="line">shallowCopiedObject.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line">shallowCopiedObject.<span class="property">b</span>.<span class="property">c</span> = <span class="number">100000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;originalObject&quot;</span>, originalObject)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;shallowCopiedObject&quot;</span>, shallowCopiedObject)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">originalObject &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">100000</span> &#125; &#125;</span><br><span class="line">shallowCopiedObject &#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">100000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="陣列能夠使用slice的方法"><a href="#陣列能夠使用slice的方法" class="headerlink" title="陣列能夠使用slice的方法"></a>陣列能夠使用slice的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> shallowCopiedArray = originalArray.<span class="title function_">slice</span>();</span><br><span class="line">shallowCopiedArray[<span class="number">0</span>] = <span class="string">&#x27;X1&#x27;</span>;</span><br><span class="line">shallowCopiedArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&#x27;X2&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;originalArray&quot;</span>, originalArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;shallowCopiedArray&quot;</span>, shallowCopiedArray);</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">originalArray [ <span class="number">1</span>, [ <span class="string">&#x27;X2&#x27;</span>, <span class="number">3</span> ], <span class="number">4</span> ]</span><br><span class="line">shallowCopiedArray [ <span class="string">&#x27;X1&#x27;</span>, [ <span class="string">&#x27;X2&#x27;</span>, <span class="number">3</span> ], <span class="number">4</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="手動複製物件中其中一層資料"><a href="#手動複製物件中其中一層資料" class="headerlink" title="手動複製物件中其中一層資料"></a>手動複製物件中其中一層資料</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="string">&quot;food&quot;</span>: <span class="string">&quot;apple&quot;</span>, <span class="attr">obj</span>: &#123; <span class="string">&quot;feeling&quot;</span>: <span class="string">&quot;happy&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="string">&quot;food&quot;</span>: a.<span class="property">food</span>, <span class="attr">obj</span>: a.<span class="property">obj</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改變前a&quot;</span>, a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改變前b&quot;</span>, b)</span><br><span class="line">b.<span class="property">food</span> = <span class="string">&quot;banana&quot;</span></span><br><span class="line">b.<span class="property">obj</span>.<span class="property">feeling</span> = <span class="string">&quot;sad&quot;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改變後a&quot;</span>, a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改變後b&quot;</span>, b)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">改變前a &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class="line">改變前b &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class="line">------------</span><br><span class="line">改變後a &#123; <span class="attr">food</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class="line">改變後b &#123; <span class="attr">food</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">obj</span>: &#123; <span class="attr">feeling</span>: <span class="string">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="深拷貝-Deep-Copy"><a href="#深拷貝-Deep-Copy" class="headerlink" title="深拷貝(Deep Copy)"></a>深拷貝(Deep Copy)</h2><ul>
<li>是指創建一個新的物件，並且這個新物件的所有屬性的值都是原始物件相對應屬性值的複本。深拷貝會遞迴地複製原始物件及其所有嵌套的物件，使得新的物件和原始物件在記憶體中獨立存在，修改其中一個物件不會影響另一個。</li>
</ul>
<h2 id="深拷貝的方式"><a href="#深拷貝的方式" class="headerlink" title="深拷貝的方式"></a>深拷貝的方式</h2><h3 id="使用-JSON-parse-和-JSON-stringify"><a href="#使用-JSON-parse-和-JSON-stringify" class="headerlink" title="使用 JSON.parse() 和 JSON.stringify()"></a>使用 JSON.parse() 和 JSON.stringify()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> deepCopiedObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(originalObject));</span><br><span class="line">deepCopiedObject.<span class="property">a</span> = <span class="number">200</span></span><br><span class="line">deepCopiedObject.<span class="property">b</span>.<span class="property">c</span> = <span class="number">4000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;originalObject&quot;</span>, originalObject)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">originalObject &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line">deepCopiedObject &#123; <span class="attr">a</span>: <span class="number">200</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>需注意使用此方式會有些意外情況如下</p>
<ul>
<li>undefined：undefined的值會在序列化過程中完全丟失，包括包含 undefined 值的鍵本身。</li>
<li>NaN：NaN會被強制轉換成null。</li>
<li>Infinity和-Infinity：這兩個特殊的數字值會被強制轉換成 null。</li>
<li>正則表達式(RegExp)：正則表達式會被強制轉換為空物件</li>
<li>日期(Date)：日期會被轉換成對應的字符串形式。</li>
<li>函數(Function)：函數是無法被序列化的，它們會被忽略。</li>
<li>符號Symbol 會被忽略，不會被序列化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalData = &#123;</span><br><span class="line">    <span class="attr">undefinedValue</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">notANumberValue</span>: <span class="title class_">NaN</span>,</span><br><span class="line">    <span class="attr">infinityValue</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">    <span class="attr">regExpValue</span>: <span class="regexp">/.*/</span>,</span><br><span class="line">    <span class="attr">dateValue</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1999-12-31T23:59:59&#x27;</span>),</span><br><span class="line">    <span class="attr">functionValue</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">symbolValue</span>: <span class="title class_">Symbol</span>(<span class="string">&#x27;uniqueSymbol&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> faultyClonedData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(originalData));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;undefineValue&quot;</span>, faultyClonedData.<span class="property">undefinedValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaNValue&quot;</span>, faultyClonedData.<span class="property">notANumberValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;InfinityValue&quot;</span>, faultyClonedData.<span class="property">infinityValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;regExpValue&quot;</span>, faultyClonedData.<span class="property">regExpValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dateValue&quot;</span>, faultyClonedData.<span class="property">dateValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function&quot;</span>, faultyClonedData.<span class="property">functionValue</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;symbolValue&quot;</span>, faultyClonedData.<span class="property">symbolValue</span>);</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">undefineValue <span class="literal">undefined</span></span><br><span class="line"><span class="title class_">NaNValue</span> <span class="literal">null</span></span><br><span class="line"><span class="title class_">InfinityValue</span> <span class="literal">null</span></span><br><span class="line">regExpValue &#123;&#125;</span><br><span class="line">dateValue <span class="number">1999</span>-<span class="number">12</span>-31<span class="attr">T15</span>:<span class="number">59</span>:<span class="number">59.</span>000Z</span><br><span class="line"><span class="keyword">function</span> <span class="literal">undefined</span></span><br><span class="line">symbolValue <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="使用第三方庫（例如-Lodash）"><a href="#使用第三方庫（例如-Lodash）" class="headerlink" title="使用第三方庫（例如 Lodash）"></a>使用第三方庫（例如 Lodash）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> originalObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> deepCopiedObject = _.<span class="title function_">cloneDeep</span>(originalObject);</span><br><span class="line">deepCopiedObject.<span class="property">a</span> = <span class="number">30</span></span><br><span class="line">deepCopiedObject.<span class="property">b</span>.<span class="property">c</span> = <span class="number">4000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;originalObject&quot;</span>, originalObject)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">originalObject &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line">deepCopiedObject &#123; <span class="attr">a</span>: <span class="number">30</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Pass by reference</tag>
        <tag>shallow copy</tag>
        <tag>deep copy</tag>
      </tags>
  </entry>
  <entry>
    <title>React(1)：Pure Function 的概念及其在 React 中的應用</title>
    <url>/Blog/React-1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg" alt="Blog背景圖"></p>
<h2 id="Pure-Function是甚麼"><a href="#Pure-Function是甚麼" class="headerlink" title="Pure Function是甚麼"></a>Pure Function是甚麼</h2><ol>
<li><strong>此函數在相同的輸入值時，需產生相同的輸出。</strong></li>
</ol>
<ul>
<li>pure Functions範例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">function</span> (<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value1 + value2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>不管你傳入幾次得到的結果都一樣</li>
<li>不受外部變數影響</li>
</ul>
<hr>
<ul>
<li>Impure Functions範例則如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Number</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">Value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Value</span> + <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>會在執行的過程中受到Number外部變數的影響</li>
</ul>
<ol>
<li><strong>該函數不能有語義上可觀察的函數副作用。</strong></li>
</ol>
<ul>
<li><p>常見的副作用</p>
<ul>
<li>Making a HTTP request（發送 HTTP 請求）</li>
<li>Mutating data（修改資料）</li>
<li>Printing to a screen or console（輸出至螢幕或控制台）</li>
<li>DOM Query&#x2F;Manipulation（DOM 操作）</li>
<li>Math.random()（使用亂數）</li>
<li>Getting the current time（取得目前時間）</li>
</ul>
</li>
<li><p>pure Functions範例如下</p>
</li>
<li><p>Impure Functions(會在執行的過程中產生副作用)</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> revise = <span class="keyword">function</span> (<span class="params">key, value, object</span>) &#123;</span><br><span class="line">    object[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> food = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;banana&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br><span class="line"><span class="title function_">revise</span>(<span class="string">&quot;number&quot;</span>, <span class="number">100</span>, food)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span> &#125;</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">number</span>: <span class="number">100</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Impure Functions會在執行的過程中產生副作用，導致物件產生變更</li>
</ul>
<h2 id="React跟Pure-Function的關係"><a href="#React跟Pure-Function的關係" class="headerlink" title="React跟Pure Function的關係"></a>React跟Pure Function的關係</h2><ul>
<li>React中的組件概念使用Pure Function的理念，並且React的 functional components 通常被設計成純函數的形式。<ul>
<li>Props 是唯讀的： 父組件向子組件傳遞 props，而子組件不能直接修改這些 props，確保了 props 的不可變性。</li>
<li>State 控制內部狀態： 使用 useState 來管理組件的內部狀態，React 確保了state的不可變性和純粹性。每次狀態發生改變，React 都會根據新的狀態重新渲染組件，確保渲染的結果是基於當前的應用狀態而生成的，並保證了渲染的一致性。</li>
</ul>
</li>
<li>若直接更改obj.count將無法導致渲染，進而無法讓UI顯示最新狀態。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [obj, setObj] = <span class="title function_">useState</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">clickPlus1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// obj.count = obj.count + 1;</span></span><br><span class="line">    <span class="comment">// ↑ 直接改變 obj 時並沒有改變這個 obj 的reference，所以雖然數字改變了，但並不會重新 render</span></span><br><span class="line">    <span class="title function_">setObj</span>(&#123; <span class="attr">count</span>: obj.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;obj.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> clickPlus1()&#125;&gt;plus 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Pure Function</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(6)：深入理解Promise的原理及實際應用</title>
    <url>/Blog/JS-6/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="Promise為了解決什麼問題"><a href="#Promise為了解決什麼問題" class="headerlink" title="Promise為了解決什麼問題"></a>Promise為了解決什麼問題</h2><ul>
<li>JavaScript Promise是一種用來處理異步操作的對象，它代表一個異步操作的成功(resolve)或失敗(reject)的結果。(以下皆使用setTimeout()示範異步操作的案例)</li>
<li>透過這種方法能避免回調地獄（Callback Hell）的問題。</li>
<li>以下直接透過Callback Hell的函數說明：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假設有一個需求，我們需要連續執行三個異步操作：A、B、C。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params">callbackA</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation A completed&quot;</span>);</span><br><span class="line">      <span class="title function_">callbackA</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">operationB</span>(<span class="params">callbackB</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation B completed&quot;</span>);</span><br><span class="line">      <span class="title function_">callbackB</span>();</span><br><span class="line">    &#125;, <span class="number">1500</span>);  <span class="comment">//← 等待1.5秒執行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">operationC</span>(<span class="params">callbackC</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation C completed&quot;</span>);</span><br><span class="line">      <span class="title function_">callbackC</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);  <span class="comment">//← 等待2秒執行</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// Callback Hell</span></span><br><span class="line">  <span class="title function_">operationA</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">operationB</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">operationC</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;All operations completed&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//   在這個例子中，operationA 完成後，我們才能開始 operationB，然後是 operationC。這種嵌套結構會使得代碼難以閱讀，特別是當有更多異步操作時，這種形式會變得更加複雜和難以管理，這就是所謂的 Callback Hell。</span></span><br></pre></td></tr></table></figure>

<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Operation</span> A completed</span><br><span class="line"><span class="title class_">Operation</span> B completed</span><br><span class="line"><span class="title class_">Operation</span> C completed</span><br><span class="line"><span class="title class_">All</span> operations completed</span><br></pre></td></tr></table></figure>

<p><strong>這邊特別強調多層次結構的Callback Hell會變成像是波動拳的結構!!!難以維護</strong><br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/%E6%B3%A2%E5%8B%95%E6%8B%B3_fmoteh.png" alt="Callback Hell示意圖"></p>
<hr>
<ul>
<li>Promise的寫法能夠避免內嵌的回調函數寫法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation A completed&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operationB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation B completed&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">1500</span>);  <span class="comment">//← 等待1.5秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operationC</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation C completed&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Promise 的方式</span></span><br><span class="line"><span class="title function_">operationA</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">operationB</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">operationC</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;All operations completed&quot;</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error));</span><br></pre></td></tr></table></figure>

<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Operation</span> A completed</span><br><span class="line"><span class="title class_">Operation</span> B completed</span><br><span class="line"><span class="title class_">Operation</span> C completed</span><br><span class="line"><span class="title class_">All</span> operations completed</span><br></pre></td></tr></table></figure>

<h2 id="Promise狀態"><a href="#Promise狀態" class="headerlink" title="Promise狀態"></a>Promise狀態</h2><ul>
<li>當你使用 Promise時，它可以處於三種不同的狀態(狀態改變後就不可逆)：<ul>
<li>Peding(等待中)<ul>
<li>創建使用的初始狀態，可在內部放置異步事件</li>
</ul>
</li>
<li>Fulfiled(已完成)<ul>
<li>異步事件完成時，透過resolve()方法將Promise狀態改變至Fulfiled(已完成)</li>
<li>此時可以透過.then回傳Promise執行的結果</li>
</ul>
</li>
<li>Rejected(已拒絕)<ul>
<li>異步事件失敗時，透過reject()方法將Promise狀態改變至Rejected(已失敗)</li>
<li>此時可透過.catch處理Promise的錯誤訊息</li>
</ul>
</li>
</ul>
</li>
<li>.finally()—最終結果<ul>
<li>不論完成或是被拒絕均會執行的回調函數</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>基本使用概念如下</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/Promise%E6%B5%81%E7%A8%8B%E5%9C%96_u9xnts.png" alt="Promise流程圖"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">operationA</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;操作成功:&quot;</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;錯誤:&quot;</span>, error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不論成功還是失敗都會執行的代碼&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>Fulfilled案例(如果Nb小於10代表成功)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"><span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; <span class="title class_">Status</span>: <span class="string">&quot;OK&quot;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(&#123; <span class="title class_">Status</span>: <span class="string">&quot;Error&quot;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Promise 的方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nb</span> = <span class="number">5</span></span><br><span class="line"><span class="title function_">operationA</span>(<span class="title class_">Nb</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>顯示如下(.then()捕獲異步事件回傳資料)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">異步事件-正確執行回傳資料 &#123; <span class="title class_">Status</span>: <span class="string">&#x27;OK&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>reject案例(如果Nb大於10代表成功)：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"><span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; <span class="title class_">Status</span>: <span class="string">&quot;OK&quot;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(&#123; <span class="title class_">Status</span>: <span class="string">&quot;Error&quot;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Promise 的方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nb</span> = <span class="number">20</span></span><br><span class="line"><span class="title function_">operationA</span>(<span class="title class_">Nb</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>顯示如下(透過.catch()捕獲異步事件錯誤訊息)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">異步事件-異常訊息: &#123; <span class="title class_">Status</span>: <span class="string">&#x27;Error&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>Promise的鏈式調用(多個異步事件同步執行)：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"><span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="title class_">Number</span>: <span class="title class_">Number</span> * <span class="number">2</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Promise 的方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nb</span> = <span class="number">20</span></span><br><span class="line"><span class="title function_">operationA</span>(<span class="title class_">Nb</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operationA</span>(res.<span class="property">Number</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>顯示如下(確保第一個事件執行完接收res.Number，進行第二次異步事件)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一階段-異步事件-正確執行回傳資料 &#123; <span class="title class_">Number</span>: <span class="number">40</span> &#125;</span><br><span class="line">第二階段-異步事件-正確執行回傳資料 &#123; <span class="title class_">Number</span>: <span class="number">80</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Promise靜態方法"><a href="#Promise靜態方法" class="headerlink" title="Promise靜態方法"></a>Promise靜態方法</h2><h3 id="Promise-resolve-value-Promise-reject-reason"><a href="#Promise-resolve-value-Promise-reject-reason" class="headerlink" title="Promise.resolve(value) &amp; Promise.reject(reason)"></a>Promise.resolve(value) &amp; Promise.reject(reason)</h3><ul>
<li>Promise.resolve(value)：回傳Promise已完成的結果</li>
<li>Promise.reject(reason)：回傳Promise被拒絕的結果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Reject Result&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Resolved:&quot;</span>, res);  <span class="comment">// 這裡會執行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Rejected:&quot;</span>, error);  <span class="comment">// 這裡不會執行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;Reject Result&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Resolved:&quot;</span>, res);  <span class="comment">// 這裡不會執行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Rejected:&quot;</span>, error);  <span class="comment">// 這裡會執行</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Resolved</span>: <span class="title class_">Reject</span> <span class="title class_">Result</span></span><br><span class="line"><span class="title class_">Rejected</span>: <span class="title class_">Reject</span> <span class="title class_">Result</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Promise-all-iterable"><a href="#Promise-all-iterable" class="headerlink" title="Promise.all(iterable)"></a>Promise.all(iterable)</h3><ul>
<li>等待所有Promise狀態轉變成Fulfiled取得的結果，返回一個包含所有解析值的數組。</li>
<li>如果其中一個Promise狀態轉變成Rejected，整個Promise.all()都會被拒絕。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation A completed&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="title class_">Statue</span>: <span class="string">&quot;A&quot;</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operationB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Operation B completed&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="title class_">Statue</span>: <span class="string">&quot;B&quot;</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1500</span>);  <span class="comment">//← 等待1.5秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">operationA</span>(), <span class="title function_">operationB</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Operation</span> A completed</span><br><span class="line"><span class="title class_">Operation</span> B completed</span><br><span class="line">res [ &#123; <span class="title class_">Statue</span>: <span class="string">&#x27;A&#x27;</span> &#125;, &#123; <span class="title class_">Statue</span>: <span class="string">&#x27;B&#x27;</span> &#125; ]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Promise-race-iterable"><a href="#Promise-race-iterable" class="headerlink" title="Promise.race(iterable)"></a>Promise.race(iterable)</h3><ul>
<li>只要其中一個Promise狀態轉變成Fulfiled或Rejected立即結束，返回第一個成功(resolve)或被拒絕(reject)的Promise。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="title class_">Statue</span>: <span class="string">&quot;A&quot;</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">500</span>);  <span class="comment">//← 等待0.5秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(&#123; <span class="title class_">Statue</span>: <span class="string">&quot;Timeout&quot;</span> &#125;);</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">operationA</span>(), <span class="title function_">timeout</span>(<span class="number">1000</span>)])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<ul>
<li>如果超過timeout的時間就算是超時</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res &#123; <span class="title class_">Statue</span>: <span class="string">&#x27;A&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><ul>
<li>由async函數及await運算子組成，用於處理異步操作的語法糖。</li>
<li>await會解析Promise中的Fulfiled完成狀態回傳值</li>
<li>將async&#x2F;await用法與Promise鍊式寫法相互比較案例如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operationA</span>(<span class="params"><span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="title class_">Number</span>: <span class="title class_">Number</span> * <span class="number">2</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);  <span class="comment">//← 等待1秒執行</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 Promise 鍊式的寫法</span></span><br><span class="line"><span class="comment">// const Nb = 20</span></span><br><span class="line"><span class="comment">// operationA(Nb)</span></span><br><span class="line"><span class="comment">//   .then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;第一階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class="line"><span class="comment">//     return operationA(res.Number)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">//   .then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;第二階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">//   .catch((error) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.error(&quot;異步事件-異常訊息:&quot;, error)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// 使用Async/await的寫法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Nb</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> <span class="title function_">operationA</span>(<span class="title class_">Nb</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, result1);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> <span class="title function_">operationA</span>(result1.<span class="property">Number</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, result2);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;異步事件-異常訊息:&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一階段-異步事件-正確執行回傳資料 &#123; <span class="title class_">Number</span>: <span class="number">40</span> &#125;</span><br><span class="line">第二階段-異步事件-正確執行回傳資料 &#123; <span class="title class_">Number</span>: <span class="number">80</span> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(8)：ES module 匯入與匯出</title>
    <url>/Blog/JS-8/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg" alt="Blog背景圖"></p>
<h2 id="早期模塊化規範-CommonJS-CJS"><a href="#早期模塊化規範-CommonJS-CJS" class="headerlink" title="早期模塊化規範-CommonJS(CJS)"></a>早期模塊化規範-CommonJS(CJS)</h2><p>運行環境: 主要在<strong>Node.js</strong>環境下運行。Node.js是一個基於V8引擎的伺服器端JavaScript執行環境，並且內建支援CommonJS模塊系統。</p>
<ul>
<li>匯入模塊<br>使用<strong>require</strong>語法進行模塊匯入</li>
<li>匯出模塊<br>使用<strong>module.exports</strong>或<strong>exports</strong>語法進行模塊匯出</li>
</ul>
<hr>
<ul>
<li>以下是匯出的JS檔案(Export.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓匯出變數</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">myVariable</span> = <span class="string">&quot;Hello from CommonJS&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓匯出函數</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">myVariableFunc</span> = <span class="keyword">function</span>(<span class="params">Value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Value</span> + <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下是匯入的JS檔案(Import.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓匯入模塊</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./Export.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myModule&quot;</span>, myModule)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myVariable&quot;</span>, myModule.<span class="property">myVariable</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myVariableFunc&quot;</span>, myModule.<span class="title function_">myVariableFunc</span>(<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myModule &#123;</span><br><span class="line">  <span class="attr">myVariable</span>: <span class="string">&#x27;Hello from CommonJS&#x27;</span>,</span><br><span class="line">  <span class="attr">myVariableFunc</span>: [<span class="title class_">Function</span> (anonymous)]</span><br><span class="line">&#125;</span><br><span class="line">myVariable <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="title class_">CommonJS</span></span><br><span class="line">myVariableFunc <span class="number">300</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6模塊化規範-ES-Module-ESM"><a href="#ES6模塊化規範-ES-Module-ESM" class="headerlink" title="ES6模塊化規範-ES Module(ESM)"></a>ES6模塊化規範-ES Module(ESM)</h2><p>運行環境: 可以在<strong>Node.js</strong>和<strong>瀏覽器環境下</strong>運行。ES Modules是ECMAScript 6（ES6）引入的官方模塊系統，得到了現代瀏覽器的原生支援。</p>
<ul>
<li>匯入模塊<br>使用<strong>import</strong>語法進行模塊匯入</li>
<li>匯出模塊<br>使用<strong>export</strong>語法進行模塊匯出</li>
</ul>
<hr>
<p>方式分為以下兩種</p>
<h3 id="具名匯出-Named-Export"><a href="#具名匯出-Named-Export" class="headerlink" title="具名匯出(Named Export)"></a>具名匯出(Named Export)</h3><ul>
<li>藉由解構賦值來選擇性地引入模塊中的特定變數、函數或類別。</li>
<li>模塊可同時匯出多個變數、函數或類別，使得模塊的功能可以被彈性地引入。</li>
<li>匯入的變數名稱必須與原始模塊中的名稱保持一致</li>
</ul>
<hr>
<ul>
<li>以下是匯出的JS檔案(Export.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯出變數</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myVariable = <span class="string">&quot;Hello from ES Module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓具名匯出函數</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">Value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Value</span> + <span class="number">100</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下是匯入的JS檔案(Import.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯入 (Named Import)</span></span><br><span class="line"><span class="keyword">import</span> &#123; myVariable, myFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;./Export.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myVariable&quot;</span>, myVariable)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myFunction&quot;</span>, <span class="title function_">myFunction</span>(<span class="number">300</span>))</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myVariable <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="variable constant_">ES</span> <span class="title class_">Module</span></span><br><span class="line">myFunction <span class="number">400</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="匯出的JS檔案不同的寫法-統一最後在匯出"><a href="#匯出的JS檔案不同的寫法-統一最後在匯出" class="headerlink" title="匯出的JS檔案不同的寫法(統一最後在匯出)"></a>匯出的JS檔案不同的寫法(統一最後在匯出)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯出變數</span></span><br><span class="line"><span class="keyword">const</span> myVariable = <span class="string">&quot;Hello from ES Module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓具名匯出函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">Value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Value</span> + <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>

<h4 id="匯入所有的具名模塊"><a href="#匯入所有的具名模塊" class="headerlink" title="匯入所有的具名模塊(*)"></a>匯入所有的具名模塊(*)</h4><ul>
<li>需要將*命名成一個自定義的對象名稱</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯入 (Named Import)</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> importModule <span class="keyword">from</span> <span class="string">&#x27;./Export.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;importModule&quot;</span>, importModule)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myVariable&quot;</span>, importModule.<span class="property">myVariable</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myFunction&quot;</span>, importModule.<span class="title function_">myFunction</span>(<span class="number">300</span>))</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">importModule [<span class="title class_">Module</span>: <span class="literal">null</span> prototype] &#123;</span><br><span class="line">  <span class="attr">myFunction</span>: [<span class="title class_">Function</span>: myFunction],</span><br><span class="line">  <span class="attr">myVariable</span>: <span class="string">&#x27;Hello from ES Module&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">myVariable <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="variable constant_">ES</span> <span class="title class_">Module</span></span><br><span class="line">myFunction <span class="number">400</span></span><br></pre></td></tr></table></figure>

<h3 id="預設匯出-Default-Export"><a href="#預設匯出-Default-Export" class="headerlink" title="預設匯出(Default Export)"></a>預設匯出(Default Export)</h3><ul>
<li>模塊中唯一的默認導出。每個模塊只能使用一個 export default 來導出一個變數、函數、物件等。</li>
<li>可以自行命名引入的變數名稱</li>
</ul>
<hr>
<ul>
<li>以下是匯出的JS檔案(Export.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓預設匯出變數</span></span><br><span class="line"><span class="keyword">const</span> defaultVariable = <span class="string">&quot;Hello from Default Export&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defaultVariable;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下是匯入的JS檔案(Import.js)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯入 (Named Import)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Customize</span> <span class="keyword">from</span> <span class="string">&#x27;./Export.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Customize&quot;</span>, <span class="title class_">Customize</span>)</span><br></pre></td></tr></table></figure>

<h2 id="模塊化使用教學"><a href="#模塊化使用教學" class="headerlink" title="模塊化使用教學"></a>模塊化使用教學</h2><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><ul>
<li>透過以下語法快速生成專案所需的package.json</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<ul>
<li>新增type告訴專案使用的是commonjs或是module即可使用對應的方法。<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/Package_afp8hn.png" alt="Package.json設定照片"></li>
</ul>
<h3 id="瀏覽器"><a href="#瀏覽器" class="headerlink" title="瀏覽器"></a>瀏覽器</h3><h4 id="使用自己撰寫的js方法"><a href="#使用自己撰寫的js方法" class="headerlink" title="使用自己撰寫的js方法"></a>使用自己撰寫的js方法</h4><ul>
<li>透過VS Code Live Server或是自幾架設Server(避免CORS限制)</li>
<li>Export.js檔案內容如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ↓具名匯出變數</span></span><br><span class="line"><span class="keyword">const</span> myVariable = <span class="string">&quot;Hello from ES Module&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓具名匯出函數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">Value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Value</span> + <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下是HTML範例檔案</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ES Module Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123; myVariable, myFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;./Export.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myFunction</span>(<span class="number">800</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>顯示結果如下：<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E5%8C%AF%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84JS%E6%96%B9%E6%B3%95_tl41vj.png" alt="ESM匯入自己的JS方法"></p>
<h4 id="使用第三方套件的JS方法"><a href="#使用第三方套件的JS方法" class="headerlink" title="使用第三方套件的JS方法"></a>使用第三方套件的JS方法</h4><ul>
<li>透過CDN的網站查找別人已開發好的第三方套件方法</li>
<li><a href="https://cdnjs.com/">網站連結</a></li>
<li>需確認CDN上面有寫esm標記，代表可以使用ECMAScript模塊的方式匯入<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/%E7%A2%BA%E5%AE%9ACDN%E6%9C%89esm%E7%9A%84%E6%A8%99%E8%A8%98_v7k94o.png" alt="確定CDN有esm的標記"></li>
</ul>
<hr>
<ul>
<li>範例如下(以Axios為例)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Using Axios in the Browser<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/esm/axios.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 發送 GET 請求</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data:&#x27;</span>, response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>顯示如下<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E4%BD%BF%E7%94%A8Axios%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6_v1snpg.png" alt="ESM使用Axios第三方套件"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>CommonJS</tag>
        <tag>ES Module</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(9)：陣列的常見操作方法</title>
    <url>/Blog/JS-9/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="Array-forEach-callback-element-index-array"><a href="#Array-forEach-callback-element-index-array" class="headerlink" title="Array.forEach(callback[element, index, array])"></a>Array.forEach(callback[element, index, array])</h2><h3 id="forEach參數-變數名稱可以自定義"><a href="#forEach參數-變數名稱可以自定義" class="headerlink" title="forEach參數(變數名稱可以自定義)"></a>forEach參數(變數名稱可以自定義)</h3><ul>
<li>element：當前陣列元素(必填)</li>
<li>index：當前陣列元素索引值(可選)</li>
<li>array：傳遞進來的陣列(可選)</li>
</ul>
<h3 id="forEach功能"><a href="#forEach功能" class="headerlink" title="forEach功能"></a>forEach功能</h3><ul>
<li>用於對陣列中的每個元素進行特定操作的功能</li>
</ul>
<h3 id="forEach特點"><a href="#forEach特點" class="headerlink" title="forEach特點"></a>forEach特點</h3><ul>
<li>能被中斷（break），即使在函式中返回 false，forEach 也會繼續遍歷</li>
<li><strong>不會產生新的陣列</strong></li>
</ul>
<hr>
<h3 id="forEach範例"><a href="#forEach範例" class="headerlink" title="forEach範例"></a>forEach範例</h3><ul>
<li>新增NewPrice參數，且NewPrice是基於Price + 20產生</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarr = []</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;</span><br><span class="line">  newarr[key] = &#123;</span><br><span class="line">    ...item,</span><br><span class="line">    <span class="title class_">NewPrice</span>: item.<span class="property">Price</span> + <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>

<p>console.log 顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">]</span><br><span class="line">newarr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span>, <span class="title class_">NewPrice</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span>, <span class="title class_">NewPrice</span>: <span class="number">120</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span>, <span class="title class_">NewPrice</span>: <span class="number">70</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span>, <span class="title class_">NewPrice</span>: <span class="number">100</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Array-map-callback-element-index-array"><a href="#Array-map-callback-element-index-array" class="headerlink" title="Array.map(callback[element, index, array])"></a>Array.map(callback[element, index, array])</h2><h3 id="map功能"><a href="#map功能" class="headerlink" title="map功能"></a>map功能</h3><ul>
<li>map方法用於對陣列中的每個元素進行特定操作的功能，並返回一個新的陣列。</li>
</ul>
<h3 id="map特點"><a href="#map特點" class="headerlink" title="map特點"></a>map特點</h3><ul>
<li>會產生新的陣列，需要有其他變數指定。</li>
</ul>
<h3 id="map範例"><a href="#map範例" class="headerlink" title="map範例"></a>map範例</h3><ul>
<li>新增NewPrice參數，且NewPrice是基於Price + 20產生(上述forEach題目改用map寫法)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...item,</span><br><span class="line">    <span class="title class_">NewPrice</span>: item.<span class="property">Price</span> + <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>

<p>console.log 顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">]</span><br><span class="line">newarr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span>, <span class="title class_">NewPrice</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span>, <span class="title class_">NewPrice</span>: <span class="number">120</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span>, <span class="title class_">NewPrice</span>: <span class="number">70</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span>, <span class="title class_">NewPrice</span>: <span class="number">100</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Array-filter-callback-element-index-array"><a href="#Array-filter-callback-element-index-array" class="headerlink" title="Array.filter(callback[element, index, array])"></a>Array.filter(callback[element, index, array])</h2><h3 id="filter功能"><a href="#filter功能" class="headerlink" title="filter功能"></a>filter功能</h3><ul>
<li>用於從陣列中選擇滿足特定條件的元素，並返回一個新的陣列。</li>
</ul>
<h3 id="filter特點"><a href="#filter特點" class="headerlink" title="filter特點"></a>filter特點</h3><ul>
<li>會產生新的陣列，需要有其他變數指定。</li>
</ul>
<h3 id="filter範例"><a href="#filter範例" class="headerlink" title="filter範例"></a>filter範例</h3><ul>
<li>找到大於等於80的用戶資訊</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">Price</span> &gt;= <span class="number">80</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">]</span><br><span class="line">newarr [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span>&#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newarr = []</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">Price</span> &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    newarr.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">Price</span> &gt;= <span class="number">80</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>

<h2 id="Array-findIndex-callback-element-index-array"><a href="#Array-findIndex-callback-element-index-array" class="headerlink" title="Array.findIndex(callback[element, index, array])"></a>Array.findIndex(callback[element, index, array])</h2><h3 id="findIndex功能"><a href="#findIndex功能" class="headerlink" title="findIndex功能"></a>findIndex功能</h3><ul>
<li>用於找到陣列中第一個滿足指定條件的元素的索引，如果找不到則返回 -1。</li>
</ul>
<h3 id="findIndex範例"><a href="#findIndex範例" class="headerlink" title="findIndex範例"></a>findIndex範例</h3><ul>
<li>小美漲價10塊</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr before&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finditemindex = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">Name</span> === <span class="string">&#x27;小美&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">arr[finditemindex].<span class="property">Price</span> = arr[finditemindex].<span class="property">Price</span> + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finditemindex(小美索引位置)&quot;</span>, finditemindex)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info(小美物件資訊)&quot;</span>, arr[finditemindex])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr before [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="title function_">finditemindex</span>(小美索引位置) <span class="number">2</span></span><br><span class="line"><span class="title function_">info</span>(<span class="params">小美物件資訊</span>) &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">60</span> &#125;</span><br><span class="line">arr after [</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr before&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(item.<span class="property">Name</span> === <span class="string">&#x27;小美&#x27;</span>)&#123;</span><br><span class="line">    index = key</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">arr[index].<span class="property">Price</span> = arr[index].<span class="property">Price</span> + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finditemindex(小美索引位置)&quot;</span>, index)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info(小美物件資訊)&quot;</span>, arr[index])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>

<h2 id="Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue"><a href="#Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue" class="headerlink" title="Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)"></a>Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</h2><h3 id="reduce參數-變數名稱可以自定義"><a href="#reduce參數-變數名稱可以自定義" class="headerlink" title="reduce參數(變數名稱可以自定義)"></a>reduce參數(變數名稱可以自定義)</h3><ul>
<li>accumulator：上一次累加的數值，若為第一次則等於initialValue(必填)</li>
<li>currentValue：當前處理的陣列元素(必填)</li>
<li>currentIndex：當前處理陣列元素的索引值(可選)</li>
<li>array：傳遞進來的陣列(可選)</li>
<li>initialValue：初始值(可選)</li>
</ul>
<h3 id="reduce功能"><a href="#reduce功能" class="headerlink" title="reduce功能"></a>reduce功能</h3><ul>
<li>用於將陣列中的所有元素進行累積</li>
</ul>
<h3 id="reduce特點"><a href="#reduce特點" class="headerlink" title="reduce特點"></a>reduce特點</h3><ul>
<li>可以用於陣列的求和、求積等操作</li>
<li>可以指定初始值(initialValue)</li>
</ul>
<h3 id="reduce範例"><a href="#reduce範例" class="headerlink" title="reduce範例"></a>reduce範例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> init = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Total</span> = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前累加值：<span class="subst">$&#123;acc&#125;</span></span></span><br><span class="line"><span class="string">  -------`</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當前陣列元素&quot;</span>, cur)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當前陣列索引&quot;</span>, index)</span><br><span class="line">  <span class="keyword">return</span> acc + cur.<span class="property">Price</span></span><br><span class="line">&#125;, init)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Total&quot;</span>, <span class="title class_">Total</span>)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">目前累加值：<span class="number">0</span></span><br><span class="line">  -------</span><br><span class="line">當前陣列元素 &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小王&#x27;</span>, <span class="title class_">Price</span>: <span class="number">10</span> &#125;</span><br><span class="line">當前陣列索引 <span class="number">0</span></span><br><span class="line">目前累加值：<span class="number">10</span></span><br><span class="line">  -------</span><br><span class="line">當前陣列元素 &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="title class_">Price</span>: <span class="number">100</span> &#125;</span><br><span class="line">當前陣列索引 <span class="number">1</span></span><br><span class="line">目前累加值：<span class="number">110</span></span><br><span class="line">  -------</span><br><span class="line">當前陣列元素 &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小美&#x27;</span>, <span class="title class_">Price</span>: <span class="number">50</span> &#125;</span><br><span class="line">當前陣列索引 <span class="number">2</span></span><br><span class="line">目前累加值：<span class="number">160</span></span><br><span class="line">  -------</span><br><span class="line">當前陣列元素 &#123; <span class="title class_">Name</span>: <span class="string">&#x27;小天&#x27;</span>, <span class="title class_">Price</span>: <span class="number">80</span> &#125;</span><br><span class="line">當前陣列索引 <span class="number">3</span></span><br><span class="line"><span class="title class_">Total</span> <span class="number">240</span></span><br></pre></td></tr></table></figure>

<ul>
<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Total</span> = <span class="number">0</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前累加值：<span class="subst">$&#123;Total&#125;</span></span></span><br><span class="line"><span class="string">  -------`</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當前陣列元素&quot;</span>, item)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;當前陣列索引&quot;</span>, key)</span><br><span class="line">  <span class="title class_">Total</span> = <span class="title class_">Total</span> + item.<span class="property">Price</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Total&quot;</span>, <span class="title class_">Total</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Array-sort-compareFunction"><a href="#Array-sort-compareFunction" class="headerlink" title="Array.sort([compareFunction])"></a>Array.sort([compareFunction])</h2><h3 id="sort參數-變數名稱可以自定義"><a href="#sort參數-變數名稱可以自定義" class="headerlink" title="sort參數(變數名稱可以自定義)"></a>sort參數(變數名稱可以自定義)</h3><ul>
<li>a, b: 要比較的兩個元素</li>
</ul>
<h3 id="sort特點"><a href="#sort特點" class="headerlink" title="sort特點"></a>sort特點</h3><ul>
<li>a - b：由小到大(升序)</li>
<li>b - a：由大到小(降序)</li>
</ul>
<h3 id="sort功能"><a href="#sort功能" class="headerlink" title="sort功能"></a>sort功能</h3><ul>
<li>用於對陣列元素進行排序。</li>
</ul>
<h3 id="sort範例"><a href="#sort範例" class="headerlink" title="sort範例"></a>sort範例</h3><h4 id="由小到大-升序"><a href="#由小到大-升序" class="headerlink" title="由小到大(升序)"></a>由小到大(升序)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortarr = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">Price</span> - b.<span class="property">Price</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>

<h4 id="由大到小-降序"><a href="#由大到小-降序" class="headerlink" title="由大到小(降序)"></a>由大到小(降序)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小王&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小美&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Name</span>: <span class="string">&quot;小天&quot;</span>,</span><br><span class="line">    <span class="title class_">Price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortarr = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> b.<span class="property">Price</span> - a.<span class="property">Price</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Array.forEach</tag>
        <tag>Array.map</tag>
        <tag>Array.filter</tag>
        <tag>Array.findIndex</tag>
        <tag>Array.reduce</tag>
        <tag>Array.sort</tag>
      </tags>
  </entry>
  <entry>
    <title>六角學院 - 軟體工程師體驗營</title>
    <url>/Blog/hexschool-experience/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1717163281/hexschool-experience_c5chm6.avif" alt="Blog背景圖"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">面對網路上各種學習資源的洗禮，你也曾經感到無助或是找不到人討論嗎?</span><br><span class="line"></span><br><span class="line">今天想輕鬆一些分享關於我最喜歡的線上課程「六角學院」</span><br></pre></td></tr></table></figure>

<h2 id="跟自己比較就好"><a href="#跟自己比較就好" class="headerlink" title="跟自己比較就好"></a>跟自己比較就好</h2><p>這不是我第一次參加線上課程，也不是只有參加過六角學院的線上課程，但是我真的很喜歡六角的學習環境。在這邊你可以擁有數不盡的影片資源，提供很大的自由度讓你自行安排學習時間。即使是上班族，也能夠以自己最舒服的步調前進(EX:我)。這非常符合這次課程中一直提到的「跟自己比較就好」。我本身很容易產生知識焦慮，常常看到別人就覺得自己不夠好。但這個體驗營讓我更找回自己的初心，你不需要很厲害才開始，但你要開始了才能很厲害。</p>
<h2 id="每個人都是別人的導師"><a href="#每個人都是別人的導師" class="headerlink" title="每個人都是別人的導師"></a>每個人都是別人的導師</h2><p>在學習網頁設計的時候，即使是一個特效都可以讓我研究一整天。有時候，只需要有人指點一下，就可以發現自己認知或學習上的盲點。還記得一開始我不太敢問問題，怕問太簡單的問題會被別人認為是伸手族，腦中充滿了各種思緒。最終，我勇敢的提問之後，發現發現這些擔心都是多餘的。每個人在學習上都會遇到不會的事情，提問並不可恥。在這些問題討論的交流中，我更意識到自己喜歡這種大家一起討論學習問題的方式。網頁並沒有絕對正確的設計方式，但這也正是它的迷人之處，因為每個人都可以用自己的想法進行設計。</p>
<h2 id="永遠無極限的直播校長"><a href="#永遠無極限的直播校長" class="headerlink" title="永遠無極限的直播校長"></a>永遠無極限的直播校長</h2><p>連續直播兩個小時幾乎沒間斷的教學，從基礎的Emmet開始，一步步講解到CSS的優先級、偽元素、偽類及部落格客製化創建等內容。每週我都很期待校長的直播，儘管課程內容中有七成是我已經熟悉的，但那額外的三成新知識讓我受益豐碩。</p>
<p>看著校長的直播，我也希望能成為這樣子的人，將自己的專業轉化成指引其他想要接觸網頁的一盞燈。我非常佩服校長，也很感謝他的用心教學。有時候，甚至在半夜還能看到他回覆課程 Discord 上的訊息，真的很辛苦，與其說單純只是上課關係，更像是校長希望幫助每一個人，只要你願意努力，六角學院就不會放棄你。</p>
<p>除此之外，校長還分享了許多職涯方面的建議，這些對我幫助很大，讓我能夠更有目標地構築未來職業所需的能力。校長針對每個人的問題給予具體的建議，有時甚至會超過原本的直播時間，但校長總是會一一回答，這種無私的付出讓我非常感動。</p>
<h2 id="每日任務及助教批改"><a href="#每日任務及助教批改" class="headerlink" title="每日任務及助教批改"></a>每日任務及助教批改</h2><p>每日任務這種有具體目標的方式，我非常喜歡。當我看到別人針對同一問題的不同解法時，總是讓我感到興奮，甚至會有一種想要在榜上留名的動力。主題任務的提交數甚至到了1400多份，完全可以感受到助教批改有多辛苦，也讓我更加珍惜每次助教們給予的寶貴回饋。我印象最深刻的是，有次地震發生後，一位助教竟然因為震醒後，乾脆繼續批改作業，助教及老師們還要顧身體誒！！！！之後時間允許的情況下，還會想回來這個學習環境繼續進修及努力。</p>
]]></content>
      <categories>
        <category>學習心得</category>
      </categories>
      <tags>
        <tag>六角學院</tag>
        <tag>軟體工程師體驗營</tag>
        <tag>心得分享</tag>
      </tags>
  </entry>
  <entry>
    <title>React(2)：JSX 是什麼？為何在 React 中使用 JSX？</title>
    <url>/Blog/React-2/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg" alt="Blog背景圖"></p>
<h2 id="什麼是-JSX-為什麼要用JSX"><a href="#什麼是-JSX-為什麼要用JSX" class="headerlink" title="什麼是 JSX? 為什麼要用JSX?"></a>什麼是 JSX? 為什麼要用JSX?</h2><ul>
<li>JSX（JavaScript XML）是一種 JavaScript 的語法擴展，通常與 React 一同使用。它允許開發者在 JavaScript 中使用類似 XML 或 HTML 的語法來撰寫 React 元素，並透過渲染（Render）將其轉譯為實際的 DOM 元素及相對應的事件。這種語法使得 React 組件的描述更直觀、易讀，同時提供了更高效的元素創建方式。</li>
<li>JSX只是為React element(原生語法)提供語法糖。</li>
<li>原生創建React元素語法：React.createElement(component, props, …children)。<ul>
<li>component：React 元素的類型，可以是 HTML 元素名稱（字符串，例如 ‘div’）或 React 組件</li>
<li>props：元素的屬性（attributes），是一個包含元素屬性及其值的物件。</li>
<li>…children：元素的子元素，可以是單一元素或一個包含多個子元素的數組。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  div,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;info&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>JSX寫法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;info&quot;</span>&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>巢狀寫法的案例如下：<ul>
<li>React.createElement寫法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">&#x27;container&#x27;</span> &#125;,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;Nested Example&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span> &#125; &#125;,</span><br><span class="line">    <span class="string">&#x27;This is a nested paragraph.&#x27;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>JSX寫法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nested Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">blue</span>&#x27; &#125;&#125;&gt;</span>This is a nested paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSX內部原理及規則"><a href="#JSX內部原理及規則" class="headerlink" title="JSX內部原理及規則"></a>JSX內部原理及規則</h2><ul>
<li>JSX會在編譯階段被轉譯成對應的 React.createElement 的呼叫，生成一個 JavaScript 物件，這個物件描述了 React 元素的類型、屬性（props），以及子元素。</li>
</ul>
<hr>
<p>JSX使用規則如下</p>
<h3 id="使用者定義的元件必須大寫"><a href="#使用者定義的元件必須大寫" class="headerlink" title="使用者定義的元件必須大寫"></a>使用者定義的元件必須大寫</h3><ul>
<li>錯誤寫法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// ↓ 正確：hello-&gt;Hello</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HelloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ↓ 使用hello非大寫會導致發生錯誤，無法透過JSX引用該元件</span></span><br><span class="line">  <span class="comment">//   正確的方式：hello-&gt;Hello</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">toWhat</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>正確寫法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HelloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">toWhat</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React元件不能使用表達式-只能是大寫字母開頭的變數或函數名"><a href="#React元件不能使用表達式-只能是大寫字母開頭的變數或函數名" class="headerlink" title="React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)"></a>React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)</h3><ul>
<li>錯誤寫法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PhotoStory 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PhotoStory</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// VideoStory 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VideoStory</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Story 元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = &#123;</span><br><span class="line">  <span class="attr">photo</span>: <span class="title class_">PhotoStory</span>,</span><br><span class="line">  <span class="attr">video</span>: <span class="title class_">VideoStory</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Story</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// ↓ 請用變數賦值，避免使用表達式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml">&lt;Components[props.storyType]; story=&#123;props.story&#125; /&gt;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// App 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Story</span> <span class="attr">storyType</span>=<span class="string">&quot;photo&quot;</span> <span class="attr">story</span>=<span class="string">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Story</span> <span class="attr">storyType</span>=<span class="string">&quot;video&quot;</span> <span class="attr">story</span>=<span class="string">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>正確寫法</li>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/ZEwamdE">CodePen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PhotoStory 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PhotoStory</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// VideoStory 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VideoStory</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Story 元件</span></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">  <span class="attr">photo</span>: <span class="title class_">PhotoStory</span>,</span><br><span class="line">  <span class="attr">video</span>: <span class="title class_">VideoStory</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Story</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 根據 props 中的 storyType 選擇要渲染的元件</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SpecificStory</span> = components[props.<span class="property">storyType</span>];</span><br><span class="line">  <span class="comment">// 渲染所選擇的元件，並將 story 作為 props 傳遞</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">SpecificStory</span> <span class="attr">story</span>=<span class="string">&#123;props.story&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// App 元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Story</span> <span class="attr">storyType</span>=<span class="string">&quot;photo&quot;</span> <span class="attr">story</span>=<span class="string">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Story</span> <span class="attr">storyType</span>=<span class="string">&quot;video&quot;</span> <span class="attr">story</span>=<span class="string">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Photo</span> <span class="title class_">Story</span>: A beautiful photo story</span><br><span class="line"><span class="title class_">Video</span> <span class="title class_">Story</span>: <span class="title class_">An</span> amazing video story</span><br></pre></td></tr></table></figure>

<h3 id="回傳單一個根元素"><a href="#回傳單一個根元素" class="headerlink" title="回傳單一個根元素"></a>回傳單一個根元素</h3><ul>
<li>最外層需要使用父層元素包覆(EX：div、或使用 Fragment (&lt;&gt; 和 &lt;&#x2F;&gt;))</li>
<li>案例如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="所有標籤都需要結尾標籤"><a href="#所有標籤都需要結尾標籤" class="headerlink" title="所有標籤都需要結尾標籤"></a>所有標籤都需要結尾標籤</h3><p>範例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>自閉標籤(self-closing)範例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSX特色"><a href="#JSX特色" class="headerlink" title="JSX特色"></a>JSX特色</h2><h3 id="Props可以使用Javascript表達式-foo-1-2-3-4"><a href="#Props可以使用Javascript表達式-foo-1-2-3-4" class="headerlink" title="Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})"></a>Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})</h3><ul>
<li>Javascript表達式案例如下：</li>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/eYxebZp">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>由App組件傳過來的foo參數：&#123;props.foo&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">foo</span>=<span class="string">&#123;1</span> + <span class="attr">2</span> + <span class="attr">3</span> + <span class="attr">4</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">由<span class="title class_">App</span>組件傳過來的foo參數：<span class="number">10</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>if跟for不是表達式不能使用</strong></li>
<li>三元運算符(肚子餓了嗎?餓了:還沒餓)及邏輯運算符(&amp;&amp;)算是表達式的一種</li>
<li>三元運算符案例如下：</li>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/qBgVLrX">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">&#123; isLoggedIn &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isLoggedIn ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please log in.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [isLoggedIn, setIsLoggedIn] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLoginToggle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsLoggedIn</span>(<span class="function">(<span class="params">prevIsLoggedIn</span>) =&gt;</span> !prevIsLoggedIn);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLoginToggle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;isLoggedIn ? &#x27;Logout&#x27; : &#x27;Login&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">isLoggedIn</span>=<span class="string">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>邏輯運算符(&amp;&amp;)案例如下：</li>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/QWYOzML">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;isLoggedIn &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome back!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>顯示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Welcome</span> back!</span><br></pre></td></tr></table></figure>

<h3 id="純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白"><a href="#純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白" class="headerlink" title="純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)"></a>純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;false&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;null&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;undefined&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;true&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="屬性展開-…"><a href="#屬性展開-…" class="headerlink" title="屬性展開(…)"></a>屬性展開(…)</h3><ul>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/KKJybyw">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123; <span class="attr">className</span>: <span class="string">&#x27;my-class&#x27;</span>, <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...props</span>&#125;&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="陣列作為子元素：-你可以使用陣列來傳遞多個子元素"><a href="#陣列作為子元素：-你可以使用陣列來傳遞多個子元素" class="headerlink" title="陣列作為子元素： 你可以使用陣列來傳遞多個子元素"></a>陣列作為子元素： 你可以使用陣列來傳遞多個子元素</h3><ul>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/QWYOzaW">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> items = [<span class="string">&#x27;Item 1&#x27;</span>, <span class="string">&#x27;Item 2&#x27;</span>, <span class="string">&#x27;Item 3&#x27;</span>];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;items.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h3 id="React內聯樣式（inline-styles）"><a href="#React內聯樣式（inline-styles）" class="headerlink" title="React內聯樣式（inline styles）"></a>React內聯樣式（inline styles）</h3><ul>
<li>JSX不能使用保留字(會自動轉換成別的字詞避免與保留字衝突)<ul>
<li>class-&gt;className</li>
<li>for-&gt;htmlfor(label)</li>
<li>CSS內聯屬性stroke-width改成駝峰式命名(Camel-Case)strokeWidth</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">16px</span>&#x27; &#125;&#125;&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(4)：注重關注點的分離</title>
    <url>/Blog/JS-4/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<p><strong>關注點分離（Separation of Concerns，SoC）</strong></p>
<h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><ul>
<li>關注點分離是一種軟體設計原則，將一個系統劃分為不同的模組或元件，每個模組或元件集中於解決特定的關注點或任務，以提高系統的可操作性、可維護性、可擴展性和可重用性。該原則主張將不同層面的關注點獨立開發，使得修改一個關注點不會影響其他關注點。</li>
<li>傳統的網頁開發中，通常會將網頁的開發區分為HTML、CSS、JavaScript三個技術領域，並分別將它們拆分成不同的檔案，以負責各自的領域。<ul>
<li>HTML： 語意層，負責網頁結構和整體語意。</li>
<li>CSS： 樣式層，負責網頁外觀和樣式。</li>
<li>JavaScript： 邏輯層，負責處理事件邏輯和動態行為。</li>
</ul>
</li>
<li>避免寫行內樣式(inline style)跟行內腳本(inline script)造成彼此領域的干涉。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;color:red;font-size:46px;&quot;  onclick=&quot;alert(&#x27;Hi&#x27;)&quot;&gt;</span><br><span class="line">  Hello World</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>關注點分離寫法</li>
<li>HTML(語意層)：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">  Hello World</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>CSS(樣式層)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">46px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript（邏輯層）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// script.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> header = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">  header.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="關注點分離-MVC概念"><a href="#關注點分離-MVC概念" class="headerlink" title="關注點分離- MVC概念"></a>關注點分離- MVC概念</h2><ul>
<li>Model：<ul>
<li>負責處理數據的邏輯，包括數據的存儲、檢索、更新和刪除等操作。</li>
</ul>
</li>
<li>View：<ul>
<li>負責呈現界面，即用戶界面的渲染和顯示。</li>
</ul>
</li>
<li>Controller：<ul>
<li>負責接收用戶的輸入，處理業務邏輯，然後更新模型和視圖。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>單純依賴Controller影響View的節點，使得View上呈現的節點難以維護。<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg" alt="傳統網頁結構"></li>
</ul>
<hr>
<p>我們希望透過MVC的概念讓維護上更為方便。</p>
<ul>
<li>使用者與介面互動 -&gt; Controller處理網頁邏輯 -&gt; Controller調用Model方法，影響Model資料(新增或修改) -&gt; 修改完Controller再次呼叫View渲染的方法 -&gt; View根據更新後的資料重新渲染</li>
<li>達到View及Model透過Controller進行彼此的溝通而不直接互相影響。<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg" alt="關注點分離-網頁結構"></li>
<li>透過以下流程搭配程式碼進行說明<ol>
<li>用戶與界面互動，觸發 Controller 的相應方法。<ul>
<li>使用者在瀏覽器點擊移除。</li>
</ul>
</li>
<li>Controller 根據用戶的輸入操作 Model。<ul>
<li>按鈕的點擊事件觸發了 removeData 方法，這是 Controller 中的一個相應方法。</li>
</ul>
</li>
<li>Model 的狀態發生變化。<ul>
<li>removeData方法中使用了 splice 方法來移除資料陣列 data 中的特定項目，即刪除了一個資料項。</li>
</ul>
</li>
<li>Controller 得知 Model 狀態的變化，通知相應的 View。<ul>
<li>removeData方法執行完畢後，立即呼叫了 render 方法，這是通知 View 部分。</li>
</ul>
</li>
<li>View 從 Model 中獲取最新的數據。<ul>
<li>render方法內部重新遍歷資料陣列，創建新的HTML元素，並更新 DOM 中的內容。</li>
</ul>
</li>
<li>View 使用這些數據更新界面。<ul>
<li>新的HTML元素被注入到DOM中，此時界面上的列表已經更新，反映了資料變化。</li>
</ul>
</li>
</ol>
</li>
<li><a href="https://codepen.io/gwhvusel-the-builder/pen/LYqevQL">Codepen連結</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  <span class="comment">// Model的部分</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="attr">data</span>: [</span><br><span class="line">    <span class="string">&#x27;這是第一句話&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;這是第二句話&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;這是第三句話&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="title function_">removeData</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">splice</span>(id, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// View的部分</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="title function_">renderList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.component ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">      content = <span class="string">`<span class="subst">$&#123;content&#125;</span>&lt;li&gt;<span class="subst">$&#123;item&#125;</span> &lt;button type=&quot;button&quot; class=&quot;btn&quot; data-id=&quot;<span class="subst">$&#123;i&#125;</span>&quot;&gt;移除&lt;/button&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    list.<span class="property">innerHTML</span> = content;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">addEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">    btns.<span class="title function_">forEach</span>(<span class="function"><span class="params">btn</span> =&gt;</span> btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> id = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">removeData</span>(id);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Controller</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123; <span class="comment">// 渲染方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">renderList</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addEventListeners</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">&#125;;</span><br><span class="line">component.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>SoC</tag>
      </tags>
  </entry>
  <entry>
    <title>前端勇士大闖六角後端體驗營 - 初探 PostgreSQL DML 語法</title>
    <url>/Blog/PostgreSQL-1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730362541/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E5%8B%87%E5%A3%AB%E5%A4%A7%E9%97%96%E5%85%AD%E8%A7%92%E5%BE%8C%E7%AB%AF%E9%AB%94%E9%A9%97%E7%87%9F/%E5%89%8D%E7%AB%AF%E5%8B%87%E5%A3%AB%E5%A4%A7%E9%97%96%E5%85%AD%E8%A7%92%E5%BE%8C%E7%AB%AF%E9%AB%94%E9%A9%97%E7%87%9F_ofqtre.png" alt="文章封面圖"></p>
<h2 id="什麼是後端伺服器？"><a href="#什麼是後端伺服器？" class="headerlink" title="什麼是後端伺服器？"></a>什麼是後端伺服器？</h2><p>當我們透過前端伺服器發送請求到後端伺服器的流程，大致可以規劃成以下簡易的流程。</p>
<p>依照之前架設的<code>Nodejs express</code>伺服器的經驗：</p>
<ol>
<li><strong>身份和請求確認</strong>：當後端接收到請求時，先進行身份驗證和請求合法性的檢查，這通常涉及中介軟體（middleware）</li>
<li><strong>路由導向</strong>：依照路由配置和請求的目標，將請求引導至相應的控制器，並確保符合<code>RESTful API</code>的設計</li>
<li><strong>ORM 與 SQL 的選擇</strong>：可選擇直接透過<code>SQL(Structured Query Language)</code>語法或透過<code>ORM(Object Relational Mapping)</code>的方式跟資料庫進行交互（兩者各有優缺點，以維護性的角度我比較偏好使用 ORM 的方式）</li>
</ol>
<blockquote>
<ul>
<li>SQL 可以想成跟關聯式資料庫溝通的語法，關聯式資料庫基本上都可以使用 SQL 語法，可以學一個用很多個</li>
<li>ORM 可以理解為一種通過定義資料表結構的抽象層，透過這層管理，將程式碼中的操作轉換成對應的 SQL 語法來與資料庫進行互動。當換成其他關聯性資料庫時，只需要告訴 ORM 工具搭配的是哪一個資料庫就可以。</li>
</ul>
</blockquote>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730303549/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E5%8B%87%E5%A3%AB%E5%A4%A7%E9%97%96%E5%85%AD%E8%A7%92%E5%BE%8C%E7%AB%AF%E9%AB%94%E9%A9%97%E7%87%9F/%E5%89%8D%E5%BE%8C%E7%AB%AF%E6%A5%B5%E7%B0%A1%E6%98%93%E6%9E%B6%E6%A7%8B%E5%9C%96_dqigqz.png" alt="前後端極簡易架構圖"></p>
<h2 id="SQL-DML-DDL-類型說明-以-PostgreSQL-為例"><a href="#SQL-DML-DDL-類型說明-以-PostgreSQL-為例" class="headerlink" title="SQL DML &amp; DDL 類型說明 - 以 PostgreSQL 為例"></a>SQL DML &amp; DDL 類型說明 - 以 PostgreSQL 為例</h2><p>SQL 語法可依照其指令的操作範疇區分 DDL（Data Definition Language） 和 DML（Data Manipulation Language）兩種類型：</p>
<ul>
<li>DDL：針對資料庫結構進行操作。例如創建、修改和刪除資料表、索引或其他資料庫物件。</li>
<li>DML：針對資料表中的資料進行操作。例如查詢、插入、更新和刪除等資料處理。</li>
</ul>
<table>
<thead>
<tr>
<th>DDL 功能說明</th>
<th>SQL 語法</th>
<th>DML 功能說明</th>
<th>SQL 語法</th>
</tr>
</thead>
<tbody><tr>
<td>新增物件</td>
<td>CREATE</td>
<td>查詢資料</td>
<td>SELECT</td>
</tr>
<tr>
<td>修改物件結構</td>
<td>ALTER</td>
<td>新增資料</td>
<td>INSERT</td>
</tr>
<tr>
<td>刪除物件</td>
<td>DROP</td>
<td>更新資料</td>
<td>UPDATE</td>
</tr>
<tr>
<td>清除資料</td>
<td>TRUNCATE</td>
<td>刪除資料</td>
<td>DELETE</td>
</tr>
</tbody></table>
<p>以下會透過案例的方式著重說明 DML 的語法，讓大家更清楚如何理解每個語法使用的規則。</p>
<p>在開始之前，先說明我們這次案例的故事：</p>
<p>這是一個關於小美在家具店打工時，遇到客人的故事…</p>
<blockquote>
<ul>
<li><p><strong>客人</strong>：我要看那個貓抓皮沙發，你們還有貨嗎？</p>
</li>
<li><p><strong>小美</strong>：（慌張）啊…貓抓皮沙發…<br>(ＱＱ 一時想不起來，只能使用學長之力，急著用 LINE 問小明學長)</p>
</li>
<li><p><strong>小美</strong>：學長救命！要怎麼查這個沙發？</p>
</li>
<li><p><strong>小明</strong>：(學長光環閃爍)這邊只要對著這個機器下等於的語法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, stock <span class="comment">---想找出的資料表欄位</span></span><br><span class="line"><span class="keyword">FROM</span> products <span class="comment">--- 根據哪一張資料表</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;貓抓皮L型沙發&#x27;</span>; <span class="comment">--- 條件是什麼</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>小美</strong>：原來如此，一緊張就都忘記了。意思是這樣子對吧。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">選取 名字、價格、庫存</span><br><span class="line">從 商品表</span><br><span class="line">找 商品名等於貓抓皮L型沙發</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>小明</strong>：對！很快就上手了呢！在多練習幾次就沒問題了</p>
</li>
<li><p><strong>小美</strong>：（快速輸入）</p>
</li>
<li><p><strong>小美</strong>：哇！真的查到了！</p>
</li>
<li><p><strong>小美</strong>：只剩一張庫存耶…</p>
</li>
<li><p><strong>客人</strong>：（不耐煩）小姐？到底有沒有啊？</p>
</li>
<li><p><strong>小美</strong>： 這款 L 型沙發目前最後一張特價 52900，要幫您預訂嗎？</p>
</li>
<li><p><strong>客人</strong>：哦？最後一張喔…那…就先訂起來好了！</p>
</li>
<li><p><strong>小明</strong>：！！！這麼快就會了？根本是資料庫天才 ❤️</p>
</li>
<li><p><strong>小明</strong>：那我再考你幾題，如果你都會了以後，那我就可以退休了ㄏㄏㄏ</p>
</li>
<li><p><strong>小美</strong>：學長不可以啦…..</p>
</li>
</ul>
</blockquote>
<hr>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><p>本次練習的關聯性資料庫使用<code>PostgreSQL</code>，並搭配線上工具<a href="https://pg-sql.com/">pg-sql</a>，大家可以跟著一起練習，順便加深對於資料庫的操作印象。</p>
<p>首先我們需要使用<code>DDL</code>中的<code>CREATE</code>語法創建練習所需的資料表：</p>
<blockquote>
<p>VARCHAR 可以想成我們常用的字串，後面的數字則代表字串長度限制。而 INTEGER 則代表整數。針對資料庫操作的時候，必須按照其型別儲存對應的資料，否則會報錯。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">   name <span class="type">VARCHAR</span>(<span class="number">100</span>),         <span class="comment">-- 商品名稱</span></span><br><span class="line">   price <span class="type">INTEGER</span>,            <span class="comment">-- 原價</span></span><br><span class="line">   discount_price <span class="type">INTEGER</span>,    <span class="comment">-- 優惠價</span></span><br><span class="line">   stock <span class="type">INTEGER</span>,            <span class="comment">-- 庫存數量</span></span><br><span class="line">   category <span class="type">VARCHAR</span>(<span class="number">50</span>),      <span class="comment">-- 商品分類</span></span><br><span class="line">   status <span class="type">VARCHAR</span>(<span class="number">20</span>)         <span class="comment">-- 商品狀態</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<hr>
<p>接著，我們創建完資料表之後，就可以透過 DML 中的<code>INSERT</code> sql 語法將資料儲存進去，進行後續<code>查詢資料</code>、<code>更新資料</code>及<code>刪除資料</code>的相關操作。</p>
<blockquote>
<ul>
<li><strong>INSERT INTO</strong>：我要準備將資料新增進去資料庫囉！</li>
<li><strong>products</strong>：要插入的資料表名稱</li>
<li><strong>(</strong>name, price, discount_price…<strong>)</strong>：表明要插入的欄位有哪些</li>
<li><strong>VALUES</strong>：插入的欄位值</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (name, price, discount_price, stock, category, status) <span class="keyword">VALUES</span></span><br><span class="line">   (<span class="string">&#x27;北歐風雙人沙發&#x27;</span>, <span class="number">39900</span>, <span class="number">35900</span>, <span class="number">3</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;貓抓皮L型沙發&#x27;</span>, <span class="number">58900</span>, <span class="number">52900</span>, <span class="number">1</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;典雅三人座沙發&#x27;</span>, <span class="number">42800</span>, <span class="number">42800</span>, <span class="number">5</span>, <span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;工業風電視櫃&#x27;</span>, <span class="number">5900</span>, <span class="number">4900</span>, <span class="number">12</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;簡約書櫃&#x27;</span>, <span class="number">3500</span>, <span class="number">3500</span>, <span class="number">8</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;玄關鞋櫃&#x27;</span>, <span class="number">2900</span>, <span class="number">2900</span>, <span class="number">15</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;日式雙人床架&#x27;</span>, <span class="number">12000</span>, <span class="number">11200</span>, <span class="number">6</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;掀床五尺雙人床&#x27;</span>, <span class="number">19900</span>, <span class="number">18900</span>, <span class="number">2</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;兒童床架&#x27;</span>, <span class="number">8900</span>, <span class="number">8900</span>, <span class="number">0</span>, <span class="string">&#x27;床架&#x27;</span>, <span class="string">&#x27;inactive&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;電腦辦公椅&#x27;</span>, <span class="number">4500</span>, <span class="number">3900</span>, <span class="number">20</span>, <span class="string">&#x27;椅子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;餐椅四入組&#x27;</span>, <span class="number">6000</span>, <span class="number">5200</span>, <span class="number">8</span>, <span class="string">&#x27;椅子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;北歐風餐桌&#x27;</span>, <span class="number">15800</span>, <span class="number">14800</span>, <span class="number">4</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;實木咖啡桌&#x27;</span>, <span class="number">3200</span>, <span class="number">2900</span>, <span class="number">10</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;電競書桌&#x27;</span>, <span class="number">8900</span>, <span class="number">8900</span>, <span class="number">0</span>, <span class="string">&#x27;桌子&#x27;</span>, <span class="string">&#x27;inactive&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="比較運算子應用-、-、-、"><a href="#比較運算子應用-、-、-、" class="headerlink" title="比較運算子應用(&gt;&#x3D;、&gt;、&#x3D;、&lt;、&lt;&#x3D;)"></a>比較運算子應用(&gt;&#x3D;、&gt;、&#x3D;、&lt;、&lt;&#x3D;)</h3><ul>
<li><strong>情境 1：單品查詢</strong></li>
</ul>
<blockquote>
<p>客人：「這張北歐風雙人沙發多少錢？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：想找到這張沙發的價格和庫存</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>SELECT</strong>：查詢資料庫中符合條件的資料</li>
<li><strong>name, price, discount_price, stock</strong>：指定要查詢的欄位</li>
<li><strong>FROM products</strong>：要查詢的資料表名稱</li>
<li><strong>WHERE</strong>：查詢條件搭配使用比較運算子(&#x3D;)的使用</li>
</ul>
</blockquote>
<p>在查詢語法當中，有一個特別的存在<code>* (萬用字元)</code>，代表查詢所有欄位。這邊可能會想說是不是都用<code>*</code>就好，還需要特別指定要檢索的欄位嗎？</p>
<blockquote>
<p>回傳的欄位越多，資料庫的檢索和回傳所需的時間就越長。因此，為了提高查詢效率，建議只選擇所需的欄位，讓資料庫更快地返回我們所需要的資料。</p>
</blockquote>
<ul>
<li><strong>情境 2：價格比較</strong></li>
</ul>
<blockquote>
<p>客人：「請列出 5000 元以下的櫃子有哪些？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：找出櫃子類且價格在 5000 以下的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;櫃子&#x27;</span> <span class="keyword">AND</span> discount_price <span class="operator">&lt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 3：價格比較</strong></li>
</ul>
<blockquote>
<p>客人：「日式雙人床架還有貨嗎？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：確認日式雙人床架的庫存狀況</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;日式雙人床架&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="AND-邏輯運算符應用"><a href="#AND-邏輯運算符應用" class="headerlink" title="AND 邏輯運算符應用"></a>AND 邏輯運算符應用</h3><p>邏輯運算符中存在<code>AND</code>及<code>OR</code>可以搭配<code>Where</code>在下條件查詢的時候使用。這邊先介紹<code>AND</code>的語法，<code>AND</code>可以組合多個查詢條件但是很重要的是必須全部都符合的情況下才會回傳該筆資料。</p>
<ul>
<li><strong>情境 4：尋找預算內且存在庫存的沙發</strong></li>
</ul>
<blockquote>
<p>客人：預算內的商品 客人：「想找 4 萬以下，而且有現貨的沙發」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要同時符合：是沙發、4萬以下、有庫存</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;沙發&#x27;</span> <span class="keyword">AND</span> discount_price <span class="operator">&lt;</span> <span class="number">40000</span> <span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 5：特價且有貨</strong></li>
</ul>
<blockquote>
<p>客人：「沙發有哪些特價且現貨的品項？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找到沙發類且有特價（原價大於優惠價）且還有庫存的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;沙發&#x27;</span> <span class="keyword">AND</span> price <span class="operator">&gt;</span> discount_price <span class="keyword">AND</span> stock <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="OR-邏輯運算符應用"><a href="#OR-邏輯運算符應用" class="headerlink" title="OR 邏輯運算符應用"></a>OR 邏輯運算符應用</h3><p><code>OR</code>也是邏輯運算符中的一種，代表各個條件之間如果有一個符合的情況下，就會回傳該筆資料。</p>
<ul>
<li><strong>情境 6：多分類查詢</strong></li>
</ul>
<blockquote>
<p>客人：「我要找櫃子或桌子」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找出櫃子類或桌子類的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, category</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;櫃子&#x27;</span> <span class="keyword">OR</span> category <span class="operator">=</span> <span class="string">&#x27;桌子&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 7：指定商品</strong></li>
</ul>
<blockquote>
<p>客人：「北歐風雙人沙發和貓抓皮L型沙發哪個還有貨？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找出這兩張特定沙發的庫存狀況</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span> <span class="keyword">OR</span> name <span class="operator">=</span> <span class="string">&#x27;貓抓皮L型沙發&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="IN-集合與範圍運算符應用"><a href="#IN-集合與範圍運算符應用" class="headerlink" title="IN 集合與範圍運算符應用"></a>IN 集合與範圍運算符應用</h3><p><code>IN</code>是一種集合與範圍運算符，常用於篩選某欄位符合特定值集合的資料。當我們希望查詢結果包含多個特定類別或值時，可以使用 <code>IN</code>來簡化語法。</p>
<ul>
<li><strong>情境 8：多分類查詢</strong></li>
</ul>
<blockquote>
<p>客人：「客廳的家具有哪些？我要看沙發、櫃子跟桌子」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找出沙發、櫃子和桌子這三種分類的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, category</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="keyword">IN</span> (<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;櫃子&#x27;</span>, <span class="string">&#x27;桌子&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 9：特定商品</strong></li>
</ul>
<blockquote>
<p>客人：「電腦辦公椅和餐椅四入組的價格是多少？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找出這兩款椅子的價格</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="string">&#x27;電腦辦公椅&#x27;</span>, <span class="string">&#x27;餐椅四入組&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="BETWEEN-集合與範圍運算符應用"><a href="#BETWEEN-集合與範圍運算符應用" class="headerlink" title="BETWEEN 集合與範圍運算符應用"></a>BETWEEN 集合與範圍運算符應用</h3><p><code>BETWEEN</code>也是一種集合與範圍運算符，用於檢索位於特定範圍內的資料，必須指定上下界兩個條件值。</p>
<ul>
<li><strong>情境 10：價格區間</strong></li>
</ul>
<blockquote>
<p>客人：「想找 10000 到 20000 之間的商品有哪些？」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：列出這個價格區間的所有商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> discount_price <span class="keyword">BETWEEN</span> <span class="number">10000</span> <span class="keyword">AND</span> <span class="number">20000</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 11：庫存區間</strong></li>
</ul>
<blockquote>
<p>主管：「請列出庫存在 5 到 15 之間的商品」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：列出庫存數量在這個範圍的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, stock</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> stock <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<h3 id="NOT-IN-集合與範圍運算符應用"><a href="#NOT-IN-集合與範圍運算符應用" class="headerlink" title="NOT IN 集合與範圍運算符應用"></a>NOT IN 集合與範圍運算符應用</h3><p><code>NOT IN</code>則是與<code>In</code>相反的意思，也就是不包含多個特定類別或值時，可以使用 <code>NOT IN</code>來簡化語法。</p>
<ul>
<li><strong>情境 12：排除商品</strong></li>
</ul>
<blockquote>
<p>主管：「列出除了沙發和床架以外的商品」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要找出不是沙發和床架的商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, category</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;沙發&#x27;</span>, <span class="string">&#x27;床架&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更新-Update-資料表內資料"><a href="#更新-Update-資料表內資料" class="headerlink" title="更新(Update)資料表內資料"></a>更新(Update)資料表內資料</h3><ul>
<li><strong>情境 13：調整價格</strong></li>
</ul>
<blockquote>
<p>主管：「北歐風雙人沙發要調降 2000 元」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要如何更新這張沙發的價格</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">-</span> <span class="number">2000</span> <span class="comment">--- 如果今天更新欄位有多個，用逗號隔開</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;北歐風雙人沙發&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>情境 14：更新庫存</strong></li>
</ul>
<blockquote>
<p>主管：「電腦辦公椅進了 5 張」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要如何增加這款椅子的庫存數量</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">+</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;電腦辦公椅&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="刪除-Delete-資料表內資料"><a href="#刪除-Delete-資料表內資料" class="headerlink" title="刪除(Delete)資料表內資料"></a>刪除(Delete)資料表內資料</h3><ul>
<li><strong>情境 15：清除資料</strong></li>
</ul>
<blockquote>
<p>主管：「要清掉兒童床架和電競書桌的資料」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：要如何刪除這兩項商品</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="string">&#x27;兒童床架&#x27;</span>, <span class="string">&#x27;電競書桌&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="AS-別名-加碼題"><a href="#AS-別名-加碼題" class="headerlink" title="AS 別名(加碼題)"></a>AS 別名(加碼題)</h3><blockquote>
<p>主管：「我想知道椅子商品價格折扣多少錢」<br>小美翻譯蒟蒻ヾ(●´∀｀●)：請標示折扣價跟價格的差別</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, discount_price, price <span class="operator">-</span> discount_price <span class="keyword">as</span> discount_amount</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;椅子&#x27;</span></span><br></pre></td></tr></table></figure>

<p>耶～小美可以下班了，感謝大家也感謝學長 (((o(<em>ﾟ▽ﾟ</em>)o)))</p>
<h2 id="回顧今天的學習內容"><a href="#回顧今天的學習內容" class="headerlink" title="回顧今天的學習內容"></a>回顧今天的學習內容</h2><p>今天主要帶大家初步認識了有關於<code>PostgreSQL</code>的<code>DML</code>相關語法，理解上還算是好理解，但是有時候就是會熊熊忘記ＱＱ 所以還是建議時不時要複習一下手感，回想起這些<del>美好</del>痛苦的程式回憶 ฅ^._.^ฅ 。</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>六角學院</tag>
        <tag>DDL</tag>
        <tag>DML</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>關聯式資料庫設計必備 - dbdiagram.io ERD 繪圖工具</title>
    <url>/Blog/dbdiagram-tool/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730813913/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/ER_%E9%97%9C%E8%81%AF%E5%9C%96_rq9q9g.png" alt="文章封面圖"></p>
<h2 id="什麼是-Entity-relationship-diagram-ERD-？"><a href="#什麼是-Entity-relationship-diagram-ERD-？" class="headerlink" title="什麼是 Entity-relationship diagram(ERD)？"></a>什麼是 Entity-relationship diagram(ERD)？</h2><p>ERD 是一種用來表示資料表之間關係的圖表，能夠描述一對一、一對多、多對一等關聯。透過 ERD，可以快速瞭解每張資料表的欄位定義及屬性，方便進行資料庫設計與管理。</p>
<p>【資料表基礎資訊】</p>
<ul>
<li>資料表介紹：用戶資料表、訂單元數據資料表、產品資料表、訂單明細資料表</li>
<li>用戶資料表與訂單資料表之間的關係：一個用戶可以有多筆訂單，而每張訂單僅屬於一位用戶。</li>
<li>訂單元數據資料表與訂單明細資料表之間的關係：一張訂單可以包含多個訂單明細項目，而每個訂單明細項目僅屬於一張訂單。</li>
<li>訂單明細資料表與產品資料表之間的關係：多個訂單明細可以引用同一個產品（例如，不同訂單中的相同產品）</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730814878/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/Blog-use_jgfng3.png" alt="用戶購買訂單實體關聯圖"></p>
<h2 id="dbdiagram-io-基本介紹"><a href="#dbdiagram-io-基本介紹" class="headerlink" title="dbdiagram.io - 基本介紹"></a>dbdiagram.io - 基本介紹</h2><p>dbdiagram.io 是一個可以快速建置實體關聯圖的線上工具，能夠幫助您快速建立實體關聯圖(ERD)。它使用 Database Markup Language(DBML)語法來定義資料表結構和關聯，使用者可以直觀地設計資料表並即時調整它們之間的關係，讓修改立即反映在圖表中。</p>
<blockquote>
<p>Database Markup Language(DBML)語法本身是一種 open-source DSL language</p>
</blockquote>
<h3 id="dbdiagram-io-優點"><a href="#dbdiagram-io-優點" class="headerlink" title="dbdiagram.io 優點"></a>dbdiagram.io 優點</h3><ul>
<li><strong>減少撰寫 SQL 時間</strong>：dbdiagram.io 支援將寫好的 DBML 語法轉換成對應的 <code>Relational Database Management System（RDBMS）</code> SQL DDL 語法，例如：PostgreSQL、MySQL、SQL Server、Oracle SQL 等。</li>
<li><strong>團隊 ERD 即時共享</strong>：透過<code>share</code>功能即時分享現有 ER 圖表及相關 DBML 欄位定義及註解說明。</li>
<li><strong>dbdocs 線上文件分享</strong>：<code>dbdocs</code> 是一款能透過 dbdiagram.io 中 DBML 一鍵生成的線上文件工具，能讓使用者快速查看每張資料表的定義、定義及說明。其最大的優勢在於可以瀏覽單一資料表跟其他資料表的關係，避免因為複雜的資料表關係而無法有效查看到重點資訊。</li>
<li><strong>圖檔靜態文件匯出</strong>：可以選擇將單一資料表與其他資料表之間的 ERD 匯出或所有資料表的 ERD 匯出成<code>PDF</code>或<code>PNG</code>。</li>
</ul>
<h3 id="專案定義-Project-Definition"><a href="#專案定義-Project-Definition" class="headerlink" title="專案定義(Project Definition)"></a>專案定義(Project Definition)</h3><p>單行註解寫法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Project 用戶購物紀錄專案 &#123;</span><br><span class="line">  database_type: &#x27;PostgreSQL&#x27;</span><br><span class="line">  Note: &#x27;紀錄用戶購買項目大綱及明細&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note 支援 md 語法</p>
</blockquote>
<p>多行註解寫法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Project 用戶購物紀錄專案 &#123;</span><br><span class="line">  database_type: &#x27;PostgreSQL&#x27;</span><br><span class="line">  Note: &#x27;&#x27;&#x27;</span><br><span class="line">  # 紀錄用戶購買項目大綱及明細</span><br><span class="line">  - users：用戶資料表</span><br><span class="line">  - orders：訂單資料表</span><br><span class="line">  - products：產品資料表</span><br><span class="line">  - order_items：產品明細資料表</span><br><span class="line">  &#x27;&#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【 dbdocs 對應顯示區塊 - 專案註解 】</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730909637/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/ERD_%E5%B0%88%E6%A1%88%E5%AE%9A%E7%BE%A9_z8tnk6.png" alt="專案定義 - dbdocs 顯示"></p>
<h3 id="表單定義-Table-Definition"><a href="#表單定義-Table-Definition" class="headerlink" title="表單定義(Table Definition)"></a>表單定義(Table Definition)</h3><p>預設寫法(使用<code>public schema</code>)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table table_name &#123;</span><br><span class="line">  column_name column_type [column_settings]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定 schema 名稱 DBML 寫法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table schema_name.table_name &#123;</span><br><span class="line">  column_name column_type [column_settings]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【 dbdocs 使用預設與未使用指定名稱 schema 差別 】</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730988453/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/%E6%8C%87%E5%AE%9A_schema_%E8%88%87%E6%9C%AA%E6%8C%87%E5%AE%9A_schema_%E5%B7%AE%E5%88%A5_grcnil.png" alt="dbdocs 使用預設與未使用指定名稱 schema 差別"></p>
<blockquote>
<p>指定 schema 名稱優點：</p>
<ul>
<li><strong>用途分類</strong>：可以根據不同的用途或功能將資料庫物件分隔到不同的 schema 中，使資料庫結構更清晰、易於管理。</li>
<li><strong>避免名稱衝突</strong>：不同的 schema 可以包含名稱相同的資料表，從而避免因名稱重複而產生的衝突。</li>
<li><strong>權限管理</strong>：能針對不同的 schema 設定專屬的存取權限</li>
</ul>
</blockquote>
<h4 id="表單別名-Alias"><a href="#表單別名-Alias" class="headerlink" title="表單別名(Alias)"></a>表單別名(Alias)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table very_long_user_table as U &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Ref: U.id &lt; posts.user_id</p>
<blockquote>
<p>使用別名可以用於建立外來鍵關係時使用，特別是表單名稱比較長的時候 (&#x3D;´ω&#96;&#x3D;)。</p>
</blockquote>
<h4 id="表單註解-Note"><a href="#表單註解-Note" class="headerlink" title="表單註解(Note)"></a>表單註解(Note)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table users &#123;</span><br><span class="line">  id integer</span><br><span class="line">  status varchar [note: &#x27;status&#x27;]</span><br><span class="line"></span><br><span class="line">  Note: &#x27;Stores user data&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【 dbdocs 對應顯示區塊 - 表單註解 】</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730984607/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/%E5%81%B4%E9%82%8A%E6%AC%84%E9%A1%AF%E7%A4%BA%E8%A8%BB%E8%A7%A3%E6%95%88%E6%9E%9C_pr0sre.jpg" alt="dbdocs 顯示效果"></p>
<blockquote>
<p>Note 的規則均分成<code>單行註解</code>跟<code>多行註解</code>的方式</p>
</blockquote>
<h3 id="欄位定義-Column-Definition"><a href="#欄位定義-Column-Definition" class="headerlink" title="欄位定義(Column Definition)"></a>欄位定義(Column Definition)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table buildings &#123;</span><br><span class="line">  id integer [ pk, unique, default: 123, note: &#x27;Number&#x27; ]</span><br><span class="line">  address varchar(255) [unique, not null, note: &#x27;to include unit number&#x27;]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>欄位定義的格式：column_name column_type [column_settings]</p>
<ul>
<li><strong>column_name</strong>：欄位名稱</li>
<li><strong>column_type</strong>：支援各種資料型別</li>
<li><strong>column_settings</strong>:設定欄位屬性<ul>
<li>primary key or pk：主鍵</li>
<li>null or not null：不得為空</li>
<li>unique：唯一值的特性</li>
<li>default：預設值(數字、字串、布林或表達式)<blockquote>
<p>表達式範例：<code>now() - interval &#39;5 days&#39;</code>(當前時間往前推五天)</p>
</blockquote>
</li>
<li>increment：自動遞增</li>
</ul>
</li>
</ul>
<p>【 dbdocs 對應顯示區塊 - 欄位定義 】</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730991377/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88%E5%BF%85%E5%82%99%20-%20dbdiagram.io%20ERD%20%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/%E6%AC%84%E4%BD%8D%E5%AE%9A%E7%BE%A9%E6%96%B9%E5%BC%8F_iw7zx5.jpg" alt="dbdocs 對應顯示區塊 - 欄位定義"></p>
<h3 id="索引定義-Index-Definition"><a href="#索引定義-Index-Definition" class="headerlink" title="索引定義(Index Definition)"></a>索引定義(Index Definition)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table bookings &#123;</span><br><span class="line">  id integer</span><br><span class="line">  country varchar</span><br><span class="line">  booking_date date</span><br><span class="line">  created_at timestamp</span><br><span class="line"></span><br><span class="line">  indexes &#123;</span><br><span class="line">    // 單欄索引</span><br><span class="line">    created_at [name: &#x27;created_at_index&#x27;, note: &#x27;Date&#x27;] // 單一欄位索引，用於針對 created_at 的查詢加速</span><br><span class="line"></span><br><span class="line">    // 複合索引</span><br><span class="line">    (country, booking_date) [unique, name: &#x27;country_booking_idx&#x27;] // 唯一複合索引，用於加速 country 和 booking_date 的查詢</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>索引格式：將欄位設置為索引時的格式為 [index-name、index-setting、note]</p>
<blockquote>
<p><strong>index-setting</strong> 可以設定<code>unique</code>及<code>pk</code>屬性。</p>
</blockquote>
<p>【 index 搭配屬性組合使用方式】</p>
<ul>
<li>複合主鍵：(country, booking_date) [pk]</li>
<li>複合唯一索引：(country, booking_date) [unique]</li>
</ul>
<p>索引主要的原理在於寫入的時候，根據索引的欄位另外拉一張表儲存索引的欄位值。檢索的時候，可以根據儲存的索引進行掃描，加速檢索資料的時間。但同時也會增加寫入及更新的時間，因此在設置上需要根據實際檢索情境進行設計，以達到性能平衡。</p>
<p>索引大致上可以分成單欄索引及多欄索引(composite index)：</p>
<ul>
<li>單欄索引：用於提升單個欄位的查詢性能，例如：created_at 欄位過濾或排序的操作。</li>
<li>多欄索引：用於優化涉及多個欄位的查詢。例如：在查詢中常用<code>WHERE country = &#39;USA&#39; AND booking_date = &#39;2024-11-07&#39;</code>。</li>
</ul>
<h3 id="Foreign-Key-Definitions-外來鍵定義"><a href="#Foreign-Key-Definitions-外來鍵定義" class="headerlink" title="Foreign Key Definitions(外來鍵定義)"></a>Foreign Key Definitions(外來鍵定義)</h3><p>外來鍵用於表示當前資料表與另一張資料表主鍵的關聯，建立兩者之間約束關係。用於確保兩張資料表的資料具有一致性，且參照的欄位值確實存在，從而維護資料的正確性。撰寫方式可以主要分成<code>Long form</code>、<code>Short form</code>兩種寫法，且可以設定<code>Relationship settings</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Long form</span><br><span class="line">Ref name_optional &#123;</span><br><span class="line">  schema1.table1.column1 &lt; schema2.table2.column2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Short form:</span><br><span class="line">Ref name_optional: schema1.table1.column1 &lt; schema2.table2.column2</span><br></pre></td></tr></table></figure>

<p><strong>外來鍵關係</strong>：</p>
<ul>
<li>一對多：users.id &lt; posts.user_id</li>
<li>多對一：posts.user_id &gt; users.id</li>
<li>一對一：users.id &lt; posts.user_id</li>
</ul>
<h4 id="外來鍵變更處理機制"><a href="#外來鍵變更處理機制" class="headerlink" title="外來鍵變更處理機制"></a>外來鍵變更處理機制</h4><p>在實際使用情境中，當涉及外鍵關聯的父表發生變更(如刪除或更新)時，可以根據不同的操作行為來決定依賴該外鍵的子表應如何處理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ref: products.merchant_id &gt; merchants.id [delete: cascade, update: no action]</span><br></pre></td></tr></table></figure>

<p><strong>referential actions</strong>：</p>
<ul>
<li>cascade：當對應的父表記錄被刪除或更新時，自動刪除或更新所有引用該記錄的子表記錄。</li>
<li>restrict：不允許刪除或更新有引用的父表記錄。如果子表中存在對應的記錄，則拒絕此操作。(立即檢查)</li>
<li>set null：當對應的父表記錄被刪除或更新時，將子表中引用的外鍵設置為 NULL。</li>
<li>set default：當對應的父表記錄被刪除或更新時，將子表中引用的外鍵設置為預設值。</li>
<li>no action：不執行任何操作。如果子表中有引用，則拒絕刪除或更新父表記錄。(延遲檢查)</li>
</ul>
<blockquote>
<p>Mysql 中 no action &#x2F; restrict 效用相似</p>
</blockquote>
<h3 id="Enum-Definition"><a href="#Enum-Definition" class="headerlink" title="Enum Definition"></a>Enum Definition</h3><p>允許定義一組可選值的選項，確保使用者存入符合定義的選項值。</p>
<p>【 定義 - 預設使用 public schema 】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum grade &#123;</span><br><span class="line">  &quot;A+&quot;</span><br><span class="line">  &quot;A&quot;</span><br><span class="line">  &quot;A-&quot;</span><br><span class="line">  &quot;Not Yet Set&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【 表單欄位使用 - 預設使用 public schema 】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table students &#123;</span><br><span class="line">  id integer [pk, unique, note: &quot;Student ID&quot;]</span><br><span class="line">  name varchar(100) [not null, note: &quot;Student name&quot;]</span><br><span class="line">  grade grade [note: &quot;Student grade&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>如果有使用<code>schema</code>的情況下，<code>定義</code>跟<code>使用</code>要加上<code>schema</code>名稱前綴。</p>
<p>【 定義 - 使用 schema1 name 】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum schema1.grade &#123;</span><br><span class="line">  &quot;A+&quot;</span><br><span class="line">  &quot;A&quot;</span><br><span class="line">  &quot;A-&quot;</span><br><span class="line">  &quot;Not Yet Set&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【 表單欄位使用 - schema1 name 】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Table students &#123;</span><br><span class="line">  id integer [pk, unique, note: &quot;Student ID&quot;]</span><br><span class="line">  name varchar(100) [not null, note: &quot;Student name&quot;]</span><br><span class="line">  grade schema1.grade [note: &quot;Student grade&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回顧今天的學習內容"><a href="#回顧今天的學習內容" class="headerlink" title="回顧今天的學習內容"></a>回顧今天的學習內容</h2><p>透過<code>dbdiagram.io</code>這個工具，我們可以更有效率地進行資料庫設計工作。它不僅提供了直覺的介面來繪製<code>ERD</code>圖表，更重要的是能夠通過<code>DBML</code>語法定義資料表之間的關係。對於團隊協作來說，能夠即時共享<code>ERD</code>設計和產生清晰的文件是非常實用的功能。</p>
]]></content>
      <categories>
        <category>ERD</category>
      </categories>
      <tags>
        <tag>Online tool</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(10)：var、let、const之間的差異解析</title>
    <url>/Blog/JS-10/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg" alt="Blog背景圖"></p>
<h2 id="作用域-Scope-的差別"><a href="#作用域-Scope-的差別" class="headerlink" title="作用域(Scope)的差別"></a>作用域(Scope)的差別</h2><p>作用域（Scope）是指在程式碼中變數和函式的可訪問範圍</p>
<h3 id="var-函數作用域-function-scope"><a href="#var-函數作用域-function-scope" class="headerlink" title="var 函數作用域(function scope)"></a>var 函數作用域(function scope)</h3><ul>
<li>變數在函數中的任何地方都是可讀取的。</li>
<li><strong>如果在函數之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>
</ul>
<hr>
<ul>
<li>變數作用域說明<ul>
<li>第一個 var a &#x3D; 20(作用域：1-3行)</li>
<li>第二個 var a &#x3D; 30(作用域：4-6行)</li>
</ul>
</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/var%E4%BD%9C%E7%94%A8%E5%9F%9F_oui5yp.png" alt="var作用域"></p>
<ul>
<li>範例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">ReferenceError</span>: a is not defined</span><br></pre></td></tr></table></figure>

<h4 id="全域變數擁有全域作用域-Global-Scope"><a href="#全域變數擁有全域作用域-Global-Scope" class="headerlink" title="全域變數擁有全域作用域(Global Scope)"></a>全域變數擁有全域作用域(Global Scope)</h4><ul>
<li>var變數在函式（Function）外宣告時，該變數會自動成為全域物件屬性。</li>
<li>let宣告的變數不會成為全域物件屬性。其作用域僅限於宣告它的區塊（block scope）或函式內部。</li>
</ul>
<p>範例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var a = 10</span><br><span class="line">        let b = 20</span><br><span class="line">        console.log(window)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>將全域物件window印出，可以看到剛剛設定的a已經變成window的一種屬性</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_bbtlce.png" alt="Window全局屬性"></p>
<hr>
<p>若跳過宣告的流程，宣告的變數也會變成全域物件屬性</p>
<p>範例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function test()&#123;</span><br><span class="line">            a = 100</span><br><span class="line">        &#125;</span><br><span class="line">        test()</span><br><span class="line">        console.log(window)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>跳過宣告的情形下，變成Window全局屬性</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_%E8%B7%B3%E9%81%8E%E5%AE%A3%E5%91%8A%E7%9A%84%E6%83%85%E5%BD%A2_ievtuq.png" alt="Window全局屬性(跳過宣告的情形)"></p>
<h3 id="let-const-塊級作用域-block-scope"><a href="#let-const-塊級作用域-block-scope" class="headerlink" title="let&#x2F;const 塊級作用域(block scope)"></a>let&#x2F;const 塊級作用域(block scope)</h3><ul>
<li>變數在聲明的**區塊{}**（例如，if 語句、迴圈）內可讀取的</li>
<li><strong>如果在區塊之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>
</ul>
<hr>
<p>最簡單的定義方式就是單純{}</p>
<p>範例如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            const a = 100</span><br><span class="line">            console.log(a)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AF%84%E4%BE%8B%E5%8D%B0%E5%87%BA_zygsin.png" alt="塊級作用域範例印出"></p>
<hr>
<p>搭配以下範例說明let&#x2F;const 變數作用域</p>
<ul>
<li>const Title &#x3D; “數字太大了”(作用域：2-5行)</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png" alt="塊級作用域(IF範例作用域)"></p>
<ul>
<li>範例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params">Value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Value</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Title</span> = <span class="string">&quot;數字太大了&quot;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;if區域&quot;</span>, <span class="title class_">Title</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是funcA的最下面&quot;</span>, <span class="title class_">Title</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">funcA</span>(<span class="number">120</span>)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>區域 數字太大了</span><br><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">ReferenceError</span>: <span class="title class_">Title</span> is not defined</span><br></pre></td></tr></table></figure>

<ul>
<li>Title作用域在if的括號之內(紅色框框)，因此 if 外層的console.log(“我是funcA的最下面”, Title)無法正確讀取到Title變數，出現ReferenceError錯誤</li>
</ul>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png" alt="塊級作用域(解釋外層讀取內層變數錯誤方式)"></p>
<h3 id="const-let-差異"><a href="#const-let-差異" class="headerlink" title="const &amp; let 差異"></a>const &amp; let 差異</h3><h4 id="let與const重新賦值差別"><a href="#let與const重新賦值差別" class="headerlink" title="let與const重新賦值差別"></a>let與const重新賦值差別</h4><ul>
<li><strong>let可以重新賦值</strong>，案例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; <span class="comment">// 宣告一個let變數</span></span><br><span class="line">x = <span class="number">20</span> <span class="comment">// 合法</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>const不可以重新賦值</strong>，案例如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">10</span> <span class="comment">// 宣告一個const變數</span></span><br><span class="line">x = <span class="number">20</span> <span class="comment">// 不合法</span></span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TypeError</span>: <span class="title class_">Assignment</span> to constant variable.</span><br></pre></td></tr></table></figure>

<h4 id="const可針對物件型別內容物修改"><a href="#const可針對物件型別內容物修改" class="headerlink" title="const可針對物件型別內容物修改"></a>const可針對物件型別內容物修改</h4><ul>
<li><strong>const宣告的變數，無法更改原始型別，但可以修改物件型別的屬性</strong></li>
</ul>
<p>範例如下(物件型別屬性修改)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&quot;Antonio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;Antonio&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="const常數變數宣告就必須賦值"><a href="#const常數變數宣告就必須賦值" class="headerlink" title="const常數變數宣告就必須賦值"></a>const常數變數宣告就必須賦值</h4><p>範例如下(無賦值發生錯誤)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SyntaxError</span>: <span class="title class_">Missing</span> initializer <span class="keyword">in</span> <span class="keyword">const</span> declaration</span><br></pre></td></tr></table></figure>

<h3 id="作用鍊-Scope-chain"><a href="#作用鍊-Scope-chain" class="headerlink" title="作用鍊(Scope chain)"></a>作用鍊(Scope chain)</h3><p>當使用變數時，依序從當前作用域開始，一層一層往外尋找是否有符合其作用域的變數。這個搜尋的過程形成了作用鍊</p>
<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E4%BD%9C%E7%94%A8%E9%8D%8A_Scope_chain_dfunur.png" alt="作用鍊(Scope chain)"></p>
<hr>
<p>試著將上圖的程式碼改成console.log(a + b + c + d)顯示如下</p>
<ul>
<li>因為已經到最外層還是找不到宣告變數d的地方，因此出現ReferenceError錯誤</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">ReferenceError</span>: d is not defined</span><br></pre></td></tr></table></figure>

<h2 id="for迴圈的使用差異"><a href="#for迴圈的使用差異" class="headerlink" title="for迴圈的使用差異"></a>for迴圈的使用差異</h2><ul>
<li>情境：使用setTimeout定時器，模擬異步事件。查看透過var及let變數在迴圈中的變化</li>
</ul>
<hr>
<h3 id="var定義的index，會彼此共用影響"><a href="#var定義的index，會彼此共用影響" class="headerlink" title="var定義的index，會彼此共用影響"></a>var定義的index，會彼此共用影響</h3><ul>
<li>var結束的時候，index &#x3D; 10(全部的index都會被影響)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;var index&quot;</span>, index)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顯示如下<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_var%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_z2fzw4.png" alt="for迴圈(var迴圈案例)"></p>
<h3 id="let是重新宣告出來，彼此互不影響-只在單一區塊作用"><a href="#let是重新宣告出來，彼此互不影響-只在單一區塊作用" class="headerlink" title="let是重新宣告出來，彼此互不影響(只在單一區塊作用)"></a>let是重新宣告出來，彼此互不影響(只在單一區塊作用)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;let index&quot;</span>, index)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顯示如下<br><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_let%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_vqxnqk.png" alt="for迴圈(let迴圈案例)"></p>
<h2 id="提升-Hoisting-的差別"><a href="#提升-Hoisting-的差別" class="headerlink" title="提升(Hoisting)的差別"></a>提升(Hoisting)的差別</h2><p>JavaScript編譯階段將變數和函式的宣告存入記憶體的概念，使函式和變量的宣告看起來好像被提升到作用域的頂部(實際程式碼的順序不變)，但賦值的動作並沒有提升</p>
<h3 id="var變數宣告時會自動存入記憶體並初始化定義undefined"><a href="#var變數宣告時會自動存入記憶體並初始化定義undefined" class="headerlink" title="var變數宣告時會自動存入記憶體並初始化定義undefined"></a>var變數宣告時會自動存入記憶體並初始化定義undefined</h3><p>範例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>實際上瀏覽器看到的是類似以下的順序(並不會真的改變程式碼順序)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">x = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>執行順序上，var變數會優先提升至作用域的頂部並初始化定義為undefined</strong></li>
</ul>
<h3 id="const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ"><a href="#const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ" class="headerlink" title="const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)"></a>const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)</h3><p>範例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReferenceError</span>: <span class="title class_">Cannot</span> access <span class="string">&#x27;x&#x27;</span> before initialization</span><br></pre></td></tr></table></figure>

<hr>
<p>透過不同方式更確定let的區塊性提升</p>
<p>範例如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>因為let的a變數提升，導致console的結果並未顯示10</li>
</ul>
<p>顯示如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReferenceError: Cannot access &#x27;a&#x27; before initialization</span><br></pre></td></tr></table></figure>

<h2 id="重複宣告"><a href="#重複宣告" class="headerlink" title="重複宣告"></a>重複宣告</h2><h3 id="var變數可以重複宣告"><a href="#var變數可以重複宣告" class="headerlink" title="var變數可以重複宣告"></a>var變數可以重複宣告</h3><p>範例如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同樣變數的宣告會被替代，因此最後印出來的是最後一個20</li>
</ul>
<h3 id="let變數不可以重複宣告"><a href="#let變數不可以重複宣告" class="headerlink" title="let變數不可以重複宣告"></a>let變數不可以重複宣告</h3><p>範例如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>

<p>顯示如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SyntaxError</span>: <span class="title class_">Identifier</span> <span class="string">&#x27;a&#x27;</span> has already been declared</span><br></pre></td></tr></table></figure>

<ul>
<li>同一區塊內不可以宣告同樣的變數</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>var</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS flex 軸線對齊技巧 - 預設屬性</title>
    <url>/Blog/CSS-Flex-1/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1729776553/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/Flex_%E8%BB%B8%E7%B7%9A%E5%B0%8D%E5%85%B6%E7%9A%84%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7_f9jvut.png" alt="flex 軸線對齊的排版工具"></p>
<h2 id="Flex-排版特性與區塊元素的差別"><a href="#Flex-排版特性與區塊元素的差別" class="headerlink" title="Flex 排版特性與區塊元素的差別"></a>Flex 排版特性與區塊元素的差別</h2><p>一般如果使用三個區塊元素進行排版，區塊元素會自動填滿整個空間。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<iframe src="https://codepen.io/gwhvusel-the-builder/embed/jOgaGOb?default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<p>當我們將<code>continaer</code> class 設定<code>flex</code>佈局方式，每一個<code>flex-item</code>都會變成<code>flex 子元素</code>。</p>
<blockquote>
<p>請注意 flex 排版特性只影響 flex 容器及容器內的第一層子物件而已。</p>
</blockquote>
<p>flex 容器有以下預設屬性：</p>
<ul>
<li>flex 容器預設會填滿父容器的寬度</li>
<li>flex-direction: row（預設主軸的定義是水平的，由左至右）</li>
<li>flex-wrap: nowrap（預設子元素在 Flex 容器裡面是不換行的，子元素會在單一行中排列）</li>
</ul>
<p>當 flex 容器內的第一層元素被轉換成<code>flex 子元素</code>時，flex 子元素有以下預設屬性：</p>
<ul>
<li>justify-content：flex-start（預設 flex 子元素沿著主軸起始點排序）</li>
<li>align-items: stretch（預設交叉軸會將子元素延伸以填滿 flex 容器的高度）</li>
<li>flex-basis: auto（預設子元素的大小由內容、<code>width</code> 或 <code>height</code> 設定來決定）</li>
<li>flex-grow: 0（預設不會有所謂<code>擴展效果</code>。此屬性主要是分配<code>剩餘空間</code>的比例，負值無效）</li>
<li>flex-shrink: 1（預設會有<code>收縮效果</code>，此屬性主要是分配<code>超出空間</code>的比例，負值無效）</li>
</ul>
<h2 id="flex-情境解析-理解預設屬性在-flex-排版中的實際作用"><a href="#flex-情境解析-理解預設屬性在-flex-排版中的實際作用" class="headerlink" title="flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用"></a>flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用</h2><p>這邊直接透過兩種情境快速理解這些特性：</p>
<h3 id="當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間"><a href="#當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間" class="headerlink" title="當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)"></a>當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)</h3><p><img src="https://res.cloudinary.com/dseg0uwc9/image/upload/v1730212126/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/%E7%95%B6_flex_%E5%AD%90%E5%85%83%E7%B4%A0%E7%B8%BD%E5%AF%AC%E5%BA%A6%E5%B0%8F%E6%96%BC_flex_%E5%AE%B9%E5%99%A8%E9%A0%90%E8%A8%AD%E6%8E%92%E7%89%88_dorybi.png" alt=" 1. 當 flex 子元素總寬度小於 flex 容器預設排版 "></p>
<iframe src="https://codepen.io/gwhvusel-the-builder/embed/bGXYoJB?default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<p>按照前面所提到的特性去理解(千萬不要死背，會出大事)：</p>
<p>【 觀察<code>主軸</code>的方向 - flex <code>容器</code>預設屬性 】</p>
<ul>
<li>flex-direction: row</li>
</ul>
<blockquote>
<p>確認當前畫面主軸的方向，就可以確認交叉軸的方向。flex 元素會按照主軸的方向排列，當前畫面是由左至右，因此可以判斷當前主軸是由左至右的方向。但是<code>主軸並非永遠都是由左至右(非常重要)</code>，軸線的方向會因為 flex 主軸方向設定(flex-direction)、語系方向(HTML dir Attribute)、書寫模式(writing-mode)及內容呈現方向(direction)影響。</p>
</blockquote>
<p>【 觀察<code>主軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>
<ul>
<li>flex-basis: auto</li>
</ul>
<blockquote>
<p>預設 flex 子元素的寬度是由其內容撐開的，在未設定<code>width</code>及<code>height</code>的情況下。因此如果 flex 子元素未設置寬度且flex 子元素內無內容的情況下，flex 子元素會看不到喔！！！</p>
</blockquote>
<ul>
<li>justify-content：flex-start</li>
</ul>
<blockquote>
<p>預設 flex 子元素<code>主軸</code>對齊的方向是在主軸起始點。</p>
</blockquote>
<ul>
<li>flex-grow: 0</li>
</ul>
<blockquote>
<p>注意到上面的圖中一塊的<code>剩餘空間</code>，這部分是由<code>flex-grow</code>進行管理。只有在 flex 子元素總寬度小於 flex 容器的時候會產生<code>剩餘空間</code>。預設的情況下，這個剩餘空間是不會進行分配的，也就是<code>0</code>。</p>
</blockquote>
<p>【 觀察<code>交叉軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>
<ul>
<li>align-items: stretch</li>
</ul>
<blockquote>
<p>預設 flex 子元素<code>交叉軸</code>對齊的方向是會延展至容器的高度。</p>
</blockquote>
<p>上面還有很多預設屬性沒有說明到！是不是想偷懶 &gt; &lt; ，才不是，因為透過另一個情境搭配說明可以讓大家更能理解。</p>
<h3 id="當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間"><a href="#當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間" class="headerlink" title="當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)"></a>當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)</h3><iframe src="https://codepen.io/gwhvusel-the-builder/embed/poMLwGW?default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<ul>
<li>flex-wrap：nowrap(預設不會換行)</li>
</ul>
<blockquote>
<p>不管你在 flex 裡面放多少東西，他會試著把他<code>收縮</code>在同一行當中，不讓 flex 容器內的子容器換行。至於收縮這件事情，則是<code>flex-shrink</code>負責，因此若將<code>flex-shrink</code>設定為 0 (關閉)，flex 子容器總寬度大於 flex 容器寬度時，不會嘗試壓縮，就會看到 flex 子元素衝出去 flex 容器的限制。</p>
</blockquote>
<ul>
<li>flex-shrink: 1(預設 flex 容器會試著收縮容器內的子容器)</li>
</ul>
<blockquote>
<p>收縮的部分只會發生在<code>flex 子元素</code>總寬度大於<code>flex 容器</code>時。理解上也相對好理解，因為 flex 容器裝不下了，才會需要進行收縮，讓 flex 子元素能安全地待在 flex 容器裡，不要亂跑(不然前端工程師會哭給你看ＱＱ)</p>
</blockquote>
<p>這邊可能會想說，你怎麼知道他超出去了容器的寬度限制呢？</p>
<p>這邊試著關掉<code>flex-shrink</code>將其改變成<code>0</code>，不讓 flex 子元素收縮的情況下，會發現其超出容器的寬度。</p>
<iframe src="https://codepen.io/gwhvusel-the-builder/embed/jOgxEwY?default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<p>敲鐘下課囉～今天是睽違半年重新動筆，希望能找到自己撰寫風格 ❤️</p>
<h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ul>
<li>金魚都能懂的CSS 選取器(我是金魚粉，超級喜歡 Amos 老師，推薦大家都買一本來嗑)</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>flex 預設屬性</tag>
      </tags>
  </entry>
</search>
