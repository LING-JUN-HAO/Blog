{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/antonio.jpg","path":"images/antonio.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/background2.jpg","path":"images/background2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/icon100.png","path":"images/icon100.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/icon50.png","path":"images/icon50.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"07653b3bb41ab91b814c2e814a867750fe26858d","modified":1717165431000},{"_id":"source/_posts/2023-10-16-hexo-github-1.md","hash":"3373fc99ef9738803d377baaf4c5e504304da9c3","modified":1717165431000},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1717165431000},{"_id":"source/_posts/2023-10-17-hexo-github-2.md","hash":"611e2fb33b101f44e50e5833cd6436f073020113","modified":1717165431000},{"_id":"source/404/index.md","hash":"8cb21f230f64fd17b775bb6019c734389117ade9","modified":1717165431000},{"_id":"source/_posts/2023-10-31-Emmet-1.md","hash":"fd150404e7c9f5fa00c680217c3692e4ba4d8f59","modified":1717165431000},{"_id":"source/_posts/2023-10-20-hexo-github-4.md","hash":"f8725fd75bf10ca7a4a45cd0e8490889784ee950","modified":1717165431000},{"_id":"source/_posts/2023-10-18-hexo-github-3.md","hash":"b5f08aa858f1ac2dc6ca5d7c704b698ae714e27f","modified":1717165431000},{"_id":"source/_posts/2023-11-28-JS-1.md","hash":"5863112fa190debbdf7b91e35a92efd1caaab4ec","modified":1717165431000},{"_id":"source/_posts/2023-11-28-JS-2.md","hash":"009b966487f174124f72b69d39fd7ef175586253","modified":1717165431000},{"_id":"source/_posts/2023-11-29-JS-5.md","hash":"e635dabbbe8dd794c2a8fb0738ddfbdcd6a24ac8","modified":1717165431000},{"_id":"source/_posts/2023-11-29-JS-3.md","hash":"3758a9a7d1e2a39e6dded0fbddeb89926defcee9","modified":1717165431000},{"_id":"source/_posts/2023-11-29-JS-4.md","hash":"05f62170917fc47c677d4b84f3a5ae8862cac74b","modified":1717165431000},{"_id":"source/_posts/2023-11-29-React-2.md","hash":"f4609b59806621a018572262350efc00903e9c85","modified":1717165431000},{"_id":"source/_posts/2023-11-29-JS-6.md","hash":"8f1b758e503795c4e0fe72bae7f7d59977cc07b3","modified":1717165431000},{"_id":"source/_posts/2023-11-29-React-1.md","hash":"9d632392b3c09e3cfad9f33e020687975c64c7f4","modified":1717165431000},{"_id":"source/_posts/2023-11-30-JS-8.md","hash":"7cab736a958bcb91553d73a1bf522199eec7fbce","modified":1717165431000},{"_id":"source/_posts/2023-12-01-JS-9.md","hash":"bb5efb4408923495c1fe1a5275581f1b63dd4887","modified":1717165431000},{"_id":"source/_posts/2023-12-10-JS-10.md","hash":"cf0b3ae4cfefec972d4e5db75639bbc6e646a4e6","modified":1717165431000},{"_id":"source/tags/index.md","hash":"5b32691c4b85c8c025f609b6afe6c33449eeaa95","modified":1717165431000},{"_id":"source/about/index.md","hash":"e5a26fe7a3e18d91b39608bae7ac0f50525b9197","modified":1717165431000},{"_id":"source/categories/index.md","hash":"df224db8a02aa4dd1806824aa1ac06a79ac0ec2d","modified":1717165431000},{"_id":"source/_posts/2024-10-24-css-flex-1.md","hash":"45b1e8b5171813c5591024c57e52ecc3f55c83ed","modified":1730293840522},{"_id":"source/_posts/2024-05-31-hexschool-experience.md","hash":"8357fbca78c8a213f13ae3b9db39fc77e811a650","modified":1729519756494},{"_id":"source/_posts/image.png","hash":"b55d269d89693cda1d6decf208bd4639829c11a6","modified":1729779088377},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1729519264516},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1729519264517},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1729519264657},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1729519264691},{"_id":"themes/next/_config.yml","hash":"f8c19baefeee11e61e9af8ebb75787e58cad8f38","modified":1729519264662},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1729519264660},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1729519264658},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1729519264662},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1729519264663},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1729519264663},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1729519264657},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1729519264669},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1729519264663},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1729519264663},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1729519264664},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1729519264665},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1729519264664},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1729519264669},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1729519264669},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1729519264669},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1729519264669},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1729519264664},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1729519264670},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1729519264670},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1729519264670},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1729519264670},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1729519264664},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1729519264671},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1729519264671},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1729519264671},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1729519264672},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1729519264672},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1729519264672},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1729519264672},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1729519264672},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1729519264673},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1729519264671},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1729519264673},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1729519264673},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1729519264673},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1729519264689},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1729519264671},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1729519264699},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1729519264690},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1729519264690},{"_id":"themes/next/layout/_layout.swig","hash":"87a7669601fa6b88d6da196e2ad9934b887bf66e","modified":1729519264673},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1729519264691},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1729519264690},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1729519264665},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1729519264665},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1729519264666},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1729519264666},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1729519264667},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1729519264665},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1729519264667},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1729519264667},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1729519264690},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1729519264667},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1729519264668},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1729519264666},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1729519264668},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1729519264675},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1729519264679},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1729519264668},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1729519264676},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1729519264677},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1729519264679},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1729519264680},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1729519264674},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1729519264680},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1729519264681},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1729519264682},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1729519264674},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1729519264686},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1729519264692},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1729519264683},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1729519264685},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1729519264696},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1729519264696},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1729519264697},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1729519264698},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1729519264698},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1729519264697},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1729519264698},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1729519264698},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1729519264699},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1729519264686},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1729519264696},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1729519264674},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1729519264700},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1729519264700},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1729519264700},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1729519264700},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1729519264701},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1729519264701},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1729519264701},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1729519264701},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1729519264700},{"_id":"themes/next/source/_data/styles.styl","hash":"4c585f8b6298b7fdc2ce1750157c05d77b939a29","modified":1729519264702},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1729519264722},{"_id":"themes/next/layout/_macro/post.swig","hash":"90d36a5c28229ed383c8a6343b6f8aa2c0badac2","modified":1729519264674},{"_id":"themes/next/source/css/_colors.styl","hash":"5063a35eb2d550d17fe4be39128c692367447322","modified":1729519410419},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1729519264727},{"_id":"themes/next/source/images/antonio.jpg","hash":"395ae40b59ae93c55240c983061c20fe6c645987","modified":1729519264727},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1729519264747},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1729519264727},{"_id":"themes/next/source/css/main.styl","hash":"64dc1cf70072458d9e59c1f5f7cc1130349e5cf5","modified":1729519264727},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1729519264728},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1729519264749},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1729519264749},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1729519264750},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1729519264749},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1729519264750},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1729519264751},{"_id":"themes/next/source/images/icon50.png","hash":"f18a79ae08b4b6c96c451ca8c07ae8d17d31c3b1","modified":1729519264751},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1729519264750},{"_id":"themes/next/source/images/icon100.png","hash":"d2564066e1affa57a436799fe13015fd37748665","modified":1729519264751},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1729519264751},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1729519264752},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1729519264750},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1729519264752},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1729519264754},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1729519264753},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1729519264754},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1729519264752},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1729519264752},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1729519264675},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"dd78692674d89bc9e1d5ee287371a51040f109e0","modified":1729519264675},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1729519264677},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1729519264677},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1729519264677},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1729519264675},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1729519264678},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1729519264675},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1729519264676},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1729519264676},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1729519264676},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1729519264678},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1729519264678},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1729519264678},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1729519264678},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1729519264679},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1729519264677},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1729519264681},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1729519264681},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1729519264680},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1729519264681},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1729519264682},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1729519264682},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1729519264683},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1729519264686},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1729519264681},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1729519264686},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1729519264676},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1729519264684},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1729519264686},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1729519264687},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1729519264683},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1729519264687},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1729519264683},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1729519264687},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1729519264684},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1729519264684},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1729519264685},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1729519264685},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1729519264685},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1729519264688},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"0ceb9e6982ee86241d14a07650f87436098af96f","modified":1729519264684},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1729519264688},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1729519264688},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1729519264692},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1729519264692},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1729519264693},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1729519264692},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1729519264693},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1729519264694},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1729519264694},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1729519264688},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1729519264688},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1729519264689},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1729519264695},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1729519264694},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1729519264695},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1729519264695},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1729519264689},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1729519264726},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1729519264726},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1729519264757},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1729519264753},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1729519264726},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1729519264753},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1729519264726},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1729519264758},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1729519264704},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1729519264704},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1729519264718},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1729519264726},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1729519264718},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1729519264718},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1729519264710},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1729519264705},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1729519264719},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1729519264719},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1729519264720},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1729519264720},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1729519264714},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1729519264721},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1729519264722},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1729519264723},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1729519264722},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1729519264723},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1729519264723},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1729519264723},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1729519264724},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1729519264723},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1729519264724},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1729519264724},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1729519264724},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1729519264725},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1729519264725},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1729519264714},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1729519264724},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1729519264725},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1729519264725},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1729519264725},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1729519264724},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1729519264756},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1729519264705},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1729519264706},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1729519264706},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1729519264706},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1729519264707},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1729519264755},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1729519264707},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1729519264708},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1729519264707},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1729519264707},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1729519264708},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1729519264705},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1729519264709},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1729519264709},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1729519264708},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1729519264707},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1729519264710},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1729519264711},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1729519264709},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1729519264711},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1729519264711},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1729519264711},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1729519264718},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1729519264712},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1729519264719},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1729519264719},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1729519264709},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1729519264720},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1729519264719},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1729519264721},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1729519264721},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1729519264720},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1729519264712},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1729519264721},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1729519264713},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1729519264713},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1729519264721},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1729519264713},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1729519264721},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1729519264714},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1729519264713},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1729519264713},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1729519264713},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1729519264714},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1729519264716},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1729519264716},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1729519264717},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1729519264717},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1729519264717},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1729519264717},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1729519264717},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1729519264715},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1729519264717},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1729519264756},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1729519264757},{"_id":"themes/next/source/images/background.jpg","hash":"f826dd72b31b9a593df1cf8e711f366398c2f5cf","modified":1729519264730},{"_id":"themes/next/source/images/background2.jpg","hash":"2636499318497e590cca6a223cc61585b1007c10","modified":1729519264746},{"_id":"public/sitemap.xml","hash":"f084e9d71181d95d76f755cf70ad7659a0fee12d","modified":1730294288901},{"_id":"public/search.xml","hash":"f102d3b4d03cd13686dfe89077c274788e858efa","modified":1730294288901},{"_id":"public/404.html","hash":"890ade8eec830a2753ba76dbdce49d9845896601","modified":1730294288901},{"_id":"public/about/index.html","hash":"901fc0e4d70d8b9ecbc59a7459ddbbb4153ba1f8","modified":1730294288901},{"_id":"public/categories/index.html","hash":"dc3c9593356d2979a71e4ef8d40ffe6b54097b54","modified":1730294288901},{"_id":"public/css-flex-1/index.html","hash":"97e2a55b95401a533c42cbfb8dba8e63ad6e9043","modified":1730294288901},{"_id":"public/hexschool-experience/index.html","hash":"15912ef26cb819565c3598333d9e5cc7e51acc07","modified":1730294288901},{"_id":"public/JS-10/index.html","hash":"881763f10088890e0e59f8c218242fbdfe37d738","modified":1730294288901},{"_id":"public/JS-9/index.html","hash":"93eed70c9826a28f9b4fdb17e086a63df5876da9","modified":1730294288901},{"_id":"public/JS-8/index.html","hash":"58d4f4f3d17f05e7168b7f8d2fe669985250ac85","modified":1730294288901},{"_id":"public/React-2/index.html","hash":"8e7c8906a4991674d8787d6e7d90ddcf973fc070","modified":1730294288901},{"_id":"public/React-1/index.html","hash":"2106543576822353e1239739a8a2ab0d941cc37a","modified":1730294288901},{"_id":"public/JS-6/index.html","hash":"7eaa93800f7ef4a9ed2757e7bebd67f7891f42a8","modified":1730294288901},{"_id":"public/JS-5/index.html","hash":"a591892f95c005960cc7e017a7b1250fe6b5de68","modified":1730294288901},{"_id":"public/tags/index.html","hash":"20eab049861d3fd57c936f224f01537d900b8eac","modified":1730294288901},{"_id":"public/JS-4/index.html","hash":"a8840a11f57cd54ef832c8c7a4ac8fcf6ff8a97c","modified":1730294288901},{"_id":"public/JS-3/index.html","hash":"27a8d4b43d2b4aad1f740337c7787c66c7dc93f7","modified":1730294288901},{"_id":"public/JS-2/index.html","hash":"9ecd4f01fc467f02c7982f958edc5cd067e17374","modified":1730294288901},{"_id":"public/JS-1/index.html","hash":"46f03c37bd699374a2fe11c6ffb3e60eb3de83bd","modified":1730294288901},{"_id":"public/Emmet-1/index.html","hash":"2631cf3b7e035703c9e8e4683b1f00db7207c950","modified":1730294288901},{"_id":"public/hexo-github-4/index.html","hash":"21e93bb87bc6c9227d3bbb19b48ff10ab57e77b7","modified":1730294288901},{"_id":"public/hexo-github-3/index.html","hash":"9d39863f2d00a78917776f7ed0da402a5c1dbd5e","modified":1730294288901},{"_id":"public/hexo-github-2/index.html","hash":"285c20d7f44b9dcdf173289f4f279881022968e9","modified":1730294288901},{"_id":"public/hexo-github-1/index.html","hash":"37a95987c50f09c945457627f8c88a6000249919","modified":1730294288901},{"_id":"public/archives/index.html","hash":"ee76f673f60a4073e5cd28878fc317e9460184fd","modified":1730294288901},{"_id":"public/archives/page/2/index.html","hash":"64d99c1788eb1ce7bdf85f40283381e1a8e79027","modified":1730294288901},{"_id":"public/archives/2023/index.html","hash":"a9582ea27f26c89620dc0b0e416a7cf808e2b6b5","modified":1730294288901},{"_id":"public/archives/2023/page/2/index.html","hash":"41f8139c927b89a5c5b2e5e6a51c274d827ee433","modified":1730294288901},{"_id":"public/archives/2023/10/index.html","hash":"cf69463e39b1250f4c6ac60d1aefb93bdab9d003","modified":1730294288901},{"_id":"public/archives/2023/11/index.html","hash":"f081a4f9156aee5661914cdeb8806f91e1688cf3","modified":1730294288901},{"_id":"public/archives/2023/12/index.html","hash":"ec311cc85e6e72cbb60a91e1de4c55a8edb4f57b","modified":1730294288901},{"_id":"public/archives/2024/index.html","hash":"e4642c139804a351c67a223d67349311d608dacc","modified":1730294288901},{"_id":"public/archives/2024/05/index.html","hash":"fcee43d7ff42507f9dc940dc736d70b90e2d5f7e","modified":1730294288901},{"_id":"public/archives/2024/10/index.html","hash":"8b4796f35b8849cb9b81f6623aa2820fecdc3099","modified":1730294288901},{"_id":"public/categories/Blog/index.html","hash":"eb9c4c23813b5c16c3cf87bc3b39f7723786380d","modified":1730294288901},{"_id":"public/categories/Emmet/index.html","hash":"becd99aefceb6019eaec340d237f0dc4133899eb","modified":1730294288901},{"_id":"public/categories/React/index.html","hash":"e22d007946c196c5627970e90899ec6e0b34e85b","modified":1730294288901},{"_id":"public/categories/學習心得/index.html","hash":"caf7815531d47c8ec430293d46493fc637de704a","modified":1730294288901},{"_id":"public/categories/css/index.html","hash":"9e3287324bce44bb8ce4c2ec3d54cd41f962494a","modified":1730294288901},{"_id":"public/index.html","hash":"bee3dd247093b048ed2eb7ed7c86cc750dea0027","modified":1730294288901},{"_id":"public/tags/Web-Development-Tool/index.html","hash":"f37b7cba2308dcaa0ee2230557f61c19649e8773","modified":1730294288901},{"_id":"public/tags/Hexo/index.html","hash":"02bd987e2120fac85b77da7ca186a12fa8b3f8fa","modified":1730294288901},{"_id":"public/page/2/index.html","hash":"7622af608451b93d5b170930e585caacd64270db","modified":1730294288901},{"_id":"public/tags/ES6/index.html","hash":"45dfc13c3487f3830c78dfea739e6f42d42948a8","modified":1730294288901},{"_id":"public/tags/Arrow-Function/index.html","hash":"e849ceef0541297a8a4b4a12fec205ea962f3690","modified":1730294288901},{"_id":"public/categories/JavaScript/index.html","hash":"ce6966afd776f44ef4ba2fb74553982d7a6776e8","modified":1730294288901},{"_id":"public/tags/SoC/index.html","hash":"d20bfa1761f95fb99074adc07eec2b4670523d01","modified":1730294288901},{"_id":"public/tags/Pass-by-reference/index.html","hash":"d23650ef17477459c234c66b135667d7d2b397e8","modified":1730294288901},{"_id":"public/tags/shallow-copy/index.html","hash":"e694afaac9bedf18db2ad05c6d398d76035d0e74","modified":1730294288901},{"_id":"public/tags/deep-copy/index.html","hash":"73e7199552330d3bbe9bcf8f83c68a27af9ebd64","modified":1730294288901},{"_id":"public/tags/Pure-Function/index.html","hash":"fcb104e7e945fc089c3c242ed83fd4b4d605b7d1","modified":1730294288901},{"_id":"public/tags/Array-map/index.html","hash":"42bdb6cf5b3e79fec84d1fd0b1ad99aa8165f4f4","modified":1730294288901},{"_id":"public/tags/Array-findIndex/index.html","hash":"0f0268d1820c6245b7bbde69040f36d466d09c21","modified":1730294288901},{"_id":"public/tags/Array-forEach/index.html","hash":"13f0f16223b798c596f906c59b0050aaa8f477d1","modified":1730294288901},{"_id":"public/tags/Array-filter/index.html","hash":"2984a95dea95600af5200a33c85038e0049b517c","modified":1730294288901},{"_id":"public/tags/Array-reduce/index.html","hash":"cb0eed73fe0cbbd37e51cdfc72d983b585094769","modified":1730294288901},{"_id":"public/tags/Array-sort/index.html","hash":"359ce3e99eddbad4bc37e0ce0f0c87dbeb4ef237","modified":1730294288901},{"_id":"public/tags/var/index.html","hash":"97bfa58f72a849dc9e761518df20d7239e312d97","modified":1730294288901},{"_id":"public/tags/const/index.html","hash":"c322bc36c071a2fe088c9fbfb598c5a311df29fa","modified":1730294288901},{"_id":"public/tags/Promise/index.html","hash":"b4f44fdd398024ab7dbf949f1a9fed1435e74179","modified":1730294288901},{"_id":"public/tags/let/index.html","hash":"93fd145cce689191046d173f7645230162769842","modified":1730294288901},{"_id":"public/tags/六角學院/index.html","hash":"14dfc34fb306d8211c0f5c20fa21dc19e298b28e","modified":1730294288901},{"_id":"public/tags/軟體工程師體驗營/index.html","hash":"42006e3b479f1e5a232937fdffd3bb3e1c8e3246","modified":1730294288901},{"_id":"public/tags/ES-Module/index.html","hash":"ad7d0f144c4dcd1d29922ad0260925bb89fa1ed3","modified":1730294288901},{"_id":"public/tags/心得分享/index.html","hash":"1c60f8ab2c3301f52b038d9246d6fb20b7d98aeb","modified":1730294288901},{"_id":"public/tags/JSX/index.html","hash":"77f7b291125d249ab54cac5dc5b26eb2cef234cc","modified":1730294288901},{"_id":"public/tags/CommonJS/index.html","hash":"5c5785d9b97367f7ef0a7b4bc71b193c93c24309","modified":1730294288901},{"_id":"public/tags/flex/index.html","hash":"3652c1a35a8c5c20109b505e00bed7b8c55636e7","modified":1730294288901},{"_id":"public/tags/flex-預設屬性/index.html","hash":"9ec1522498ef06d0a386b2edda9069b93c520beb","modified":1730294288901},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1730294288901},{"_id":"public/images/antonio.jpg","hash":"395ae40b59ae93c55240c983061c20fe6c645987","modified":1730294288901},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1730294288901},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1730294288901},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1730294288901},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1730294288901},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1730294288901},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1730294288901},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1730294288901},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1730294288901},{"_id":"public/README.md","hash":"07653b3bb41ab91b814c2e814a867750fe26858d","modified":1730294288901},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1730294288901},{"_id":"public/images/icon100.png","hash":"d2564066e1affa57a436799fe13015fd37748665","modified":1730294288901},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1730294288901},{"_id":"public/images/icon50.png","hash":"f18a79ae08b4b6c96c451ca8c07ae8d17d31c3b1","modified":1730294288901},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1730294288901},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1730294288901},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1730294288901},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1730294288901},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1730294288901},{"_id":"public/css/main.css","hash":"b1cc6041c38e468d6d36ee1304763acc64041db3","modified":1730294288901},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1730294288901},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1730294288901},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1730294288901},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1730294288901},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1730294288901},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1730294288901},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1730294288901},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1730294288901},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1730294288901},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1730294288901},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1730294288901},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1730294288901},{"_id":"public/images/background.jpg","hash":"f826dd72b31b9a593df1cf8e711f366398c2f5cf","modified":1730294288901},{"_id":"public/images/background2.jpg","hash":"2636499318497e590cca6a223cc61585b1007c10","modified":1730294288901}],"Category":[{"name":"Blog","_id":"cm2vwjm3p000748z1d2ecbh7v"},{"name":"Emmet","_id":"cm2vwjm3s000o48z1cvmu8x2u"},{"name":"JavaScript","_id":"cm2vwjm3s000v48z13u0ney8m"},{"name":"React","_id":"cm2vwjm3u001i48z13hf30mul"},{"name":"學習心得","_id":"cm2vwjm3w002f48z113t12n8n"},{"name":"css","_id":"cm2vwjm3x002k48z1fzs0eljj"}],"Data":[],"Page":[{"title":"404 錯誤","date":"2021-09-08T05:50:44.000Z","type":"categories","comments":0,"description":"很抱歉，找不到您想要存取的頁面。您可以經由以下分類找到您想要的內容。","_content":"","source":"404/index.md","raw":"---\ntitle: 404 錯誤\ndate: 2021-09-08 13:50:44\ntype: categories\ncomments: false\npermalink: /404.html\ndescription: 很抱歉，找不到您想要存取的頁面。您可以經由以下分類找到您想要的內容。\n---","updated":"2024-05-31T14:23:51.000Z","path":"/404.html","layout":"page","_id":"cm2vwjm3k000048z1hjcq7uoi","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2023-10-11T16:18:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-10-12 00:18:15\ntype: categories\ncomments: false\n---\n","updated":"2024-05-31T14:23:51.000Z","path":"categories/index.html","layout":"page","_id":"cm2vwjm3n000248z1gk1th9m8","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"關於我自己","date":"2023-10-11T16:16:15.000Z","comments":0,"_content":"\n我是凌俊豪Antonio，畢業於國立高雄科技大學的資管碩士班。\n以下是我個人擁有的特質及經驗：\n\n### 微服務論文研究 | 基於微服務的可擴展通訊系統\n\n在研究所的研究中，我在Azure雲端平台上部署了通訊系統，利用Azure Functions和API Management將服務分割為獨立模組。選擇Azure Cosmos DB for MongoDB作為資料儲存方案，並結合Azure Redis Cache的LRU策略以優化系統效能。\n\n### React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計\n\n在校四年的產學合作中，我積極參與多個實作專案，包括與1111虛擬面試官、工業局金屬中心的聊天機器人以及ASE的人機協作機器人。我專注於前端技術，並擅長使用React Class Component完成前台邏輯設計，這讓我在實際應用中累積了豐富的React開發經驗。\n\n### 多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解\n\n在校四年期間，我參與了多項產學合作，其中的專案都採用前後端分離的協同開發模式。這讓我不僅強化了前端開發和後端對接的技能，同時還擔任了專案經理一職，負責整體專案的設計和規劃。這段轉換從開發者（RD）到專案經理（PM）的過程，不僅提升了我的技術能力，也深化了對軟體開發系統的理解。\n\n### 自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\n\n擁有強大的自學能力，積極主動學習React及Vue前端。透過六角學院線上課程、IT鐵人幫及Youtube影片，建立了有系統的學習方法。我深信學習是一個不斷提升的過程，並樂於挑戰新的知識領域，保持對技術的高度敏感性。將所有學習歷程紀錄於個人部落格，分享技術觀點並與他人討論，展現樂於分享的態度。\n","source":"about/index.md","raw":"---\ntitle: 關於我自己\ndate: 2023-10-12 00:16:15\ncomments: false\n---\n\n我是凌俊豪Antonio，畢業於國立高雄科技大學的資管碩士班。\n以下是我個人擁有的特質及經驗：\n\n### 微服務論文研究 | 基於微服務的可擴展通訊系統\n\n在研究所的研究中，我在Azure雲端平台上部署了通訊系統，利用Azure Functions和API Management將服務分割為獨立模組。選擇Azure Cosmos DB for MongoDB作為資料儲存方案，並結合Azure Redis Cache的LRU策略以優化系統效能。\n\n### React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計\n\n在校四年的產學合作中，我積極參與多個實作專案，包括與1111虛擬面試官、工業局金屬中心的聊天機器人以及ASE的人機協作機器人。我專注於前端技術，並擅長使用React Class Component完成前台邏輯設計，這讓我在實際應用中累積了豐富的React開發經驗。\n\n### 多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解\n\n在校四年期間，我參與了多項產學合作，其中的專案都採用前後端分離的協同開發模式。這讓我不僅強化了前端開發和後端對接的技能，同時還擔任了專案經理一職，負責整體專案的設計和規劃。這段轉換從開發者（RD）到專案經理（PM）的過程，不僅提升了我的技術能力，也深化了對軟體開發系統的理解。\n\n### 自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\n\n擁有強大的自學能力，積極主動學習React及Vue前端。透過六角學院線上課程、IT鐵人幫及Youtube影片，建立了有系統的學習方法。我深信學習是一個不斷提升的過程，並樂於挑戰新的知識領域，保持對技術的高度敏感性。將所有學習歷程紀錄於個人部落格，分享技術觀點並與他人討論，展現樂於分享的態度。\n","updated":"2024-05-31T14:23:51.000Z","path":"about/index.html","layout":"page","_id":"cm2vwjm3o000548z11h054tuu","content":"<p>我是凌俊豪Antonio，畢業於國立高雄科技大學的資管碩士班。<br>以下是我個人擁有的特質及經驗：</p>\n<h3 id=\"微服務論文研究-基於微服務的可擴展通訊系統\"><a href=\"#微服務論文研究-基於微服務的可擴展通訊系統\" class=\"headerlink\" title=\"微服務論文研究 | 基於微服務的可擴展通訊系統\"></a>微服務論文研究 | 基於微服務的可擴展通訊系統</h3><p>在研究所的研究中，我在Azure雲端平台上部署了通訊系統，利用Azure Functions和API Management將服務分割為獨立模組。選擇Azure Cosmos DB for MongoDB作為資料儲存方案，並結合Azure Redis Cache的LRU策略以優化系統效能。</p>\n<h3 id=\"React實務經驗-參與校內外多項實作專案，熟練運用React完成前台邏輯設計\"><a href=\"#React實務經驗-參與校內外多項實作專案，熟練運用React完成前台邏輯設計\" class=\"headerlink\" title=\"React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計\"></a>React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計</h3><p>在校四年的產學合作中，我積極參與多個實作專案，包括與1111虛擬面試官、工業局金屬中心的聊天機器人以及ASE的人機協作機器人。我專注於前端技術，並擅長使用React Class Component完成前台邏輯設計，這讓我在實際應用中累積了豐富的React開發經驗。</p>\n<h3 id=\"多元開發經歷-強化前後端技能，擔任專案經理加深對軟體開發系統的理解\"><a href=\"#多元開發經歷-強化前後端技能，擔任專案經理加深對軟體開發系統的理解\" class=\"headerlink\" title=\"多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解\"></a>多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解</h3><p>在校四年期間，我參與了多項產學合作，其中的專案都採用前後端分離的協同開發模式。這讓我不僅強化了前端開發和後端對接的技能，同時還擔任了專案經理一職，負責整體專案的設計和規劃。這段轉換從開發者（RD）到專案經理（PM）的過程，不僅提升了我的技術能力，也深化了對軟體開發系統的理解。</p>\n<h3 id=\"自主學習者-React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\"><a href=\"#自主學習者-React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\" class=\"headerlink\" title=\"自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\"></a>自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點</h3><p>擁有強大的自學能力，積極主動學習React及Vue前端。透過六角學院線上課程、IT鐵人幫及Youtube影片，建立了有系統的學習方法。我深信學習是一個不斷提升的過程，並樂於挑戰新的知識領域，保持對技術的高度敏感性。將所有學習歷程紀錄於個人部落格，分享技術觀點並與他人討論，展現樂於分享的態度。</p>\n","site":{"data":{}},"length":727,"excerpt":"","more":"<p>我是凌俊豪Antonio，畢業於國立高雄科技大學的資管碩士班。<br>以下是我個人擁有的特質及經驗：</p>\n<h3 id=\"微服務論文研究-基於微服務的可擴展通訊系統\"><a href=\"#微服務論文研究-基於微服務的可擴展通訊系統\" class=\"headerlink\" title=\"微服務論文研究 | 基於微服務的可擴展通訊系統\"></a>微服務論文研究 | 基於微服務的可擴展通訊系統</h3><p>在研究所的研究中，我在Azure雲端平台上部署了通訊系統，利用Azure Functions和API Management將服務分割為獨立模組。選擇Azure Cosmos DB for MongoDB作為資料儲存方案，並結合Azure Redis Cache的LRU策略以優化系統效能。</p>\n<h3 id=\"React實務經驗-參與校內外多項實作專案，熟練運用React完成前台邏輯設計\"><a href=\"#React實務經驗-參與校內外多項實作專案，熟練運用React完成前台邏輯設計\" class=\"headerlink\" title=\"React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計\"></a>React實務經驗 | 參與校內外多項實作專案，熟練運用React完成前台邏輯設計</h3><p>在校四年的產學合作中，我積極參與多個實作專案，包括與1111虛擬面試官、工業局金屬中心的聊天機器人以及ASE的人機協作機器人。我專注於前端技術，並擅長使用React Class Component完成前台邏輯設計，這讓我在實際應用中累積了豐富的React開發經驗。</p>\n<h3 id=\"多元開發經歷-強化前後端技能，擔任專案經理加深對軟體開發系統的理解\"><a href=\"#多元開發經歷-強化前後端技能，擔任專案經理加深對軟體開發系統的理解\" class=\"headerlink\" title=\"多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解\"></a>多元開發經歷 | 強化前後端技能，擔任專案經理加深對軟體開發系統的理解</h3><p>在校四年期間，我參與了多項產學合作，其中的專案都採用前後端分離的協同開發模式。這讓我不僅強化了前端開發和後端對接的技能，同時還擔任了專案經理一職，負責整體專案的設計和規劃。這段轉換從開發者（RD）到專案經理（PM）的過程，不僅提升了我的技術能力，也深化了對軟體開發系統的理解。</p>\n<h3 id=\"自主學習者-React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\"><a href=\"#自主學習者-React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\" class=\"headerlink\" title=\"自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點\"></a>自主學習者 | React、Vue前端技能迅速掌握，部落格分享學習心得與技術觀點</h3><p>擁有強大的自學能力，積極主動學習React及Vue前端。透過六角學院線上課程、IT鐵人幫及Youtube影片，建立了有系統的學習方法。我深信學習是一個不斷提升的過程，並樂於挑戰新的知識領域，保持對技術的高度敏感性。將所有學習歷程紀錄於個人部落格，分享技術觀點並與他人討論，展現樂於分享的態度。</p>\n"},{"title":"tags","date":"2023-10-11T16:18:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-10-12 00:18:08\ntype: tags\ncomments: false\n---\n","updated":"2024-05-31T14:23:51.000Z","path":"tags/index.html","layout":"page","_id":"cm2vwjm3p000848z14r0l1qs1","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"建立自己的部落格(1)：認識Hexo及所其需工具(Nodejs & Git)","date":"2023-10-16T00:30:27.000Z","description":"打造屬於自己風格的部落格其實不難，讓我們一步步手把手教你如何實現這個目標。","_content":"![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 前言\n\n雖然網路上充斥著各式架設網站的教學，但當我真正動手操作時，發現還有許多細節值得探討和設定。為了幫助更多有此需求的朋友，我決定將這些寶貴的經驗細節記錄下來。架設部落格其實並不困難，只要跟著我的步伐，你也可以輕鬆擁有一個專屬於自己的部落格。\n\n## 什麼是Hexo呢?\n\n- Hexo 是一個快速、簡單且強大的部落格框架，透過設定檔調整即可將對應的網頁進行樣式變更\n- 使用Markdown(md)語法撰寫屬於自己的文章\n\n## 開始安裝看看\n\n首先要先介紹我們要安裝的兩個軟體Node.js及Git安裝流程\n\n### Nodejs程式語言安裝\n\n![Nodejs程式語言官方載點](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png)\n\n- 🔗 [Nodejs程式語言官方載點請點我](https://nodejs.org/en)\n  - 建議使用Node.js 10.0及以上版本\n  - 點選<strong><code>Recommended For Most Users</code></strong>推薦版本(通常使用上相較右邊最新版本穩定)\n  - 安裝上都按照預設點選下一步直至完成即可\n\n### 檢驗Nodejs安裝完成\n\n- 在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本\n<strong>[(如果不知道命令提示字元怎麼開請點我)](#command-line)</strong>\n\n```text\nnodejs -v\n```\n\n- ![Nodejs版本查詢](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png)\n- 有寫版本號碼就代表安裝完成囉!!!\n\n---\n\n### Git版本控制系統安裝\n\n![Git版本控制系統官方載點](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png)\n\n- 點選對應的電腦系統(Windows、macOS、Linux/Unix)\n\n![按照對應的位元數進行下載](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%8C%89%E7%85%A7%E5%B0%8D%E6%87%89%E7%9A%84%E4%BD%8D%E5%85%83%E6%95%B8%E9%80%B2%E8%A1%8C%E4%B8%8B%E8%BC%89.png)\n\n- 按照對應的位元數進行下載\n<strong>[(如果不知道位元數哪裡看請點我)](#bits)</strong>\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n### 檢驗Git安裝完成\n\n- 在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本\n[(如果不知道命令提示字元怎麼開請點我)](#command-line)\n\n```text\ngit -v\n```\n\n![git版本查詢](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/git%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png)\n\n- 有寫版本號碼就代表安裝完成囉!!!\n\n---\n\n<a id=\"bits\"></a>\n\n## 如何查看電腦系統位元數?\n\n- Step 1：在搜尋框輸入<strong><code>系統</code></strong>點開\n\n![檢查自己電腦位元數](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007037/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png)\n\nStep 2：<strong><code>系統</code></strong>這邊可以查看電腦位元數\n![查看電腦位元數](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png)\n\n<a id=\"command-line\"></a>\n\n## 如何開啟命令提示字元介面\n\n![電腦終端機介面檢查](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E9%9B%BB%E8%85%A6%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%BB%8B%E9%9D%A2%E6%AA%A2%E6%9F%A5.png)\n\n- 點選<strong><code>搜尋框</code></strong>輸入cmd(cmd：Command Line)\n- 點選<strong><code>命令提示字元</code></strong>(與電腦溝通的介面)\n\n---\n\n## 結尾\n\n希望讓想架設部落格的任何人，都可以有第一步可以踏出(跟我一樣)。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件](https://hexo.io/zh-tw/docs/)\n","source":"_posts/2023-10-16-hexo-github-1.md","raw":"---\ntitle: 建立自己的部落格(1)：認識Hexo及所其需工具(Nodejs & Git)\ndate: 2023-10-16 08:30:27\ntags:\n- [Hexo]\ncategories:\n- [Blog]\ndescription: 打造屬於自己風格的部落格其實不難，讓我們一步步手把手教你如何實現這個目標。\n---\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 前言\n\n雖然網路上充斥著各式架設網站的教學，但當我真正動手操作時，發現還有許多細節值得探討和設定。為了幫助更多有此需求的朋友，我決定將這些寶貴的經驗細節記錄下來。架設部落格其實並不困難，只要跟著我的步伐，你也可以輕鬆擁有一個專屬於自己的部落格。\n\n## 什麼是Hexo呢?\n\n- Hexo 是一個快速、簡單且強大的部落格框架，透過設定檔調整即可將對應的網頁進行樣式變更\n- 使用Markdown(md)語法撰寫屬於自己的文章\n\n## 開始安裝看看\n\n首先要先介紹我們要安裝的兩個軟體Node.js及Git安裝流程\n\n### Nodejs程式語言安裝\n\n![Nodejs程式語言官方載點](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png)\n\n- 🔗 [Nodejs程式語言官方載點請點我](https://nodejs.org/en)\n  - 建議使用Node.js 10.0及以上版本\n  - 點選<strong><code>Recommended For Most Users</code></strong>推薦版本(通常使用上相較右邊最新版本穩定)\n  - 安裝上都按照預設點選下一步直至完成即可\n\n### 檢驗Nodejs安裝完成\n\n- 在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本\n<strong>[(如果不知道命令提示字元怎麼開請點我)](#command-line)</strong>\n\n```text\nnodejs -v\n```\n\n- ![Nodejs版本查詢](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png)\n- 有寫版本號碼就代表安裝完成囉!!!\n\n---\n\n### Git版本控制系統安裝\n\n![Git版本控制系統官方載點](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png)\n\n- 點選對應的電腦系統(Windows、macOS、Linux/Unix)\n\n![按照對應的位元數進行下載](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%8C%89%E7%85%A7%E5%B0%8D%E6%87%89%E7%9A%84%E4%BD%8D%E5%85%83%E6%95%B8%E9%80%B2%E8%A1%8C%E4%B8%8B%E8%BC%89.png)\n\n- 按照對應的位元數進行下載\n<strong>[(如果不知道位元數哪裡看請點我)](#bits)</strong>\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n### 檢驗Git安裝完成\n\n- 在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本\n[(如果不知道命令提示字元怎麼開請點我)](#command-line)\n\n```text\ngit -v\n```\n\n![git版本查詢](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/git%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png)\n\n- 有寫版本號碼就代表安裝完成囉!!!\n\n---\n\n<a id=\"bits\"></a>\n\n## 如何查看電腦系統位元數?\n\n- Step 1：在搜尋框輸入<strong><code>系統</code></strong>點開\n\n![檢查自己電腦位元數](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007037/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png)\n\nStep 2：<strong><code>系統</code></strong>這邊可以查看電腦位元數\n![查看電腦位元數](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png)\n\n<a id=\"command-line\"></a>\n\n## 如何開啟命令提示字元介面\n\n![電腦終端機介面檢查](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E9%9B%BB%E8%85%A6%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%BB%8B%E9%9D%A2%E6%AA%A2%E6%9F%A5.png)\n\n- 點選<strong><code>搜尋框</code></strong>輸入cmd(cmd：Command Line)\n- 點選<strong><code>命令提示字元</code></strong>(與電腦溝通的介面)\n\n---\n\n## 結尾\n\n希望讓想架設部落格的任何人，都可以有第一步可以踏出(跟我一樣)。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件](https://hexo.io/zh-tw/docs/)\n","slug":"hexo-github-1","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3m000148z16p1yev56","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>雖然網路上充斥著各式架設網站的教學，但當我真正動手操作時，發現還有許多細節值得探討和設定。為了幫助更多有此需求的朋友，我決定將這些寶貴的經驗細節記錄下來。架設部落格其實並不困難，只要跟著我的步伐，你也可以輕鬆擁有一個專屬於自己的部落格。</p>\n<h2 id=\"什麼是Hexo呢\"><a href=\"#什麼是Hexo呢\" class=\"headerlink\" title=\"什麼是Hexo呢?\"></a>什麼是Hexo呢?</h2><ul>\n<li>Hexo 是一個快速、簡單且強大的部落格框架，透過設定檔調整即可將對應的網頁進行樣式變更</li>\n<li>使用Markdown(md)語法撰寫屬於自己的文章</li>\n</ul>\n<h2 id=\"開始安裝看看\"><a href=\"#開始安裝看看\" class=\"headerlink\" title=\"開始安裝看看\"></a>開始安裝看看</h2><p>首先要先介紹我們要安裝的兩個軟體Node.js及Git安裝流程</p>\n<h3 id=\"Nodejs程式語言安裝\"><a href=\"#Nodejs程式語言安裝\" class=\"headerlink\" title=\"Nodejs程式語言安裝\"></a>Nodejs程式語言安裝</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png\" alt=\"Nodejs程式語言官方載點\"></p>\n<ul>\n<li>🔗 <a href=\"https://nodejs.org/en\">Nodejs程式語言官方載點請點我</a><ul>\n<li>建議使用Node.js 10.0及以上版本</li>\n<li>點選<strong><code>Recommended For Most Users</code></strong>推薦版本(通常使用上相較右邊最新版本穩定)</li>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"檢驗Nodejs安裝完成\"><a href=\"#檢驗Nodejs安裝完成\" class=\"headerlink\" title=\"檢驗Nodejs安裝完成\"></a>檢驗Nodejs安裝完成</h3><ul>\n<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><strong><a href=\"#command-line\">(如果不知道命令提示字元怎麼開請點我)</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodejs -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png\" alt=\"Nodejs版本查詢\"></li>\n<li>有寫版本號碼就代表安裝完成囉!!!</li>\n</ul>\n<hr>\n<h3 id=\"Git版本控制系統安裝\"><a href=\"#Git版本控制系統安裝\" class=\"headerlink\" title=\"Git版本控制系統安裝\"></a>Git版本控制系統安裝</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png\" alt=\"Git版本控制系統官方載點\"></p>\n<ul>\n<li>點選對應的電腦系統(Windows、macOS、Linux&#x2F;Unix)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%8C%89%E7%85%A7%E5%B0%8D%E6%87%89%E7%9A%84%E4%BD%8D%E5%85%83%E6%95%B8%E9%80%B2%E8%A1%8C%E4%B8%8B%E8%BC%89.png\" alt=\"按照對應的位元數進行下載\"></p>\n<ul>\n<li><p>按照對應的位元數進行下載<br><strong><a href=\"#bits\">(如果不知道位元數哪裡看請點我)</a></strong></p>\n</li>\n<li><p>安裝上都按照預設點選下一步直至完成即可</p>\n</li>\n</ul>\n<h3 id=\"檢驗Git安裝完成\"><a href=\"#檢驗Git安裝完成\" class=\"headerlink\" title=\"檢驗Git安裝完成\"></a>檢驗Git安裝完成</h3><ul>\n<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><a href=\"#command-line\">(如果不知道命令提示字元怎麼開請點我)</a></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/git%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png\" alt=\"git版本查詢\"></p>\n<ul>\n<li>有寫版本號碼就代表安裝完成囉!!!</li>\n</ul>\n<hr>\n<p><a id=\"bits\"></a></p>\n<h2 id=\"如何查看電腦系統位元數\"><a href=\"#如何查看電腦系統位元數\" class=\"headerlink\" title=\"如何查看電腦系統位元數?\"></a>如何查看電腦系統位元數?</h2><ul>\n<li>Step 1：在搜尋框輸入<strong><code>系統</code></strong>點開</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007037/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png\" alt=\"檢查自己電腦位元數\"></p>\n<p>Step 2：<strong><code>系統</code></strong>這邊可以查看電腦位元數<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png\" alt=\"查看電腦位元數\"></p>\n<p><a id=\"command-line\"></a></p>\n<h2 id=\"如何開啟命令提示字元介面\"><a href=\"#如何開啟命令提示字元介面\" class=\"headerlink\" title=\"如何開啟命令提示字元介面\"></a>如何開啟命令提示字元介面</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E9%9B%BB%E8%85%A6%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%BB%8B%E9%9D%A2%E6%AA%A2%E6%9F%A5.png\" alt=\"電腦終端機介面檢查\"></p>\n<ul>\n<li>點選<strong><code>搜尋框</code></strong>輸入cmd(cmd：Command Line)</li>\n<li>點選<strong><code>命令提示字元</code></strong>(與電腦溝通的介面)</li>\n</ul>\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>希望讓想架設部落格的任何人，都可以有第一步可以踏出(跟我一樣)。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件</a></p>\n","site":{"data":{}},"length":791,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>雖然網路上充斥著各式架設網站的教學，但當我真正動手操作時，發現還有許多細節值得探討和設定。為了幫助更多有此需求的朋友，我決定將這些寶貴的經驗細節記錄下來。架設部落格其實並不困難，只要跟著我的步伐，你也可以輕鬆擁有一個專屬於自己的部落格。</p>\n<h2 id=\"什麼是Hexo呢\"><a href=\"#什麼是Hexo呢\" class=\"headerlink\" title=\"什麼是Hexo呢?\"></a>什麼是Hexo呢?</h2><ul>\n<li>Hexo 是一個快速、簡單且強大的部落格框架，透過設定檔調整即可將對應的網頁進行樣式變更</li>\n<li>使用Markdown(md)語法撰寫屬於自己的文章</li>\n</ul>\n<h2 id=\"開始安裝看看\"><a href=\"#開始安裝看看\" class=\"headerlink\" title=\"開始安裝看看\"></a>開始安裝看看</h2><p>首先要先介紹我們要安裝的兩個軟體Node.js及Git安裝流程</p>\n<h3 id=\"Nodejs程式語言安裝\"><a href=\"#Nodejs程式語言安裝\" class=\"headerlink\" title=\"Nodejs程式語言安裝\"></a>Nodejs程式語言安裝</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png\" alt=\"Nodejs程式語言官方載點\"></p>\n<ul>\n<li>🔗 <a href=\"https://nodejs.org/en\">Nodejs程式語言官方載點請點我</a><ul>\n<li>建議使用Node.js 10.0及以上版本</li>\n<li>點選<strong><code>Recommended For Most Users</code></strong>推薦版本(通常使用上相較右邊最新版本穩定)</li>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"檢驗Nodejs安裝完成\"><a href=\"#檢驗Nodejs安裝完成\" class=\"headerlink\" title=\"檢驗Nodejs安裝完成\"></a>檢驗Nodejs安裝完成</h3><ul>\n<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><strong><a href=\"#command-line\">(如果不知道命令提示字元怎麼開請點我)</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodejs -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Nodejs%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png\" alt=\"Nodejs版本查詢\"></li>\n<li>有寫版本號碼就代表安裝完成囉!!!</li>\n</ul>\n<hr>\n<h3 id=\"Git版本控制系統安裝\"><a href=\"#Git版本控制系統安裝\" class=\"headerlink\" title=\"Git版本控制系統安裝\"></a>Git版本控制系統安裝</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%AE%98%E6%96%B9%E8%BC%89%E9%BB%9E.png\" alt=\"Git版本控制系統官方載點\"></p>\n<ul>\n<li>點選對應的電腦系統(Windows、macOS、Linux&#x2F;Unix)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%8C%89%E7%85%A7%E5%B0%8D%E6%87%89%E7%9A%84%E4%BD%8D%E5%85%83%E6%95%B8%E9%80%B2%E8%A1%8C%E4%B8%8B%E8%BC%89.png\" alt=\"按照對應的位元數進行下載\"></p>\n<ul>\n<li><p>按照對應的位元數進行下載<br><strong><a href=\"#bits\">(如果不知道位元數哪裡看請點我)</a></strong></p>\n</li>\n<li><p>安裝上都按照預設點選下一步直至完成即可</p>\n</li>\n</ul>\n<h3 id=\"檢驗Git安裝完成\"><a href=\"#檢驗Git安裝完成\" class=\"headerlink\" title=\"檢驗Git安裝完成\"></a>檢驗Git安裝完成</h3><ul>\n<li>在命令提示字元(Command Line)中輸入以下指令即可確認當前Nodejs版本<br><a href=\"#command-line\">(如果不知道命令提示字元怎麼開請點我)</a></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/git%E7%89%88%E6%9C%AC%E6%9F%A5%E8%A9%A2.png\" alt=\"git版本查詢\"></p>\n<ul>\n<li>有寫版本號碼就代表安裝完成囉!!!</li>\n</ul>\n<hr>\n<p><a id=\"bits\"></a></p>\n<h2 id=\"如何查看電腦系統位元數\"><a href=\"#如何查看電腦系統位元數\" class=\"headerlink\" title=\"如何查看電腦系統位元數?\"></a>如何查看電腦系統位元數?</h2><ul>\n<li>Step 1：在搜尋框輸入<strong><code>系統</code></strong>點開</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007037/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png\" alt=\"檢查自己電腦位元數\"></p>\n<p>Step 2：<strong><code>系統</code></strong>這邊可以查看電腦位元數<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E6%AA%A2%E6%9F%A5%E8%87%AA%E5%B7%B1%E9%9B%BB%E8%85%A6%E4%BD%8D%E5%85%83%E6%95%B8.png\" alt=\"查看電腦位元數\"></p>\n<p><a id=\"command-line\"></a></p>\n<h2 id=\"如何開啟命令提示字元介面\"><a href=\"#如何開啟命令提示字元介面\" class=\"headerlink\" title=\"如何開啟命令提示字元介面\"></a>如何開啟命令提示字元介面</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-1/%E9%9B%BB%E8%85%A6%E7%B5%82%E7%AB%AF%E6%A9%9F%E4%BB%8B%E9%9D%A2%E6%AA%A2%E6%9F%A5.png\" alt=\"電腦終端機介面檢查\"></p>\n<ul>\n<li>點選<strong><code>搜尋框</code></strong>輸入cmd(cmd：Command Line)</li>\n<li>點選<strong><code>命令提示字元</code></strong>(與電腦溝通的介面)</li>\n</ul>\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>希望讓想架設部落格的任何人，都可以有第一步可以踏出(跟我一樣)。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件</a></p>\n"},{"title":"建立自己的部落格(2)：創建Hexo Blog初始的模板","date":"2023-10-17T07:59:37.000Z","description":"踏出那關鍵的第一步，從白紙到完整的部落格，一同見證你的部落格誕生的奇妙時刻。","_content":"![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 安裝Hexo手把手教學\n\n- 在你的桌面上建立一個資料夾\n\n![建立新資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E4%BD%BF%E7%94%A8cmd.png)\n\n- 點進去資料夾之後在資料夾路徑的位置上輸入cmd按下Enter按鍵\n\n![利用資料夾打開cmd](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91.png)\n\n### 安裝項目-hexo-cli\n\n- 輸入以下指令安裝，讓你也能使用Hexo命令列功能\n\n```text\nnpm install -g hexo-cli\n```\n\n![hexo-cli安裝](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/hexo-cli%E5%AE%89%E8%A3%9D.png)\n\n## 檢查hexo-cli安裝完成\n\n![檢驗hexo-cli安裝完成](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E6%AA%A2%E9%A9%97hexo-cli%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.png)\n\n- 確認顯示版本號代表已安裝完成\n\n---\n\n## 初始化Hexo檔案\n\n- 輸入以下指令產生Hexo初始化需要的檔案及資料夾\n<strong>[如果出現黃色訊息的意外情況請點我](#hexo-init-bug)</strong>\n\n```text\nhexo init\n```\n\n## 檢查Hexo安裝成功\n\n![Hexo安裝成功](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%AE%89%E8%A3%9D%E6%88%90%E5%8A%9F.png)\n\n- 成功看到<strong><code>Start blogging with Hexo!</code></strong>代表安裝完成囉\n\n![Hexo初始化成功資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 可以看到剛剛的資料夾中出現了許多資料夾及檔案\n\n---\n\n## 部落格產生(預設版本)\n\n- 在前面我們產生的cmd介面中輸入以下指令即可看到預設的版本\n(指令意思是啟動本地服務器預覽部落格畫面，預設Port使用4000)\n- <strong>[如果出現黃色訊息的意外情況請點我](#PortInUse)</strong>\n\n```text\nhexo s\n```\n\n- 打開你的瀏覽器(Chrome、Edge)\n- 輸入以下的網址\n\n```text\nhttp://localhost:4000/\n```\n\n![Hexo預設網站](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E9%A0%90%E8%A8%AD%E7%B6%B2%E7%AB%99.png)\n\n- 出現這個畫面代表你已經成功架設起屬於自己的部落格了\n\n---\n\n## Hexo初始化資料夾講解\n\n- _config.yml\n  - 部落格的設定檔\n- scaffolds\n  - Markdown(md)檔案生成的模板\n    - draft.md：草稿使用的文章模板\n    - page.md：分頁畫面使用的網頁模板\n    - post.md：正式區使用的文章模板\n- source\n  - 放置網站內容的地方(前輟帶有_會被Hexo忽略，僅有_posts不會)\n  這邊的所有md、html檔案在處理之後會放置<strong><code>/public</code></strong>\n- themes\n  - 根據不同的主題生成不同的靜態網頁風格。\n  <strong>[快點擊我找一個自己喜歡的模板吧!!!](https://hexo.io/themes/)</strong>\n  <strong>[(如果官方預覽不知道怎麼看到點我)](#Preview)</strong>\n\n![官方的Themes shops](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E5%AE%98%E6%96%B9%E7%9A%84Themes%20shops.png)\n\n---\n\n<a id=\"hexo-init-bug\"></a>\n\n## hexo init故障排除\n\n![cmd非空初始化hexo故障顯示](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%9D%9E%E7%A9%BA%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E6%95%85%E9%9A%9C%E9%A1%AF%E7%A4%BA.png)\n\n- 這代表你的資料夾並非空的導致初始化失敗喔!!!\n檢查一下你安裝Hexo的資料夾吧(以下是失敗可能範例)\n\n![資料夾已有檔案(package.json)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E5%B7%B2%E6%9C%89%E6%AA%94%E6%A1%88%28package.json%29.png)\n\n<a id=\"Preview\"></a>\n\n---\n\n## 官方主題看預覽畫面教學(選好的主題將在Day4進行更換)\n\n- 通常點進去都會有對應的靜態網頁連結可以點擊\n- leedom主題\n\n![leedom主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/leedom%E4%B8%BB%E9%A1%8C.png)\n\n- Tranquilpeak主題\n\n![Tranquilpeak主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Tranquilpeak%E4%B8%BB%E9%A1%8C.png)\n\n- Oliver主題\n\n![Oliver主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Oliver%E4%B8%BB%E9%A1%8C.png)\n\n<a id=\"PortInUse\"></a>\n\n## hexo s故障排除\n\n![port號佔用](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/port%E8%99%9F%E5%8D%A0%E7%94%A8.png)\n\n- 這代表port號被占用了\n\n- 可以試著改用以下方式讓使用的port號改變\n\n```text\nhexo s -p 6000\n```\n\n---\n\n## 結尾\n\n今天也好好的邁出第二步了，看到屬於自己的畫面，希望能夠幫助所有喜歡部落格的我跟你。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件](https://hexo.io/zh-tw/docs/)\n","source":"_posts/2023-10-17-hexo-github-2.md","raw":"---\ntitle: 建立自己的部落格(2)：創建Hexo Blog初始的模板\ndate: 2023-10-17 15:59:37\ntags:\n- [Hexo]\ncategories:\n- [Blog]\ndescription: 踏出那關鍵的第一步，從白紙到完整的部落格，一同見證你的部落格誕生的奇妙時刻。\n---\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 安裝Hexo手把手教學\n\n- 在你的桌面上建立一個資料夾\n\n![建立新資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E4%BD%BF%E7%94%A8cmd.png)\n\n- 點進去資料夾之後在資料夾路徑的位置上輸入cmd按下Enter按鍵\n\n![利用資料夾打開cmd](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91.png)\n\n### 安裝項目-hexo-cli\n\n- 輸入以下指令安裝，讓你也能使用Hexo命令列功能\n\n```text\nnpm install -g hexo-cli\n```\n\n![hexo-cli安裝](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/hexo-cli%E5%AE%89%E8%A3%9D.png)\n\n## 檢查hexo-cli安裝完成\n\n![檢驗hexo-cli安裝完成](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E6%AA%A2%E9%A9%97hexo-cli%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.png)\n\n- 確認顯示版本號代表已安裝完成\n\n---\n\n## 初始化Hexo檔案\n\n- 輸入以下指令產生Hexo初始化需要的檔案及資料夾\n<strong>[如果出現黃色訊息的意外情況請點我](#hexo-init-bug)</strong>\n\n```text\nhexo init\n```\n\n## 檢查Hexo安裝成功\n\n![Hexo安裝成功](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%AE%89%E8%A3%9D%E6%88%90%E5%8A%9F.png)\n\n- 成功看到<strong><code>Start blogging with Hexo!</code></strong>代表安裝完成囉\n\n![Hexo初始化成功資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 可以看到剛剛的資料夾中出現了許多資料夾及檔案\n\n---\n\n## 部落格產生(預設版本)\n\n- 在前面我們產生的cmd介面中輸入以下指令即可看到預設的版本\n(指令意思是啟動本地服務器預覽部落格畫面，預設Port使用4000)\n- <strong>[如果出現黃色訊息的意外情況請點我](#PortInUse)</strong>\n\n```text\nhexo s\n```\n\n- 打開你的瀏覽器(Chrome、Edge)\n- 輸入以下的網址\n\n```text\nhttp://localhost:4000/\n```\n\n![Hexo預設網站](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E9%A0%90%E8%A8%AD%E7%B6%B2%E7%AB%99.png)\n\n- 出現這個畫面代表你已經成功架設起屬於自己的部落格了\n\n---\n\n## Hexo初始化資料夾講解\n\n- _config.yml\n  - 部落格的設定檔\n- scaffolds\n  - Markdown(md)檔案生成的模板\n    - draft.md：草稿使用的文章模板\n    - page.md：分頁畫面使用的網頁模板\n    - post.md：正式區使用的文章模板\n- source\n  - 放置網站內容的地方(前輟帶有_會被Hexo忽略，僅有_posts不會)\n  這邊的所有md、html檔案在處理之後會放置<strong><code>/public</code></strong>\n- themes\n  - 根據不同的主題生成不同的靜態網頁風格。\n  <strong>[快點擊我找一個自己喜歡的模板吧!!!](https://hexo.io/themes/)</strong>\n  <strong>[(如果官方預覽不知道怎麼看到點我)](#Preview)</strong>\n\n![官方的Themes shops](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E5%AE%98%E6%96%B9%E7%9A%84Themes%20shops.png)\n\n---\n\n<a id=\"hexo-init-bug\"></a>\n\n## hexo init故障排除\n\n![cmd非空初始化hexo故障顯示](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%9D%9E%E7%A9%BA%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E6%95%85%E9%9A%9C%E9%A1%AF%E7%A4%BA.png)\n\n- 這代表你的資料夾並非空的導致初始化失敗喔!!!\n檢查一下你安裝Hexo的資料夾吧(以下是失敗可能範例)\n\n![資料夾已有檔案(package.json)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E5%B7%B2%E6%9C%89%E6%AA%94%E6%A1%88%28package.json%29.png)\n\n<a id=\"Preview\"></a>\n\n---\n\n## 官方主題看預覽畫面教學(選好的主題將在Day4進行更換)\n\n- 通常點進去都會有對應的靜態網頁連結可以點擊\n- leedom主題\n\n![leedom主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/leedom%E4%B8%BB%E9%A1%8C.png)\n\n- Tranquilpeak主題\n\n![Tranquilpeak主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Tranquilpeak%E4%B8%BB%E9%A1%8C.png)\n\n- Oliver主題\n\n![Oliver主題](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Oliver%E4%B8%BB%E9%A1%8C.png)\n\n<a id=\"PortInUse\"></a>\n\n## hexo s故障排除\n\n![port號佔用](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/port%E8%99%9F%E5%8D%A0%E7%94%A8.png)\n\n- 這代表port號被占用了\n\n- 可以試著改用以下方式讓使用的port號改變\n\n```text\nhexo s -p 6000\n```\n\n---\n\n## 結尾\n\n今天也好好的邁出第二步了，看到屬於自己的畫面，希望能夠幫助所有喜歡部落格的我跟你。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件](https://hexo.io/zh-tw/docs/)\n","slug":"hexo-github-2","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3n000348z1eoirbp0l","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"安裝Hexo手把手教學\"><a href=\"#安裝Hexo手把手教學\" class=\"headerlink\" title=\"安裝Hexo手把手教學\"></a>安裝Hexo手把手教學</h2><ul>\n<li>在你的桌面上建立一個資料夾</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E4%BD%BF%E7%94%A8cmd.png\" alt=\"建立新資料夾\"></p>\n<ul>\n<li>點進去資料夾之後在資料夾路徑的位置上輸入cmd按下Enter按鍵</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91.png\" alt=\"利用資料夾打開cmd\"></p>\n<h3 id=\"安裝項目-hexo-cli\"><a href=\"#安裝項目-hexo-cli\" class=\"headerlink\" title=\"安裝項目-hexo-cli\"></a>安裝項目-hexo-cli</h3><ul>\n<li>輸入以下指令安裝，讓你也能使用Hexo命令列功能</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/hexo-cli%E5%AE%89%E8%A3%9D.png\" alt=\"hexo-cli安裝\"></p>\n<h2 id=\"檢查hexo-cli安裝完成\"><a href=\"#檢查hexo-cli安裝完成\" class=\"headerlink\" title=\"檢查hexo-cli安裝完成\"></a>檢查hexo-cli安裝完成</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E6%AA%A2%E9%A9%97hexo-cli%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.png\" alt=\"檢驗hexo-cli安裝完成\"></p>\n<ul>\n<li>確認顯示版本號代表已安裝完成</li>\n</ul>\n<hr>\n<h2 id=\"初始化Hexo檔案\"><a href=\"#初始化Hexo檔案\" class=\"headerlink\" title=\"初始化Hexo檔案\"></a>初始化Hexo檔案</h2><ul>\n<li>輸入以下指令產生Hexo初始化需要的檔案及資料夾<br><strong><a href=\"#hexo-init-bug\">如果出現黃色訊息的意外情況請點我</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"檢查Hexo安裝成功\"><a href=\"#檢查Hexo安裝成功\" class=\"headerlink\" title=\"檢查Hexo安裝成功\"></a>檢查Hexo安裝成功</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%AE%89%E8%A3%9D%E6%88%90%E5%8A%9F.png\" alt=\"Hexo安裝成功\"></p>\n<ul>\n<li>成功看到<strong><code>Start blogging with Hexo!</code></strong>代表安裝完成囉</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Hexo初始化成功資料夾\"></p>\n<ul>\n<li>可以看到剛剛的資料夾中出現了許多資料夾及檔案</li>\n</ul>\n<hr>\n<h2 id=\"部落格產生-預設版本\"><a href=\"#部落格產生-預設版本\" class=\"headerlink\" title=\"部落格產生(預設版本)\"></a>部落格產生(預設版本)</h2><ul>\n<li>在前面我們產生的cmd介面中輸入以下指令即可看到預設的版本<br>(指令意思是啟動本地服務器預覽部落格畫面，預設Port使用4000)</li>\n<li><strong><a href=\"#PortInUse\">如果出現黃色訊息的意外情況請點我</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開你的瀏覽器(Chrome、Edge)</li>\n<li>輸入以下的網址</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E9%A0%90%E8%A8%AD%E7%B6%B2%E7%AB%99.png\" alt=\"Hexo預設網站\"></p>\n<ul>\n<li>出現這個畫面代表你已經成功架設起屬於自己的部落格了</li>\n</ul>\n<hr>\n<h2 id=\"Hexo初始化資料夾講解\"><a href=\"#Hexo初始化資料夾講解\" class=\"headerlink\" title=\"Hexo初始化資料夾講解\"></a>Hexo初始化資料夾講解</h2><ul>\n<li>_config.yml<ul>\n<li>部落格的設定檔</li>\n</ul>\n</li>\n<li>scaffolds<ul>\n<li>Markdown(md)檔案生成的模板<ul>\n<li>draft.md：草稿使用的文章模板</li>\n<li>page.md：分頁畫面使用的網頁模板</li>\n<li>post.md：正式區使用的文章模板</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>source<ul>\n<li>放置網站內容的地方(前輟帶有_會被Hexo忽略，僅有_posts不會)<br>這邊的所有md、html檔案在處理之後會放置<strong><code>/public</code></strong></li>\n</ul>\n</li>\n<li>themes<ul>\n<li>根據不同的主題生成不同的靜態網頁風格。<br><strong><a href=\"https://hexo.io/themes/\">快點擊我找一個自己喜歡的模板吧!!!</a></strong><br><strong><a href=\"#Preview\">(如果官方預覽不知道怎麼看到點我)</a></strong></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E5%AE%98%E6%96%B9%E7%9A%84Themes%20shops.png\" alt=\"官方的Themes shops\"></p>\n<hr>\n<p><a id=\"hexo-init-bug\"></a></p>\n<h2 id=\"hexo-init故障排除\"><a href=\"#hexo-init故障排除\" class=\"headerlink\" title=\"hexo init故障排除\"></a>hexo init故障排除</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%9D%9E%E7%A9%BA%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E6%95%85%E9%9A%9C%E9%A1%AF%E7%A4%BA.png\" alt=\"cmd非空初始化hexo故障顯示\"></p>\n<ul>\n<li>這代表你的資料夾並非空的導致初始化失敗喔!!!<br>檢查一下你安裝Hexo的資料夾吧(以下是失敗可能範例)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E5%B7%B2%E6%9C%89%E6%AA%94%E6%A1%88%28package.json%29.png\" alt=\"資料夾已有檔案(package.json)\"></p>\n<p><a id=\"Preview\"></a></p>\n<hr>\n<h2 id=\"官方主題看預覽畫面教學-選好的主題將在Day4進行更換\"><a href=\"#官方主題看預覽畫面教學-選好的主題將在Day4進行更換\" class=\"headerlink\" title=\"官方主題看預覽畫面教學(選好的主題將在Day4進行更換)\"></a>官方主題看預覽畫面教學(選好的主題將在Day4進行更換)</h2><ul>\n<li>通常點進去都會有對應的靜態網頁連結可以點擊</li>\n<li>leedom主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/leedom%E4%B8%BB%E9%A1%8C.png\" alt=\"leedom主題\"></p>\n<ul>\n<li>Tranquilpeak主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Tranquilpeak%E4%B8%BB%E9%A1%8C.png\" alt=\"Tranquilpeak主題\"></p>\n<ul>\n<li>Oliver主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Oliver%E4%B8%BB%E9%A1%8C.png\" alt=\"Oliver主題\"></p>\n<p><a id=\"PortInUse\"></a></p>\n<h2 id=\"hexo-s故障排除\"><a href=\"#hexo-s故障排除\" class=\"headerlink\" title=\"hexo s故障排除\"></a>hexo s故障排除</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/port%E8%99%9F%E5%8D%A0%E7%94%A8.png\" alt=\"port號佔用\"></p>\n<ul>\n<li><p>這代表port號被占用了</p>\n</li>\n<li><p>可以試著改用以下方式讓使用的port號改變</p>\n</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -p 6000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>今天也好好的邁出第二步了，看到屬於自己的畫面，希望能夠幫助所有喜歡部落格的我跟你。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件</a></p>\n","site":{"data":{}},"length":932,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"安裝Hexo手把手教學\"><a href=\"#安裝Hexo手把手教學\" class=\"headerlink\" title=\"安裝Hexo手把手教學\"></a>安裝Hexo手把手教學</h2><ul>\n<li>在你的桌面上建立一個資料夾</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E4%BD%BF%E7%94%A8cmd.png\" alt=\"建立新資料夾\"></p>\n<ul>\n<li>點進去資料夾之後在資料夾路徑的位置上輸入cmd按下Enter按鍵</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91.png\" alt=\"利用資料夾打開cmd\"></p>\n<h3 id=\"安裝項目-hexo-cli\"><a href=\"#安裝項目-hexo-cli\" class=\"headerlink\" title=\"安裝項目-hexo-cli\"></a>安裝項目-hexo-cli</h3><ul>\n<li>輸入以下指令安裝，讓你也能使用Hexo命令列功能</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/hexo-cli%E5%AE%89%E8%A3%9D.png\" alt=\"hexo-cli安裝\"></p>\n<h2 id=\"檢查hexo-cli安裝完成\"><a href=\"#檢查hexo-cli安裝完成\" class=\"headerlink\" title=\"檢查hexo-cli安裝完成\"></a>檢查hexo-cli安裝完成</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E6%AA%A2%E9%A9%97hexo-cli%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.png\" alt=\"檢驗hexo-cli安裝完成\"></p>\n<ul>\n<li>確認顯示版本號代表已安裝完成</li>\n</ul>\n<hr>\n<h2 id=\"初始化Hexo檔案\"><a href=\"#初始化Hexo檔案\" class=\"headerlink\" title=\"初始化Hexo檔案\"></a>初始化Hexo檔案</h2><ul>\n<li>輸入以下指令產生Hexo初始化需要的檔案及資料夾<br><strong><a href=\"#hexo-init-bug\">如果出現黃色訊息的意外情況請點我</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"檢查Hexo安裝成功\"><a href=\"#檢查Hexo安裝成功\" class=\"headerlink\" title=\"檢查Hexo安裝成功\"></a>檢查Hexo安裝成功</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%AE%89%E8%A3%9D%E6%88%90%E5%8A%9F.png\" alt=\"Hexo安裝成功\"></p>\n<ul>\n<li>成功看到<strong><code>Start blogging with Hexo!</code></strong>代表安裝完成囉</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007042/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Hexo初始化成功資料夾\"></p>\n<ul>\n<li>可以看到剛剛的資料夾中出現了許多資料夾及檔案</li>\n</ul>\n<hr>\n<h2 id=\"部落格產生-預設版本\"><a href=\"#部落格產生-預設版本\" class=\"headerlink\" title=\"部落格產生(預設版本)\"></a>部落格產生(預設版本)</h2><ul>\n<li>在前面我們產生的cmd介面中輸入以下指令即可看到預設的版本<br>(指令意思是啟動本地服務器預覽部落格畫面，預設Port使用4000)</li>\n<li><strong><a href=\"#PortInUse\">如果出現黃色訊息的意外情況請點我</a></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開你的瀏覽器(Chrome、Edge)</li>\n<li>輸入以下的網址</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:4000/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Hexo%E9%A0%90%E8%A8%AD%E7%B6%B2%E7%AB%99.png\" alt=\"Hexo預設網站\"></p>\n<ul>\n<li>出現這個畫面代表你已經成功架設起屬於自己的部落格了</li>\n</ul>\n<hr>\n<h2 id=\"Hexo初始化資料夾講解\"><a href=\"#Hexo初始化資料夾講解\" class=\"headerlink\" title=\"Hexo初始化資料夾講解\"></a>Hexo初始化資料夾講解</h2><ul>\n<li>_config.yml<ul>\n<li>部落格的設定檔</li>\n</ul>\n</li>\n<li>scaffolds<ul>\n<li>Markdown(md)檔案生成的模板<ul>\n<li>draft.md：草稿使用的文章模板</li>\n<li>page.md：分頁畫面使用的網頁模板</li>\n<li>post.md：正式區使用的文章模板</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>source<ul>\n<li>放置網站內容的地方(前輟帶有_會被Hexo忽略，僅有_posts不會)<br>這邊的所有md、html檔案在處理之後會放置<strong><code>/public</code></strong></li>\n</ul>\n</li>\n<li>themes<ul>\n<li>根據不同的主題生成不同的靜態網頁風格。<br><strong><a href=\"https://hexo.io/themes/\">快點擊我找一個自己喜歡的模板吧!!!</a></strong><br><strong><a href=\"#Preview\">(如果官方預覽不知道怎麼看到點我)</a></strong></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E5%AE%98%E6%96%B9%E7%9A%84Themes%20shops.png\" alt=\"官方的Themes shops\"></p>\n<hr>\n<p><a id=\"hexo-init-bug\"></a></p>\n<h2 id=\"hexo-init故障排除\"><a href=\"#hexo-init故障排除\" class=\"headerlink\" title=\"hexo init故障排除\"></a>hexo init故障排除</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/cmd%E9%9D%9E%E7%A9%BA%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E6%95%85%E9%9A%9C%E9%A1%AF%E7%A4%BA.png\" alt=\"cmd非空初始化hexo故障顯示\"></p>\n<ul>\n<li>這代表你的資料夾並非空的導致初始化失敗喔!!!<br>檢查一下你安裝Hexo的資料夾吧(以下是失敗可能範例)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/%E8%B3%87%E6%96%99%E5%A4%BE%E5%B7%B2%E6%9C%89%E6%AA%94%E6%A1%88%28package.json%29.png\" alt=\"資料夾已有檔案(package.json)\"></p>\n<p><a id=\"Preview\"></a></p>\n<hr>\n<h2 id=\"官方主題看預覽畫面教學-選好的主題將在Day4進行更換\"><a href=\"#官方主題看預覽畫面教學-選好的主題將在Day4進行更換\" class=\"headerlink\" title=\"官方主題看預覽畫面教學(選好的主題將在Day4進行更換)\"></a>官方主題看預覽畫面教學(選好的主題將在Day4進行更換)</h2><ul>\n<li>通常點進去都會有對應的靜態網頁連結可以點擊</li>\n<li>leedom主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/leedom%E4%B8%BB%E9%A1%8C.png\" alt=\"leedom主題\"></p>\n<ul>\n<li>Tranquilpeak主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Tranquilpeak%E4%B8%BB%E9%A1%8C.png\" alt=\"Tranquilpeak主題\"></p>\n<ul>\n<li>Oliver主題</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/Oliver%E4%B8%BB%E9%A1%8C.png\" alt=\"Oliver主題\"></p>\n<p><a id=\"PortInUse\"></a></p>\n<h2 id=\"hexo-s故障排除\"><a href=\"#hexo-s故障排除\" class=\"headerlink\" title=\"hexo s故障排除\"></a>hexo s故障排除</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007039/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-2/port%E8%99%9F%E5%8D%A0%E7%94%A8.png\" alt=\"port號佔用\"></p>\n<ul>\n<li><p>這代表port號被占用了</p>\n</li>\n<li><p>可以試著改用以下方式讓使用的port號改變</p>\n</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -p 6000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>今天也好好的邁出第二步了，看到屬於自己的畫面，希望能夠幫助所有喜歡部落格的我跟你。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件</a></p>\n"},{"title":"建立自己的部落格(3)：修改Hexo設定檔中Site，查看其變化","date":"2023-10-18T12:50:31.000Z","description":"今天的你跟我都是部落格工程師，我們一起來將網頁做一些小小的改變，有一天匯集在一起就會讓你的部落格變的與眾不同。","_content":"![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 查看Hexo設定檔\n\n![Hexo資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用記事本打開的情況(看起來就很不容易修改吧.....)\n\n![記事本打開](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E8%A8%98%E4%BA%8B%E6%9C%AC%E6%89%93%E9%96%8B%E8%A8%AD%E5%AE%9A%E6%AA%94.png)\n\n- 這時候需要搬出編輯器工具美化它\n\n---\n\n## 編譯器工具推薦\n\n### 推薦工具1-Vscode\n\n- <strong><code>[官方下載連結請點我](https://code.visualstudio.com/download)</code></strong>\n\n![Vscode官方下載圖片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png)\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n![Vscode打開資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用Vscode編譯器將資料夾打開吧(File -> Open Folder)\n\n![Vscode資料夾檢視畫面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007047/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E8%B3%87%E6%96%99%E5%A4%BE%E6%AA%A2%E8%A6%96%E7%95%AB%E9%9D%A2.png)\n\n- 左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)\n- 登登登登~看起來五顏六色的漂亮多了吧，這樣好編譯多了(加上#就變成綠色的註解寫法)\n\n### 推薦工具2-Sublime Text\n\n- <strong><code>[官方下載連結請點我](https://www.sublimetext.com/download)</code></strong>\n\n![Subline官方下載圖片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png)\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n![Subline打開資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用Subline編譯器將資料夾打開吧(File -> Open Folder)\n\n![Subline資料夾畫面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E8%B3%87%E6%96%99%E5%A4%BE%E7%95%AB%E9%9D%A2.png)\n\n- 左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)\n- 質感不太一樣，有些人更喜歡這種感覺(加上#就變成灰色的註解寫法)\n\n兩者當然有各自優缺點，且均有免費的版本可以使用，只是Subline免費版本會很偶爾的跳出來問你要不要購買，就看大家的喜好挑選囉。\n\n---\n\n## 認識Hexo設定檔的第一步\n\n- 打開資料夾下的<strong><code>_config.yml</code></strong>檔案\n- 認識第一區塊的設計目的\n\n![Hexo Site設定](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E8%A8%AD%E5%AE%9A.png)\n\n- 先試著使用剛剛說的#註解說明文字幫助自己更加了解這些參數特性吧!\n\n![Hexo Site備註](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E5%82%99%E8%A8%BB.png)\n\n- title：網站標題\n- subtitle：網站副標題\n- description：網站描述(SEO優化相關)\n- keywords：網站的關鍵字(SEO優化相關)\n- author：網站作者的名字\n- language：網站使用的語系(會跟顯示內容相關)\n- timezone：網站使用的時區(預設電腦系統的時區)\n\n## 調整根目錄下_config.yml的Site參數\n\n- 複製以下的內容更換原先的Site參數\n\n```text\ntitle: Tech Explorer's Diary #網站標題\nsubtitle: 'Journey through the world of technology' #網站副標題\ndescription: 'A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.' #網站描述(SEO優化相關)\nkeywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)\nauthor: John Doe #網站作者的名字\nlanguage: en #網站使用的語系(會跟顯示內容相關)\ntimezone: '' #網站使用的時區(預設電腦系統的時區)\n```\n\n- 打開cmd介面輸入以下指令編譯並生成對應靜態網站\n<strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong>\n\n```text\nhexo g\n```\n\n- 打開cmd介面輸入以下指令啟動本地服務器預覽修改的畫面\n<strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong>\n\n```text\nhexo s\n```\n\n## 調整Site參數-title、subtitle成果展示\n\n- 根據模板(Theme)的不同，顯示的位置會有些此不同。\n\n- title、subtitle\n![Hexo title&subtitle修改成果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007044/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20title%20and%20subtitle%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png)\n\n- author\n![Hexo author修改成果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20author%20%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png)\n\n- description(因為預設版面沒有顯示這部分改以我的版面進行說明)\n![Antonio Hexo版面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Antonio%20Hexo%E7%89%88%E9%9D%A2.png)\n\n- 這部分關於網站的敘述也會在搜尋時被大家看到喔!!!\n![網站Google搜尋結果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E7%B6%B2%E7%AB%99Google%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C.png)\n\n## 調整Site參數-language成果展示\n\n- 試著將language的參數從en(英文)修改成zh-TW(中文)\n\n```text\ntitle: Tech Explorer's Diary #網站標題\nsubtitle: 'Journey through the world of technology' #網站副標題\ndescription: 'A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.' #網站描述(SEO優化相關)\nkeywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)\nauthor: John Doe #網站作者的名字\nlanguage: zh-TW #網站使用的語系(會跟顯示內容相關)\ntimezone: '' #網站使用的時區(預設電腦系統的時區)\n```\n\n- 別忘了編譯網站指令跟啟動本地服務器預覽指令\n(只要有調整設定檔案建議都要重新編譯過比較保險)\n\n```text\nhexo g\n```\n\n```text\nhexo s\n```\n\n![Hexo 語系變更中文](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20%E8%AA%9E%E7%B3%BB%E8%AE%8A%E6%9B%B4%E4%B8%AD%E6%96%87.png)\n\n- 剛剛右邊區塊的英文都變成中文\n\n## 結尾\n\n雖然今天只有做出小小的改變，但每個部落格都是從小地方開始慢慢修改成自己喜歡的模樣。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件-配置](https://hexo.io/zh-tw/docs/)\n","source":"_posts/2023-10-18-hexo-github-3.md","raw":"---\ntitle: 建立自己的部落格(3)：修改Hexo設定檔中Site，查看其變化\ndate: 2023-10-18 20:50:31\ntags:\n- [Hexo]\ncategories:\n- [Blog]\ndescription: 今天的你跟我都是部落格工程師，我們一起來將網頁做一些小小的改變，有一天匯集在一起就會讓你的部落格變的與眾不同。\n---\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 查看Hexo設定檔\n\n![Hexo資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用記事本打開的情況(看起來就很不容易修改吧.....)\n\n![記事本打開](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E8%A8%98%E4%BA%8B%E6%9C%AC%E6%89%93%E9%96%8B%E8%A8%AD%E5%AE%9A%E6%AA%94.png)\n\n- 這時候需要搬出編輯器工具美化它\n\n---\n\n## 編譯器工具推薦\n\n### 推薦工具1-Vscode\n\n- <strong><code>[官方下載連結請點我](https://code.visualstudio.com/download)</code></strong>\n\n![Vscode官方下載圖片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png)\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n![Vscode打開資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用Vscode編譯器將資料夾打開吧(File -> Open Folder)\n\n![Vscode資料夾檢視畫面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007047/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E8%B3%87%E6%96%99%E5%A4%BE%E6%AA%A2%E8%A6%96%E7%95%AB%E9%9D%A2.png)\n\n- 左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)\n- 登登登登~看起來五顏六色的漂亮多了吧，這樣好編譯多了(加上#就變成綠色的註解寫法)\n\n### 推薦工具2-Sublime Text\n\n- <strong><code>[官方下載連結請點我](https://www.sublimetext.com/download)</code></strong>\n\n![Subline官方下載圖片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png)\n\n- 安裝上都按照預設點選下一步直至完成即可\n\n![Subline打開資料夾](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png)\n\n- 使用Subline編譯器將資料夾打開吧(File -> Open Folder)\n\n![Subline資料夾畫面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E8%B3%87%E6%96%99%E5%A4%BE%E7%95%AB%E9%9D%A2.png)\n\n- 左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)\n- 質感不太一樣，有些人更喜歡這種感覺(加上#就變成灰色的註解寫法)\n\n兩者當然有各自優缺點，且均有免費的版本可以使用，只是Subline免費版本會很偶爾的跳出來問你要不要購買，就看大家的喜好挑選囉。\n\n---\n\n## 認識Hexo設定檔的第一步\n\n- 打開資料夾下的<strong><code>_config.yml</code></strong>檔案\n- 認識第一區塊的設計目的\n\n![Hexo Site設定](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E8%A8%AD%E5%AE%9A.png)\n\n- 先試著使用剛剛說的#註解說明文字幫助自己更加了解這些參數特性吧!\n\n![Hexo Site備註](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E5%82%99%E8%A8%BB.png)\n\n- title：網站標題\n- subtitle：網站副標題\n- description：網站描述(SEO優化相關)\n- keywords：網站的關鍵字(SEO優化相關)\n- author：網站作者的名字\n- language：網站使用的語系(會跟顯示內容相關)\n- timezone：網站使用的時區(預設電腦系統的時區)\n\n## 調整根目錄下_config.yml的Site參數\n\n- 複製以下的內容更換原先的Site參數\n\n```text\ntitle: Tech Explorer's Diary #網站標題\nsubtitle: 'Journey through the world of technology' #網站副標題\ndescription: 'A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.' #網站描述(SEO優化相關)\nkeywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)\nauthor: John Doe #網站作者的名字\nlanguage: en #網站使用的語系(會跟顯示內容相關)\ntimezone: '' #網站使用的時區(預設電腦系統的時區)\n```\n\n- 打開cmd介面輸入以下指令編譯並生成對應靜態網站\n<strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong>\n\n```text\nhexo g\n```\n\n- 打開cmd介面輸入以下指令啟動本地服務器預覽修改的畫面\n<strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong>\n\n```text\nhexo s\n```\n\n## 調整Site參數-title、subtitle成果展示\n\n- 根據模板(Theme)的不同，顯示的位置會有些此不同。\n\n- title、subtitle\n![Hexo title&subtitle修改成果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007044/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20title%20and%20subtitle%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png)\n\n- author\n![Hexo author修改成果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20author%20%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png)\n\n- description(因為預設版面沒有顯示這部分改以我的版面進行說明)\n![Antonio Hexo版面](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Antonio%20Hexo%E7%89%88%E9%9D%A2.png)\n\n- 這部分關於網站的敘述也會在搜尋時被大家看到喔!!!\n![網站Google搜尋結果](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E7%B6%B2%E7%AB%99Google%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C.png)\n\n## 調整Site參數-language成果展示\n\n- 試著將language的參數從en(英文)修改成zh-TW(中文)\n\n```text\ntitle: Tech Explorer's Diary #網站標題\nsubtitle: 'Journey through the world of technology' #網站副標題\ndescription: 'A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.' #網站描述(SEO優化相關)\nkeywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)\nauthor: John Doe #網站作者的名字\nlanguage: zh-TW #網站使用的語系(會跟顯示內容相關)\ntimezone: '' #網站使用的時區(預設電腦系統的時區)\n```\n\n- 別忘了編譯網站指令跟啟動本地服務器預覽指令\n(只要有調整設定檔案建議都要重新編譯過比較保險)\n\n```text\nhexo g\n```\n\n```text\nhexo s\n```\n\n![Hexo 語系變更中文](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20%E8%AA%9E%E7%B3%BB%E8%AE%8A%E6%9B%B4%E4%B8%AD%E6%96%87.png)\n\n- 剛剛右邊區塊的英文都變成中文\n\n## 結尾\n\n雖然今天只有做出小小的改變，但每個部落格都是從小地方開始慢慢修改成自己喜歡的模樣。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件-配置](https://hexo.io/zh-tw/docs/)\n","slug":"hexo-github-3","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3p000648z12a3979ar","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"查看Hexo設定檔\"><a href=\"#查看Hexo設定檔\" class=\"headerlink\" title=\"查看Hexo設定檔\"></a>查看Hexo設定檔</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Hexo資料夾\"></p>\n<ul>\n<li>使用記事本打開的情況(看起來就很不容易修改吧…..)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E8%A8%98%E4%BA%8B%E6%9C%AC%E6%89%93%E9%96%8B%E8%A8%AD%E5%AE%9A%E6%AA%94.png\" alt=\"記事本打開\"></p>\n<ul>\n<li>這時候需要搬出編輯器工具美化它</li>\n</ul>\n<hr>\n<h2 id=\"編譯器工具推薦\"><a href=\"#編譯器工具推薦\" class=\"headerlink\" title=\"編譯器工具推薦\"></a>編譯器工具推薦</h2><h3 id=\"推薦工具1-Vscode\"><a href=\"#推薦工具1-Vscode\" class=\"headerlink\" title=\"推薦工具1-Vscode\"></a>推薦工具1-Vscode</h3><ul>\n<li><strong><code><a href=\"https://code.visualstudio.com/download\">官方下載連結請點我</a></code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png\" alt=\"Vscode官方下載圖片\"></p>\n<ul>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Vscode打開資料夾\"></p>\n<ul>\n<li>使用Vscode編譯器將資料夾打開吧(File -&gt; Open Folder)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007047/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E8%B3%87%E6%96%99%E5%A4%BE%E6%AA%A2%E8%A6%96%E7%95%AB%E9%9D%A2.png\" alt=\"Vscode資料夾檢視畫面\"></p>\n<ul>\n<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>\n<li>登登登登~看起來五顏六色的漂亮多了吧，這樣好編譯多了(加上#就變成綠色的註解寫法)</li>\n</ul>\n<h3 id=\"推薦工具2-Sublime-Text\"><a href=\"#推薦工具2-Sublime-Text\" class=\"headerlink\" title=\"推薦工具2-Sublime Text\"></a>推薦工具2-Sublime Text</h3><ul>\n<li><strong><code><a href=\"https://www.sublimetext.com/download\">官方下載連結請點我</a></code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png\" alt=\"Subline官方下載圖片\"></p>\n<ul>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Subline打開資料夾\"></p>\n<ul>\n<li>使用Subline編譯器將資料夾打開吧(File -&gt; Open Folder)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E8%B3%87%E6%96%99%E5%A4%BE%E7%95%AB%E9%9D%A2.png\" alt=\"Subline資料夾畫面\"></p>\n<ul>\n<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>\n<li>質感不太一樣，有些人更喜歡這種感覺(加上#就變成灰色的註解寫法)</li>\n</ul>\n<p>兩者當然有各自優缺點，且均有免費的版本可以使用，只是Subline免費版本會很偶爾的跳出來問你要不要購買，就看大家的喜好挑選囉。</p>\n<hr>\n<h2 id=\"認識Hexo設定檔的第一步\"><a href=\"#認識Hexo設定檔的第一步\" class=\"headerlink\" title=\"認識Hexo設定檔的第一步\"></a>認識Hexo設定檔的第一步</h2><ul>\n<li>打開資料夾下的<strong><code>_config.yml</code></strong>檔案</li>\n<li>認識第一區塊的設計目的</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E8%A8%AD%E5%AE%9A.png\" alt=\"Hexo Site設定\"></p>\n<ul>\n<li>先試著使用剛剛說的#註解說明文字幫助自己更加了解這些參數特性吧!</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E5%82%99%E8%A8%BB.png\" alt=\"Hexo Site備註\"></p>\n<ul>\n<li>title：網站標題</li>\n<li>subtitle：網站副標題</li>\n<li>description：網站描述(SEO優化相關)</li>\n<li>keywords：網站的關鍵字(SEO優化相關)</li>\n<li>author：網站作者的名字</li>\n<li>language：網站使用的語系(會跟顯示內容相關)</li>\n<li>timezone：網站使用的時區(預設電腦系統的時區)</li>\n</ul>\n<h2 id=\"調整根目錄下-config-yml的Site參數\"><a href=\"#調整根目錄下-config-yml的Site參數\" class=\"headerlink\" title=\"調整根目錄下_config.yml的Site參數\"></a>調整根目錄下_config.yml的Site參數</h2><ul>\n<li>複製以下的內容更換原先的Site參數</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class=\"line\">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class=\"line\">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class=\"line\">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class=\"line\">author: John Doe #網站作者的名字</span><br><span class=\"line\">language: en #網站使用的語系(會跟顯示內容相關)</span><br><span class=\"line\">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開cmd介面輸入以下指令編譯並生成對應靜態網站<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開cmd介面輸入以下指令啟動本地服務器預覽修改的畫面<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"調整Site參數-title、subtitle成果展示\"><a href=\"#調整Site參數-title、subtitle成果展示\" class=\"headerlink\" title=\"調整Site參數-title、subtitle成果展示\"></a>調整Site參數-title、subtitle成果展示</h2><ul>\n<li><p>根據模板(Theme)的不同，顯示的位置會有些此不同。</p>\n</li>\n<li><p>title、subtitle<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007044/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20title%20and%20subtitle%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png\" alt=\"Hexo title&amp;subtitle修改成果\"></p>\n</li>\n<li><p>author<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20author%20%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png\" alt=\"Hexo author修改成果\"></p>\n</li>\n<li><p>description(因為預設版面沒有顯示這部分改以我的版面進行說明)<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Antonio%20Hexo%E7%89%88%E9%9D%A2.png\" alt=\"Antonio Hexo版面\"></p>\n</li>\n<li><p>這部分關於網站的敘述也會在搜尋時被大家看到喔!!!<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E7%B6%B2%E7%AB%99Google%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C.png\" alt=\"網站Google搜尋結果\"></p>\n</li>\n</ul>\n<h2 id=\"調整Site參數-language成果展示\"><a href=\"#調整Site參數-language成果展示\" class=\"headerlink\" title=\"調整Site參數-language成果展示\"></a>調整Site參數-language成果展示</h2><ul>\n<li>試著將language的參數從en(英文)修改成zh-TW(中文)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class=\"line\">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class=\"line\">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class=\"line\">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class=\"line\">author: John Doe #網站作者的名字</span><br><span class=\"line\">language: zh-TW #網站使用的語系(會跟顯示內容相關)</span><br><span class=\"line\">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>別忘了編譯網站指令跟啟動本地服務器預覽指令<br>(只要有調整設定檔案建議都要重新編譯過比較保險)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20%E8%AA%9E%E7%B3%BB%E8%AE%8A%E6%9B%B4%E4%B8%AD%E6%96%87.png\" alt=\"Hexo 語系變更中文\"></p>\n<ul>\n<li>剛剛右邊區塊的英文都變成中文</li>\n</ul>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>雖然今天只有做出小小的改變，但每個部落格都是從小地方開始慢慢修改成自己喜歡的模樣。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件-配置</a></p>\n","site":{"data":{}},"length":1895,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"查看Hexo設定檔\"><a href=\"#查看Hexo設定檔\" class=\"headerlink\" title=\"查看Hexo設定檔\"></a>查看Hexo設定檔</h2><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Hexo資料夾\"></p>\n<ul>\n<li>使用記事本打開的情況(看起來就很不容易修改吧…..)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007041/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E8%A8%98%E4%BA%8B%E6%9C%AC%E6%89%93%E9%96%8B%E8%A8%AD%E5%AE%9A%E6%AA%94.png\" alt=\"記事本打開\"></p>\n<ul>\n<li>這時候需要搬出編輯器工具美化它</li>\n</ul>\n<hr>\n<h2 id=\"編譯器工具推薦\"><a href=\"#編譯器工具推薦\" class=\"headerlink\" title=\"編譯器工具推薦\"></a>編譯器工具推薦</h2><h3 id=\"推薦工具1-Vscode\"><a href=\"#推薦工具1-Vscode\" class=\"headerlink\" title=\"推薦工具1-Vscode\"></a>推薦工具1-Vscode</h3><ul>\n<li><strong><code><a href=\"https://code.visualstudio.com/download\">官方下載連結請點我</a></code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png\" alt=\"Vscode官方下載圖片\"></p>\n<ul>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Vscode打開資料夾\"></p>\n<ul>\n<li>使用Vscode編譯器將資料夾打開吧(File -&gt; Open Folder)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007047/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Vscode%E8%B3%87%E6%96%99%E5%A4%BE%E6%AA%A2%E8%A6%96%E7%95%AB%E9%9D%A2.png\" alt=\"Vscode資料夾檢視畫面\"></p>\n<ul>\n<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>\n<li>登登登登~看起來五顏六色的漂亮多了吧，這樣好編譯多了(加上#就變成綠色的註解寫法)</li>\n</ul>\n<h3 id=\"推薦工具2-Sublime-Text\"><a href=\"#推薦工具2-Sublime-Text\" class=\"headerlink\" title=\"推薦工具2-Sublime Text\"></a>推薦工具2-Sublime Text</h3><ul>\n<li><strong><code><a href=\"https://www.sublimetext.com/download\">官方下載連結請點我</a></code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BC%89%E5%9C%96%E7%89%87.png\" alt=\"Subline官方下載圖片\"></p>\n<ul>\n<li>安裝上都按照預設點選下一步直至完成即可</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007048/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E6%89%93%E9%96%8B%E8%B3%87%E6%96%99%E5%A4%BE.png\" alt=\"Subline打開資料夾\"></p>\n<ul>\n<li>使用Subline編譯器將資料夾打開吧(File -&gt; Open Folder)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Subline%E8%B3%87%E6%96%99%E5%A4%BE%E7%95%AB%E9%9D%A2.png\" alt=\"Subline資料夾畫面\"></p>\n<ul>\n<li>左邊是資料夾的結構樹狀圖(點擊即可查看該檔案)</li>\n<li>質感不太一樣，有些人更喜歡這種感覺(加上#就變成灰色的註解寫法)</li>\n</ul>\n<p>兩者當然有各自優缺點，且均有免費的版本可以使用，只是Subline免費版本會很偶爾的跳出來問你要不要購買，就看大家的喜好挑選囉。</p>\n<hr>\n<h2 id=\"認識Hexo設定檔的第一步\"><a href=\"#認識Hexo設定檔的第一步\" class=\"headerlink\" title=\"認識Hexo設定檔的第一步\"></a>認識Hexo設定檔的第一步</h2><ul>\n<li>打開資料夾下的<strong><code>_config.yml</code></strong>檔案</li>\n<li>認識第一區塊的設計目的</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E8%A8%AD%E5%AE%9A.png\" alt=\"Hexo Site設定\"></p>\n<ul>\n<li>先試著使用剛剛說的#註解說明文字幫助自己更加了解這些參數特性吧!</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20Site%E5%82%99%E8%A8%BB.png\" alt=\"Hexo Site備註\"></p>\n<ul>\n<li>title：網站標題</li>\n<li>subtitle：網站副標題</li>\n<li>description：網站描述(SEO優化相關)</li>\n<li>keywords：網站的關鍵字(SEO優化相關)</li>\n<li>author：網站作者的名字</li>\n<li>language：網站使用的語系(會跟顯示內容相關)</li>\n<li>timezone：網站使用的時區(預設電腦系統的時區)</li>\n</ul>\n<h2 id=\"調整根目錄下-config-yml的Site參數\"><a href=\"#調整根目錄下-config-yml的Site參數\" class=\"headerlink\" title=\"調整根目錄下_config.yml的Site參數\"></a>調整根目錄下_config.yml的Site參數</h2><ul>\n<li>複製以下的內容更換原先的Site參數</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class=\"line\">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class=\"line\">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class=\"line\">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class=\"line\">author: John Doe #網站作者的名字</span><br><span class=\"line\">language: en #網站使用的語系(會跟顯示內容相關)</span><br><span class=\"line\">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開cmd介面輸入以下指令編譯並生成對應靜態網站<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打開cmd介面輸入以下指令啟動本地服務器預覽修改的畫面<br><strong><code>(如果不知道cmd介面如何開啟請看Day2的介紹)</code></strong></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"調整Site參數-title、subtitle成果展示\"><a href=\"#調整Site參數-title、subtitle成果展示\" class=\"headerlink\" title=\"調整Site參數-title、subtitle成果展示\"></a>調整Site參數-title、subtitle成果展示</h2><ul>\n<li><p>根據模板(Theme)的不同，顯示的位置會有些此不同。</p>\n</li>\n<li><p>title、subtitle<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007044/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20title%20and%20subtitle%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png\" alt=\"Hexo title&amp;subtitle修改成果\"></p>\n</li>\n<li><p>author<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20author%20%E4%BF%AE%E6%94%B9%E6%88%90%E6%9E%9C.png\" alt=\"Hexo author修改成果\"></p>\n</li>\n<li><p>description(因為預設版面沒有顯示這部分改以我的版面進行說明)<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007046/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Antonio%20Hexo%E7%89%88%E9%9D%A2.png\" alt=\"Antonio Hexo版面\"></p>\n</li>\n<li><p>這部分關於網站的敘述也會在搜尋時被大家看到喔!!!<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007043/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/%E7%B6%B2%E7%AB%99Google%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C.png\" alt=\"網站Google搜尋結果\"></p>\n</li>\n</ul>\n<h2 id=\"調整Site參數-language成果展示\"><a href=\"#調整Site參數-language成果展示\" class=\"headerlink\" title=\"調整Site參數-language成果展示\"></a>調整Site參數-language成果展示</h2><ul>\n<li>試著將language的參數從en(英文)修改成zh-TW(中文)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Tech Explorer&#x27;s Diary #網站標題</span><br><span class=\"line\">subtitle: &#x27;Journey through the world of technology&#x27; #網站副標題</span><br><span class=\"line\">description: &#x27;A blog dedicated to exploring the latest trends, discoveries, and innovations in the tech world.&#x27; #網站描述(SEO優化相關)</span><br><span class=\"line\">keywords: technology, innovation, programming, software, hardware, reviews #網站的關鍵字(SEO優化相關)</span><br><span class=\"line\">author: John Doe #網站作者的名字</span><br><span class=\"line\">language: zh-TW #網站使用的語系(會跟顯示內容相關)</span><br><span class=\"line\">timezone: &#x27;&#x27; #網站使用的時區(預設電腦系統的時區)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>別忘了編譯網站指令跟啟動本地服務器預覽指令<br>(只要有調整設定檔案建議都要重新編譯過比較保險)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007045/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-3/Hexo%20%E8%AA%9E%E7%B3%BB%E8%AE%8A%E6%9B%B4%E4%B8%AD%E6%96%87.png\" alt=\"Hexo 語系變更中文\"></p>\n<ul>\n<li>剛剛右邊區塊的英文都變成中文</li>\n</ul>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>雖然今天只有做出小小的改變，但每個部落格都是從小地方開始慢慢修改成自己喜歡的模樣。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件-配置</a></p>\n"},{"title":"前端開發神器(1)：使用Emmet提升網頁開發效率","date":"2023-10-31T06:40:54.000Z","description":"本文將介紹如何利用Emmet來大幅提高前端開發效率，讓你的編碼速度如專家般飛快。","_content":"\n## Emmet是甚麼呢?\n\n這是一套文字編輯器的外掛程式，輔助用縮寫的編排方式提升編輯HTML、XML、XSL的速度。\n\n簡單來說就是前端的開發利器，大部分編譯器都已經內鍵安裝此套件了，學會使用能大大加速撰寫整體架構的速度(相見恨晚是不是!!!)。\n\n## 前置工作\n\n- 打開Vscode點選<strong><code>new File</code></strong>\n\n![Vscode打開new File](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/image-3_ohwpsn.png)\n\n- 輸入<strong><code>Test.html</code></strong>創立這個html檔案\n\n![Vscode創建html檔案](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/%E5%89%B5%E5%BB%BAhtml.png)\n\n- 檢查一下右下角是否是<strong><code>HTML</code></strong>，否則Emmet語法可能會沒有反應\n\n![Vscode確認右下角顯示HTML](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Vscode%E5%8F%B3%E4%B8%8B%E8%A7%92%E9%A1%AF%E7%A4%BAHTML.png)\n\n## 常用語法(我自己常用的語法QQ)\n\n<strong><code>以下所有的空白鍵(Enter)均能替換成Tab鍵(英文字母Q旁邊的Tab按鍵)</code></strong>\n\n### html檔案基本架構\n\n- 輸入! + Enter(有看到旁邊提示才能按空白鍵)\n\n![Emmet 輸入! + Enter](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E7%94%A2%E7%94%9FHTML%E5%BF%AB%E6%8D%B7%E9%8D%B5%28%21%20%2B%20%E7%A9%BA%E7%99%BD%E9%8D%B5%29.png)\n\n- 登登登登~快速產生了一個html\n\n![Emmet 快速產生html](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E7%9A%84HTML.png)\n\n---\n\n### HTML標籤(無Class)\n\n- 輸入標籤名稱 + Enter(有看到旁邊提示才能按空白鍵)\n- 以下範例圖片輸入h1 + Enter\n\n![Emmet HTML標籤](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9Fh1%E6%A8%99%E7%B1%A4%28h1%20%2B%20Enter%29.png)\n\n---\n\n### HTML標籤 + Class\n\n單單只是產生標籤那一定不夠，腦中可能已經將畫面各自命名了(Class)，那就要一次到位\n\n- 輸入標籤名稱 + . + class名稱 + Enter(有看到旁邊提示才能按空白鍵)\n有幾個Class就多幾組的 . + class名稱\n- 範例圖片使用 p + . + name + . + number(一次給他兩個Class名稱)\n\n![Emmet HTML標籤 + Class](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20HTML%E6%A8%99%E7%B1%A4%20%2B%20Class.png)\n\n- 順帶一提，如果沒有給標籤名稱會變成神麼樣子呢?\n- 登登登登答案就是div，也就是只有div可以省略標籤名稱\n\n![Emmet 無標籤 + Class](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20%E7%84%A1%E6%A8%99%E7%B1%A4%20%2B%20Class.png)\n\n---\n\n### HTML標籤 + Attribute\n\n標籤屬性也是HTML裡面很重要的一環，讓我們把這個也學起來\n\n- 輸入標籤名稱 + [屬性名稱:屬性值] + Enter(有看到旁邊提示才能按空白鍵)\n有幾個屬性就用空格分開\n- 範例圖片使用input[type=text name=姓名框]\n\n![Emmet HTML標籤 + Attribute](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/HTML%E6%A8%99%E7%B1%A4%20%2B%20Attribute.png)\n\n---\n\n### Class + Attribute一次滿足\n\n偷偷告訴你一個小技巧，Emmet語法可以混用喔!!!\n\n- 範例圖片使用input[type=text name=姓名框].UserInput\n\n![Emmet Class + Attribute一次滿足](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20Class%20%2B%20Attribute%E4%B8%80%E6%AC%A1%E6%BB%BF%E8%B6%B3.png)\n\n---\n\n## 結尾\n\n上面僅僅只是冰山一角呢，有時間會補齊自己常用的語法，如果你還是那麼想知道的話就告訴你吧。\n\n最完整的使用方法就在<a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a>(不要打我QQ)\n\n---\n\n## 參考資料\n\n[1] [Emmet維基百科](https://zh.wikipedia.org/wiki/Emmet)\n[2] [Emmet官方文件](https://docs.emmet.io/cheat-sheet/)\n","source":"_posts/2023-10-31-Emmet-1.md","raw":"---\ntitle: 前端開發神器(1)：使用Emmet提升網頁開發效率\ndate: 2023-10-31 14:40:54\ntags:\n- [Web Development Tool]\ncategories:\n- [Emmet]\ndescription: 本文將介紹如何利用Emmet來大幅提高前端開發效率，讓你的編碼速度如專家般飛快。\n---\n\n## Emmet是甚麼呢?\n\n這是一套文字編輯器的外掛程式，輔助用縮寫的編排方式提升編輯HTML、XML、XSL的速度。\n\n簡單來說就是前端的開發利器，大部分編譯器都已經內鍵安裝此套件了，學會使用能大大加速撰寫整體架構的速度(相見恨晚是不是!!!)。\n\n## 前置工作\n\n- 打開Vscode點選<strong><code>new File</code></strong>\n\n![Vscode打開new File](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/image-3_ohwpsn.png)\n\n- 輸入<strong><code>Test.html</code></strong>創立這個html檔案\n\n![Vscode創建html檔案](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/%E5%89%B5%E5%BB%BAhtml.png)\n\n- 檢查一下右下角是否是<strong><code>HTML</code></strong>，否則Emmet語法可能會沒有反應\n\n![Vscode確認右下角顯示HTML](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Vscode%E5%8F%B3%E4%B8%8B%E8%A7%92%E9%A1%AF%E7%A4%BAHTML.png)\n\n## 常用語法(我自己常用的語法QQ)\n\n<strong><code>以下所有的空白鍵(Enter)均能替換成Tab鍵(英文字母Q旁邊的Tab按鍵)</code></strong>\n\n### html檔案基本架構\n\n- 輸入! + Enter(有看到旁邊提示才能按空白鍵)\n\n![Emmet 輸入! + Enter](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E7%94%A2%E7%94%9FHTML%E5%BF%AB%E6%8D%B7%E9%8D%B5%28%21%20%2B%20%E7%A9%BA%E7%99%BD%E9%8D%B5%29.png)\n\n- 登登登登~快速產生了一個html\n\n![Emmet 快速產生html](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E7%9A%84HTML.png)\n\n---\n\n### HTML標籤(無Class)\n\n- 輸入標籤名稱 + Enter(有看到旁邊提示才能按空白鍵)\n- 以下範例圖片輸入h1 + Enter\n\n![Emmet HTML標籤](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9Fh1%E6%A8%99%E7%B1%A4%28h1%20%2B%20Enter%29.png)\n\n---\n\n### HTML標籤 + Class\n\n單單只是產生標籤那一定不夠，腦中可能已經將畫面各自命名了(Class)，那就要一次到位\n\n- 輸入標籤名稱 + . + class名稱 + Enter(有看到旁邊提示才能按空白鍵)\n有幾個Class就多幾組的 . + class名稱\n- 範例圖片使用 p + . + name + . + number(一次給他兩個Class名稱)\n\n![Emmet HTML標籤 + Class](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20HTML%E6%A8%99%E7%B1%A4%20%2B%20Class.png)\n\n- 順帶一提，如果沒有給標籤名稱會變成神麼樣子呢?\n- 登登登登答案就是div，也就是只有div可以省略標籤名稱\n\n![Emmet 無標籤 + Class](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20%E7%84%A1%E6%A8%99%E7%B1%A4%20%2B%20Class.png)\n\n---\n\n### HTML標籤 + Attribute\n\n標籤屬性也是HTML裡面很重要的一環，讓我們把這個也學起來\n\n- 輸入標籤名稱 + [屬性名稱:屬性值] + Enter(有看到旁邊提示才能按空白鍵)\n有幾個屬性就用空格分開\n- 範例圖片使用input[type=text name=姓名框]\n\n![Emmet HTML標籤 + Attribute](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/HTML%E6%A8%99%E7%B1%A4%20%2B%20Attribute.png)\n\n---\n\n### Class + Attribute一次滿足\n\n偷偷告訴你一個小技巧，Emmet語法可以混用喔!!!\n\n- 範例圖片使用input[type=text name=姓名框].UserInput\n\n![Emmet Class + Attribute一次滿足](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20Class%20%2B%20Attribute%E4%B8%80%E6%AC%A1%E6%BB%BF%E8%B6%B3.png)\n\n---\n\n## 結尾\n\n上面僅僅只是冰山一角呢，有時間會補齊自己常用的語法，如果你還是那麼想知道的話就告訴你吧。\n\n最完整的使用方法就在<a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a>(不要打我QQ)\n\n---\n\n## 參考資料\n\n[1] [Emmet維基百科](https://zh.wikipedia.org/wiki/Emmet)\n[2] [Emmet官方文件](https://docs.emmet.io/cheat-sheet/)\n","slug":"Emmet-1","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3p000948z16atk7lex","content":"<h2 id=\"Emmet是甚麼呢\"><a href=\"#Emmet是甚麼呢\" class=\"headerlink\" title=\"Emmet是甚麼呢?\"></a>Emmet是甚麼呢?</h2><p>這是一套文字編輯器的外掛程式，輔助用縮寫的編排方式提升編輯HTML、XML、XSL的速度。</p>\n<p>簡單來說就是前端的開發利器，大部分編譯器都已經內鍵安裝此套件了，學會使用能大大加速撰寫整體架構的速度(相見恨晚是不是!!!)。</p>\n<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><ul>\n<li>打開Vscode點選<strong><code>new File</code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/image-3_ohwpsn.png\" alt=\"Vscode打開new File\"></p>\n<ul>\n<li>輸入<strong><code>Test.html</code></strong>創立這個html檔案</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/%E5%89%B5%E5%BB%BAhtml.png\" alt=\"Vscode創建html檔案\"></p>\n<ul>\n<li>檢查一下右下角是否是<strong><code>HTML</code></strong>，否則Emmet語法可能會沒有反應</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Vscode%E5%8F%B3%E4%B8%8B%E8%A7%92%E9%A1%AF%E7%A4%BAHTML.png\" alt=\"Vscode確認右下角顯示HTML\"></p>\n<h2 id=\"常用語法-我自己常用的語法QQ\"><a href=\"#常用語法-我自己常用的語法QQ\" class=\"headerlink\" title=\"常用語法(我自己常用的語法QQ)\"></a>常用語法(我自己常用的語法QQ)</h2><p><strong><code>以下所有的空白鍵(Enter)均能替換成Tab鍵(英文字母Q旁邊的Tab按鍵)</code></strong></p>\n<h3 id=\"html檔案基本架構\"><a href=\"#html檔案基本架構\" class=\"headerlink\" title=\"html檔案基本架構\"></a>html檔案基本架構</h3><ul>\n<li>輸入! + Enter(有看到旁邊提示才能按空白鍵)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E7%94%A2%E7%94%9FHTML%E5%BF%AB%E6%8D%B7%E9%8D%B5%28%21%20%2B%20%E7%A9%BA%E7%99%BD%E9%8D%B5%29.png\" alt=\"Emmet 輸入! + Enter\"></p>\n<ul>\n<li>登登登登~快速產生了一個html</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E7%9A%84HTML.png\" alt=\"Emmet 快速產生html\"></p>\n<hr>\n<h3 id=\"HTML標籤-無Class\"><a href=\"#HTML標籤-無Class\" class=\"headerlink\" title=\"HTML標籤(無Class)\"></a>HTML標籤(無Class)</h3><ul>\n<li>輸入標籤名稱 + Enter(有看到旁邊提示才能按空白鍵)</li>\n<li>以下範例圖片輸入h1 + Enter</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9Fh1%E6%A8%99%E7%B1%A4%28h1%20%2B%20Enter%29.png\" alt=\"Emmet HTML標籤\"></p>\n<hr>\n<h3 id=\"HTML標籤-Class\"><a href=\"#HTML標籤-Class\" class=\"headerlink\" title=\"HTML標籤 + Class\"></a>HTML標籤 + Class</h3><p>單單只是產生標籤那一定不夠，腦中可能已經將畫面各自命名了(Class)，那就要一次到位</p>\n<ul>\n<li>輸入標籤名稱 + . + class名稱 + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個Class就多幾組的 . + class名稱</li>\n<li>範例圖片使用 p + . + name + . + number(一次給他兩個Class名稱)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20HTML%E6%A8%99%E7%B1%A4%20%2B%20Class.png\" alt=\"Emmet HTML標籤 + Class\"></p>\n<ul>\n<li>順帶一提，如果沒有給標籤名稱會變成神麼樣子呢?</li>\n<li>登登登登答案就是div，也就是只有div可以省略標籤名稱</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20%E7%84%A1%E6%A8%99%E7%B1%A4%20%2B%20Class.png\" alt=\"Emmet 無標籤 + Class\"></p>\n<hr>\n<h3 id=\"HTML標籤-Attribute\"><a href=\"#HTML標籤-Attribute\" class=\"headerlink\" title=\"HTML標籤 + Attribute\"></a>HTML標籤 + Attribute</h3><p>標籤屬性也是HTML裡面很重要的一環，讓我們把這個也學起來</p>\n<ul>\n<li>輸入標籤名稱 + [屬性名稱:屬性值] + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個屬性就用空格分開</li>\n<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框]</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/HTML%E6%A8%99%E7%B1%A4%20%2B%20Attribute.png\" alt=\"Emmet HTML標籤 + Attribute\"></p>\n<hr>\n<h3 id=\"Class-Attribute一次滿足\"><a href=\"#Class-Attribute一次滿足\" class=\"headerlink\" title=\"Class + Attribute一次滿足\"></a>Class + Attribute一次滿足</h3><p>偷偷告訴你一個小技巧，Emmet語法可以混用喔!!!</p>\n<ul>\n<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框].UserInput</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20Class%20%2B%20Attribute%E4%B8%80%E6%AC%A1%E6%BB%BF%E8%B6%B3.png\" alt=\"Emmet Class + Attribute一次滿足\"></p>\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>上面僅僅只是冰山一角呢，有時間會補齊自己常用的語法，如果你還是那麼想知道的話就告訴你吧。</p>\n<p>最完整的使用方法就在<a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a>(不要打我QQ)</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://zh.wikipedia.org/wiki/Emmet\">Emmet維基百科</a><br>[2] <a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a></p>\n","site":{"data":{}},"length":886,"excerpt":"","more":"<h2 id=\"Emmet是甚麼呢\"><a href=\"#Emmet是甚麼呢\" class=\"headerlink\" title=\"Emmet是甚麼呢?\"></a>Emmet是甚麼呢?</h2><p>這是一套文字編輯器的外掛程式，輔助用縮寫的編排方式提升編輯HTML、XML、XSL的速度。</p>\n<p>簡單來說就是前端的開發利器，大部分編譯器都已經內鍵安裝此套件了，學會使用能大大加速撰寫整體架構的速度(相見恨晚是不是!!!)。</p>\n<h2 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h2><ul>\n<li>打開Vscode點選<strong><code>new File</code></strong></li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/image-3_ohwpsn.png\" alt=\"Vscode打開new File\"></p>\n<ul>\n<li>輸入<strong><code>Test.html</code></strong>創立這個html檔案</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007038/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/%E5%89%B5%E5%BB%BAhtml.png\" alt=\"Vscode創建html檔案\"></p>\n<ul>\n<li>檢查一下右下角是否是<strong><code>HTML</code></strong>，否則Emmet語法可能會沒有反應</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007040/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Vscode%E5%8F%B3%E4%B8%8B%E8%A7%92%E9%A1%AF%E7%A4%BAHTML.png\" alt=\"Vscode確認右下角顯示HTML\"></p>\n<h2 id=\"常用語法-我自己常用的語法QQ\"><a href=\"#常用語法-我自己常用的語法QQ\" class=\"headerlink\" title=\"常用語法(我自己常用的語法QQ)\"></a>常用語法(我自己常用的語法QQ)</h2><p><strong><code>以下所有的空白鍵(Enter)均能替換成Tab鍵(英文字母Q旁邊的Tab按鍵)</code></strong></p>\n<h3 id=\"html檔案基本架構\"><a href=\"#html檔案基本架構\" class=\"headerlink\" title=\"html檔案基本架構\"></a>html檔案基本架構</h3><ul>\n<li>輸入! + Enter(有看到旁邊提示才能按空白鍵)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E7%94%A2%E7%94%9FHTML%E5%BF%AB%E6%8D%B7%E9%8D%B5%28%21%20%2B%20%E7%A9%BA%E7%99%BD%E9%8D%B5%29.png\" alt=\"Emmet 輸入! + Enter\"></p>\n<ul>\n<li>登登登登~快速產生了一個html</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007035/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9F%E7%9A%84HTML.png\" alt=\"Emmet 快速產生html\"></p>\n<hr>\n<h3 id=\"HTML標籤-無Class\"><a href=\"#HTML標籤-無Class\" class=\"headerlink\" title=\"HTML標籤(無Class)\"></a>HTML標籤(無Class)</h3><ul>\n<li>輸入標籤名稱 + Enter(有看到旁邊提示才能按空白鍵)</li>\n<li>以下範例圖片輸入h1 + Enter</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007036/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%E5%BF%AB%E9%80%9F%E7%94%A2%E7%94%9Fh1%E6%A8%99%E7%B1%A4%28h1%20%2B%20Enter%29.png\" alt=\"Emmet HTML標籤\"></p>\n<hr>\n<h3 id=\"HTML標籤-Class\"><a href=\"#HTML標籤-Class\" class=\"headerlink\" title=\"HTML標籤 + Class\"></a>HTML標籤 + Class</h3><p>單單只是產生標籤那一定不夠，腦中可能已經將畫面各自命名了(Class)，那就要一次到位</p>\n<ul>\n<li>輸入標籤名稱 + . + class名稱 + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個Class就多幾組的 . + class名稱</li>\n<li>範例圖片使用 p + . + name + . + number(一次給他兩個Class名稱)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20HTML%E6%A8%99%E7%B1%A4%20%2B%20Class.png\" alt=\"Emmet HTML標籤 + Class\"></p>\n<ul>\n<li>順帶一提，如果沒有給標籤名稱會變成神麼樣子呢?</li>\n<li>登登登登答案就是div，也就是只有div可以省略標籤名稱</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20%E7%84%A1%E6%A8%99%E7%B1%A4%20%2B%20Class.png\" alt=\"Emmet 無標籤 + Class\"></p>\n<hr>\n<h3 id=\"HTML標籤-Attribute\"><a href=\"#HTML標籤-Attribute\" class=\"headerlink\" title=\"HTML標籤 + Attribute\"></a>HTML標籤 + Attribute</h3><p>標籤屬性也是HTML裡面很重要的一環，讓我們把這個也學起來</p>\n<ul>\n<li>輸入標籤名稱 + [屬性名稱:屬性值] + Enter(有看到旁邊提示才能按空白鍵)<br>有幾個屬性就用空格分開</li>\n<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框]</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007033/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/HTML%E6%A8%99%E7%B1%A4%20%2B%20Attribute.png\" alt=\"Emmet HTML標籤 + Attribute\"></p>\n<hr>\n<h3 id=\"Class-Attribute一次滿足\"><a href=\"#Class-Attribute一次滿足\" class=\"headerlink\" title=\"Class + Attribute一次滿足\"></a>Class + Attribute一次滿足</h3><p>偷偷告訴你一個小技巧，Emmet語法可以混用喔!!!</p>\n<ul>\n<li>範例圖片使用input[type&#x3D;text name&#x3D;姓名框].UserInput</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007034/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/Emmet-1/Emmet%20Class%20%2B%20Attribute%E4%B8%80%E6%AC%A1%E6%BB%BF%E8%B6%B3.png\" alt=\"Emmet Class + Attribute一次滿足\"></p>\n<hr>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>上面僅僅只是冰山一角呢，有時間會補齊自己常用的語法，如果你還是那麼想知道的話就告訴你吧。</p>\n<p>最完整的使用方法就在<a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a>(不要打我QQ)</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://zh.wikipedia.org/wiki/Emmet\">Emmet維基百科</a><br>[2] <a href=\"https://docs.emmet.io/cheat-sheet/\">Emmet官方文件</a></p>\n"},{"title":"JavaScript(1)：淺談ES6常見縮寫","date":"2023-11-28T05:38:14.000Z","description":"JavaScript ES6縮寫技巧：輕鬆簡化程式碼，提升效率！。","_content":"\n<strong>ES6語法糖：不會影響運作，邏輯與當前 JS 一致</strong>\n\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 物件內的函式\n\n```javascript=\nconst obj = {\n  hello: function() {\n    return \"hello world\";\n  }\n}\nobj.hello()\n```\n\n顯示如下\n\n```javascript=\nhello world\n```\n\n### ES6縮寫(去除funtion)\n\n```javascript=\nconst obj = {\n  hello() {\n    return \"hello world\";\n  }\n}\nobj.hello()\n```\n\n顯示如下\n\n```javascript=\nhello world\n```\n\n---\n\n## 物件內變數\n\n```javascript=\nconst A = 100\nconst B = {\"A\": A}\n```\n\n顯示如下\n\n```javascript=\n{A:100}\n```\n\n### ES6縮寫(將同名變數僅寫一個)\n\n```javascript=\nconst A = 100\nconst C = {A}\n```\n\n顯示如下\n\n```json=\n{A:100}\n```\n\n- 這樣的效果跟原本{\"A\": A}一樣\n\n---\n\n## 物件展開-陣列相加\n\n```javascript=\nconst groupA = ['A', 'B', 'C'];\nconst groupB = ['D', 'E'];\nconst groupAll = groupA.concat(groupB);\n```\n\n顯示如下\n\n```text=\n['A', 'B', 'C', 'D', 'E']\n```\n\n### ES6陣列相加縮寫\n\n- 能夠透過...的方式代表陣列展開的形式\n\n```javascript=\nconst groupA = ['A', 'B', 'C'];\nconst groupB = ['D', 'E'];\nconst groupAll = [...groupA, ...groupB]\n```\n\n顯示如下\n\n```javascript=\n['A', 'B', 'C', 'D', 'E']\n```\n\n---\n\n### ES6物件展開\n\n- 新增一個物件包含新方法，同時加入原有的方法\n\n```javascript=\nconst methods = {\n  fn1() {\n    console.log(1);\n  },\n  fn2() {\n    console.log(2);\n  },\n}\n\nconst newmethod = {\n  test(){\n    console.log(\"test\")\n  },\n  ...methods\n}\nnewmethod.fn1()\n```\n","source":"_posts/2023-11-28-JS-1.md","raw":"---\ntitle: JavaScript(1)：淺談ES6常見縮寫\ndate: 2023-11-28 13:38:14\ntags:\n- [ES6]\ncategories:\n- [JavaScript]\ndescription: JavaScript ES6縮寫技巧：輕鬆簡化程式碼，提升效率！。\n---\n\n<strong>ES6語法糖：不會影響運作，邏輯與當前 JS 一致</strong>\n\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 物件內的函式\n\n```javascript=\nconst obj = {\n  hello: function() {\n    return \"hello world\";\n  }\n}\nobj.hello()\n```\n\n顯示如下\n\n```javascript=\nhello world\n```\n\n### ES6縮寫(去除funtion)\n\n```javascript=\nconst obj = {\n  hello() {\n    return \"hello world\";\n  }\n}\nobj.hello()\n```\n\n顯示如下\n\n```javascript=\nhello world\n```\n\n---\n\n## 物件內變數\n\n```javascript=\nconst A = 100\nconst B = {\"A\": A}\n```\n\n顯示如下\n\n```javascript=\n{A:100}\n```\n\n### ES6縮寫(將同名變數僅寫一個)\n\n```javascript=\nconst A = 100\nconst C = {A}\n```\n\n顯示如下\n\n```json=\n{A:100}\n```\n\n- 這樣的效果跟原本{\"A\": A}一樣\n\n---\n\n## 物件展開-陣列相加\n\n```javascript=\nconst groupA = ['A', 'B', 'C'];\nconst groupB = ['D', 'E'];\nconst groupAll = groupA.concat(groupB);\n```\n\n顯示如下\n\n```text=\n['A', 'B', 'C', 'D', 'E']\n```\n\n### ES6陣列相加縮寫\n\n- 能夠透過...的方式代表陣列展開的形式\n\n```javascript=\nconst groupA = ['A', 'B', 'C'];\nconst groupB = ['D', 'E'];\nconst groupAll = [...groupA, ...groupB]\n```\n\n顯示如下\n\n```javascript=\n['A', 'B', 'C', 'D', 'E']\n```\n\n---\n\n### ES6物件展開\n\n- 新增一個物件包含新方法，同時加入原有的方法\n\n```javascript=\nconst methods = {\n  fn1() {\n    console.log(1);\n  },\n  fn2() {\n    console.log(2);\n  },\n}\n\nconst newmethod = {\n  test(){\n    console.log(\"test\")\n  },\n  ...methods\n}\nnewmethod.fn1()\n```\n","slug":"JS-1","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3q000a48z14eoy5jnj","content":"<p><strong>ES6語法糖：不會影響運作，邏輯與當前 JS 一致</strong></p>\n<hr>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"物件內的函式\"><a href=\"#物件內的函式\" class=\"headerlink\" title=\"物件內的函式\"></a>物件內的函式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">hello</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">hello</span>()</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6縮寫-去除funtion\"><a href=\"#ES6縮寫-去除funtion\" class=\"headerlink\" title=\"ES6縮寫(去除funtion)\"></a>ES6縮寫(去除funtion)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">hello</span>()</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"物件內變數\"><a href=\"#物件內變數\" class=\"headerlink\" title=\"物件內變數\"></a>物件內變數</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> A = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> B = &#123;<span class=\"string\">&quot;A&quot;</span>: A&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">A</span>:<span class=\"number\">100</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6縮寫-將同名變數僅寫一個\"><a href=\"#ES6縮寫-將同名變數僅寫一個\" class=\"headerlink\" title=\"ES6縮寫(將同名變數僅寫一個)\"></a>ES6縮寫(將同名變數僅寫一個)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> A = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> C = &#123;A&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span>A<span class=\"punctuation\">:</span><span class=\"number\">100</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>這樣的效果跟原本{“A”: A}一樣</li>\n</ul>\n<hr>\n<h2 id=\"物件展開-陣列相加\"><a href=\"#物件展開-陣列相加\" class=\"headerlink\" title=\"物件展開-陣列相加\"></a>物件展開-陣列相加</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupA = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupB = [<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupAll = groupA.<span class=\"title function_\">concat</span>(groupB);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6陣列相加縮寫\"><a href=\"#ES6陣列相加縮寫\" class=\"headerlink\" title=\"ES6陣列相加縮寫\"></a>ES6陣列相加縮寫</h3><ul>\n<li>能夠透過…的方式代表陣列展開的形式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupA = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupB = [<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupAll = [...groupA, ...groupB]</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"ES6物件展開\"><a href=\"#ES6物件展開\" class=\"headerlink\" title=\"ES6物件展開\"></a>ES6物件展開</h3><ul>\n<li>新增一個物件包含新方法，同時加入原有的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> methods = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newmethod = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...methods</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">newmethod.<span class=\"title function_\">fn1</span>()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1118,"excerpt":"","more":"<p><strong>ES6語法糖：不會影響運作，邏輯與當前 JS 一致</strong></p>\n<hr>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"物件內的函式\"><a href=\"#物件內的函式\" class=\"headerlink\" title=\"物件內的函式\"></a>物件內的函式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">hello</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">hello</span>()</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6縮寫-去除funtion\"><a href=\"#ES6縮寫-去除funtion\" class=\"headerlink\" title=\"ES6縮寫(去除funtion)\"></a>ES6縮寫(去除funtion)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">hello</span>()</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"物件內變數\"><a href=\"#物件內變數\" class=\"headerlink\" title=\"物件內變數\"></a>物件內變數</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> A = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> B = &#123;<span class=\"string\">&quot;A&quot;</span>: A&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">A</span>:<span class=\"number\">100</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6縮寫-將同名變數僅寫一個\"><a href=\"#ES6縮寫-將同名變數僅寫一個\" class=\"headerlink\" title=\"ES6縮寫(將同名變數僅寫一個)\"></a>ES6縮寫(將同名變數僅寫一個)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> A = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> C = &#123;A&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span>A<span class=\"punctuation\">:</span><span class=\"number\">100</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>這樣的效果跟原本{“A”: A}一樣</li>\n</ul>\n<hr>\n<h2 id=\"物件展開-陣列相加\"><a href=\"#物件展開-陣列相加\" class=\"headerlink\" title=\"物件展開-陣列相加\"></a>物件展開-陣列相加</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupA = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupB = [<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupAll = groupA.<span class=\"title function_\">concat</span>(groupB);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6陣列相加縮寫\"><a href=\"#ES6陣列相加縮寫\" class=\"headerlink\" title=\"ES6陣列相加縮寫\"></a>ES6陣列相加縮寫</h3><ul>\n<li>能夠透過…的方式代表陣列展開的形式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> groupA = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupB = [<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> groupAll = [...groupA, ...groupB]</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"ES6物件展開\"><a href=\"#ES6物件展開\" class=\"headerlink\" title=\"ES6物件展開\"></a>ES6物件展開</h3><ul>\n<li>新增一個物件包含新方法，同時加入原有的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> methods = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newmethod = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...methods</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">newmethod.<span class=\"title function_\">fn1</span>()</span><br></pre></td></tr></table></figure>\n"},{"title":"建立自己的部落格(4)：了解Hexo指令，更換next部落格主題","date":"2023-10-20T06:33:38.000Z","description":"今天的你跟我都是Hexo指令指揮官，讓我們將部落格造型大改造一下吧!!!","_content":"![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## Hexo常用指令說明\n\n### hexo init 初始化資訊\n\n- 在當前路徑下建造hexo初始化的相關資訊\n(Day2使用過此指令，在一開始初始化並生成Hexo資訊的時候使用)\n\n```text\nhexo init\n```\n\n### hexo new title 生成文章\n\n- 創建一篇文章(<strong><code>`<title>`</code></strong>要記得替換成你想使用的文章名稱)\n- 創文章流程：\n  - 文章會根據<strong><code>./scaffolds</code></strong>路徑下的<strong><code>post.md</code></strong>模板生成文章格式\n  - 生成完的文章會在<strong><code>./source/_posts</code></strong>路徑下生成\n\n```text\nhexo new <title>\n```\n\n### hexo g 生成靜態檔案\n\n- 在./public的路徑下生成靜態檔案\n(會將文章的md檔案轉換成html的檔案)\n- g是generate的縮寫\n\n ```text\nhexo g\n```\n\n### hexo s 本地伺服器預覽畫面\n\n- 啟動本地伺服器\n(可以在自己電腦上預覽部落格樣式及文章內容)\n- s是server的縮寫\n\n ```text\nhexo s\n```\n\n### hexo d 部屬靜態檔案至上線環境\n\n- 部署public生成的靜態檔案至網站讓其他人也能看到你的文章\n- d是deploy的縮寫\n\n ```text\nhexo d\n```\n\n### hexo clean 清除快取資源及已生成的靜態檔案\n\n- 清除快取檔案<strong><code>db.json</code></strong>及<strong><code>./puclic</code></strong>路徑下已生成的靜態檔案\n\n ```text\nhexo clean\n```\n\n## 更換部落格主題\n\n這邊使用大家較常使用的版型Next，等等將會拉取以下檔案至本地喔\n<strong>[Next官方Github資料請點我查看](https://github.com/theme-next/hexo-theme-next)</strong>\n\n### 前置工作\n\n- Step 1:進去hexo init初始化的資料夾\n- Step 2:在資料夾路徑的部分輸入cmd打開當前路徑的命令提示字元\n\n---\n\n### 將next模板資料拉取至本地上\n\n- 輸入以下指令，將github的資料拉取至本機電腦上\n\n ```text\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n- 當安裝完成時，可以看到<strong><code>./themes</code></strong>路徑下多了<strong><code>next</code></strong>的資料夾，裡面已經有剛剛下載的模板資料了\n\n![Next安裝完成](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/Next%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.jpg)\n\n### 修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)\n\n![修改根目錄下的設定檔](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/%E4%BF%AE%E6%94%B9%E6%A0%B9%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94.png)\n\n- 看到theme: landscape的部分，我們要換掉，換成自己的模板next\n(請修改如下)\n\n ```text\ntheme: next\n```\n\n---\n\n### 查看next的模板新世界吧> <\n\n- 輸入以下指令\n\n ```text\nhexo s\n```\n\n- 透過瀏覽器查看當前部落格新造型\n(http://localhost:4000/)\n\n![next模板造型](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/next%E6%A8%A1%E6%9D%BF%E9%80%A0%E5%9E%8B.png)\n\n## 結尾\n\n看到新造型感覺越來越有樣子了吧!!!希望我們都能夠將部落格布置成每個人獨一無二的秘密基地。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件-指令](https://hexo.io/zh-tw/docs/)","source":"_posts/2023-10-20-hexo-github-4.md","raw":"---\ntitle: 建立自己的部落格(4)：了解Hexo指令，更換next部落格主題\ndate: 2023-10-20 14:33:38\ntags:\n- [Hexo]\ncategories:\n- [Blog]\ndescription: 今天的你跟我都是Hexo指令指揮官，讓我們將部落格造型大改造一下吧!!!\n---\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## Hexo常用指令說明\n\n### hexo init 初始化資訊\n\n- 在當前路徑下建造hexo初始化的相關資訊\n(Day2使用過此指令，在一開始初始化並生成Hexo資訊的時候使用)\n\n```text\nhexo init\n```\n\n### hexo new title 生成文章\n\n- 創建一篇文章(<strong><code>`<title>`</code></strong>要記得替換成你想使用的文章名稱)\n- 創文章流程：\n  - 文章會根據<strong><code>./scaffolds</code></strong>路徑下的<strong><code>post.md</code></strong>模板生成文章格式\n  - 生成完的文章會在<strong><code>./source/_posts</code></strong>路徑下生成\n\n```text\nhexo new <title>\n```\n\n### hexo g 生成靜態檔案\n\n- 在./public的路徑下生成靜態檔案\n(會將文章的md檔案轉換成html的檔案)\n- g是generate的縮寫\n\n ```text\nhexo g\n```\n\n### hexo s 本地伺服器預覽畫面\n\n- 啟動本地伺服器\n(可以在自己電腦上預覽部落格樣式及文章內容)\n- s是server的縮寫\n\n ```text\nhexo s\n```\n\n### hexo d 部屬靜態檔案至上線環境\n\n- 部署public生成的靜態檔案至網站讓其他人也能看到你的文章\n- d是deploy的縮寫\n\n ```text\nhexo d\n```\n\n### hexo clean 清除快取資源及已生成的靜態檔案\n\n- 清除快取檔案<strong><code>db.json</code></strong>及<strong><code>./puclic</code></strong>路徑下已生成的靜態檔案\n\n ```text\nhexo clean\n```\n\n## 更換部落格主題\n\n這邊使用大家較常使用的版型Next，等等將會拉取以下檔案至本地喔\n<strong>[Next官方Github資料請點我查看](https://github.com/theme-next/hexo-theme-next)</strong>\n\n### 前置工作\n\n- Step 1:進去hexo init初始化的資料夾\n- Step 2:在資料夾路徑的部分輸入cmd打開當前路徑的命令提示字元\n\n---\n\n### 將next模板資料拉取至本地上\n\n- 輸入以下指令，將github的資料拉取至本機電腦上\n\n ```text\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n- 當安裝完成時，可以看到<strong><code>./themes</code></strong>路徑下多了<strong><code>next</code></strong>的資料夾，裡面已經有剛剛下載的模板資料了\n\n![Next安裝完成](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/Next%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.jpg)\n\n### 修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)\n\n![修改根目錄下的設定檔](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/%E4%BF%AE%E6%94%B9%E6%A0%B9%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94.png)\n\n- 看到theme: landscape的部分，我們要換掉，換成自己的模板next\n(請修改如下)\n\n ```text\ntheme: next\n```\n\n---\n\n### 查看next的模板新世界吧> <\n\n- 輸入以下指令\n\n ```text\nhexo s\n```\n\n- 透過瀏覽器查看當前部落格新造型\n(http://localhost:4000/)\n\n![next模板造型](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/next%E6%A8%A1%E6%9D%BF%E9%80%A0%E5%9E%8B.png)\n\n## 結尾\n\n看到新造型感覺越來越有樣子了吧!!!希望我們都能夠將部落格布置成每個人獨一無二的秘密基地。\n\n---\n\n## 參考資料\n\n[1] [Hexo官方文件-指令](https://hexo.io/zh-tw/docs/)","slug":"hexo-github-4","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3q000e48z1e5282zyj","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Hexo常用指令說明\"><a href=\"#Hexo常用指令說明\" class=\"headerlink\" title=\"Hexo常用指令說明\"></a>Hexo常用指令說明</h2><h3 id=\"hexo-init-初始化資訊\"><a href=\"#hexo-init-初始化資訊\" class=\"headerlink\" title=\"hexo init 初始化資訊\"></a>hexo init 初始化資訊</h3><ul>\n<li>在當前路徑下建造hexo初始化的相關資訊<br>(Day2使用過此指令，在一開始初始化並生成Hexo資訊的時候使用)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-new-title-生成文章\"><a href=\"#hexo-new-title-生成文章\" class=\"headerlink\" title=\"hexo new title 生成文章\"></a>hexo new title 生成文章</h3><ul>\n<li>創建一篇文章(<strong><code><code>&lt;title&gt;</code></code></strong>要記得替換成你想使用的文章名稱)</li>\n<li>創文章流程：<ul>\n<li>文章會根據<strong><code>./scaffolds</code></strong>路徑下的<strong><code>post.md</code></strong>模板生成文章格式</li>\n<li>生成完的文章會在<strong><code>./source/_posts</code></strong>路徑下生成</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-g-生成靜態檔案\"><a href=\"#hexo-g-生成靜態檔案\" class=\"headerlink\" title=\"hexo g 生成靜態檔案\"></a>hexo g 生成靜態檔案</h3><ul>\n<li>在.&#x2F;public的路徑下生成靜態檔案<br>(會將文章的md檔案轉換成html的檔案)</li>\n<li>g是generate的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-s-本地伺服器預覽畫面\"><a href=\"#hexo-s-本地伺服器預覽畫面\" class=\"headerlink\" title=\"hexo s 本地伺服器預覽畫面\"></a>hexo s 本地伺服器預覽畫面</h3><ul>\n<li>啟動本地伺服器<br>(可以在自己電腦上預覽部落格樣式及文章內容)</li>\n<li>s是server的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-d-部屬靜態檔案至上線環境\"><a href=\"#hexo-d-部屬靜態檔案至上線環境\" class=\"headerlink\" title=\"hexo d 部屬靜態檔案至上線環境\"></a>hexo d 部屬靜態檔案至上線環境</h3><ul>\n<li>部署public生成的靜態檔案至網站讓其他人也能看到你的文章</li>\n<li>d是deploy的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-clean-清除快取資源及已生成的靜態檔案\"><a href=\"#hexo-clean-清除快取資源及已生成的靜態檔案\" class=\"headerlink\" title=\"hexo clean 清除快取資源及已生成的靜態檔案\"></a>hexo clean 清除快取資源及已生成的靜態檔案</h3><ul>\n<li>清除快取檔案<strong><code>db.json</code></strong>及<strong><code>./puclic</code></strong>路徑下已生成的靜態檔案</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更換部落格主題\"><a href=\"#更換部落格主題\" class=\"headerlink\" title=\"更換部落格主題\"></a>更換部落格主題</h2><p>這邊使用大家較常使用的版型Next，等等將會拉取以下檔案至本地喔<br><strong><a href=\"https://github.com/theme-next/hexo-theme-next\">Next官方Github資料請點我查看</a></strong></p>\n<h3 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h3><ul>\n<li>Step 1:進去hexo init初始化的資料夾</li>\n<li>Step 2:在資料夾路徑的部分輸入cmd打開當前路徑的命令提示字元</li>\n</ul>\n<hr>\n<h3 id=\"將next模板資料拉取至本地上\"><a href=\"#將next模板資料拉取至本地上\" class=\"headerlink\" title=\"將next模板資料拉取至本地上\"></a>將next模板資料拉取至本地上</h3><ul>\n<li>輸入以下指令，將github的資料拉取至本機電腦上</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當安裝完成時，可以看到<strong><code>./themes</code></strong>路徑下多了<strong><code>next</code></strong>的資料夾，裡面已經有剛剛下載的模板資料了</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/Next%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.jpg\" alt=\"Next安裝完成\"></p>\n<h3 id=\"修改根目錄下的-config-yml檔案-不是next資料夾下的喔\"><a href=\"#修改根目錄下的-config-yml檔案-不是next資料夾下的喔\" class=\"headerlink\" title=\"修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)\"></a>修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/%E4%BF%AE%E6%94%B9%E6%A0%B9%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94.png\" alt=\"修改根目錄下的設定檔\"></p>\n<ul>\n<li>看到theme: landscape的部分，我們要換掉，換成自己的模板next<br>(請修改如下)</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"查看next的模板新世界吧\"><a href=\"#查看next的模板新世界吧\" class=\"headerlink\" title=\"查看next的模板新世界吧&gt; &lt;\"></a>查看next的模板新世界吧&gt; &lt;</h3><ul>\n<li>輸入以下指令</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>透過瀏覽器查看當前部落格新造型<br>(<a href=\"http://localhost:4000/\">http://localhost:4000/</a>)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/next%E6%A8%A1%E6%9D%BF%E9%80%A0%E5%9E%8B.png\" alt=\"next模板造型\"></p>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>看到新造型感覺越來越有樣子了吧!!!希望我們都能夠將部落格布置成每個人獨一無二的秘密基地。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件-指令</a></p>\n","site":{"data":{}},"length":994,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Hexo常用指令說明\"><a href=\"#Hexo常用指令說明\" class=\"headerlink\" title=\"Hexo常用指令說明\"></a>Hexo常用指令說明</h2><h3 id=\"hexo-init-初始化資訊\"><a href=\"#hexo-init-初始化資訊\" class=\"headerlink\" title=\"hexo init 初始化資訊\"></a>hexo init 初始化資訊</h3><ul>\n<li>在當前路徑下建造hexo初始化的相關資訊<br>(Day2使用過此指令，在一開始初始化並生成Hexo資訊的時候使用)</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-new-title-生成文章\"><a href=\"#hexo-new-title-生成文章\" class=\"headerlink\" title=\"hexo new title 生成文章\"></a>hexo new title 生成文章</h3><ul>\n<li>創建一篇文章(<strong><code><code>&lt;title&gt;</code></code></strong>要記得替換成你想使用的文章名稱)</li>\n<li>創文章流程：<ul>\n<li>文章會根據<strong><code>./scaffolds</code></strong>路徑下的<strong><code>post.md</code></strong>模板生成文章格式</li>\n<li>生成完的文章會在<strong><code>./source/_posts</code></strong>路徑下生成</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-g-生成靜態檔案\"><a href=\"#hexo-g-生成靜態檔案\" class=\"headerlink\" title=\"hexo g 生成靜態檔案\"></a>hexo g 生成靜態檔案</h3><ul>\n<li>在.&#x2F;public的路徑下生成靜態檔案<br>(會將文章的md檔案轉換成html的檔案)</li>\n<li>g是generate的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-s-本地伺服器預覽畫面\"><a href=\"#hexo-s-本地伺服器預覽畫面\" class=\"headerlink\" title=\"hexo s 本地伺服器預覽畫面\"></a>hexo s 本地伺服器預覽畫面</h3><ul>\n<li>啟動本地伺服器<br>(可以在自己電腦上預覽部落格樣式及文章內容)</li>\n<li>s是server的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-d-部屬靜態檔案至上線環境\"><a href=\"#hexo-d-部屬靜態檔案至上線環境\" class=\"headerlink\" title=\"hexo d 部屬靜態檔案至上線環境\"></a>hexo d 部屬靜態檔案至上線環境</h3><ul>\n<li>部署public生成的靜態檔案至網站讓其他人也能看到你的文章</li>\n<li>d是deploy的縮寫</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hexo-clean-清除快取資源及已生成的靜態檔案\"><a href=\"#hexo-clean-清除快取資源及已生成的靜態檔案\" class=\"headerlink\" title=\"hexo clean 清除快取資源及已生成的靜態檔案\"></a>hexo clean 清除快取資源及已生成的靜態檔案</h3><ul>\n<li>清除快取檔案<strong><code>db.json</code></strong>及<strong><code>./puclic</code></strong>路徑下已生成的靜態檔案</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更換部落格主題\"><a href=\"#更換部落格主題\" class=\"headerlink\" title=\"更換部落格主題\"></a>更換部落格主題</h2><p>這邊使用大家較常使用的版型Next，等等將會拉取以下檔案至本地喔<br><strong><a href=\"https://github.com/theme-next/hexo-theme-next\">Next官方Github資料請點我查看</a></strong></p>\n<h3 id=\"前置工作\"><a href=\"#前置工作\" class=\"headerlink\" title=\"前置工作\"></a>前置工作</h3><ul>\n<li>Step 1:進去hexo init初始化的資料夾</li>\n<li>Step 2:在資料夾路徑的部分輸入cmd打開當前路徑的命令提示字元</li>\n</ul>\n<hr>\n<h3 id=\"將next模板資料拉取至本地上\"><a href=\"#將next模板資料拉取至本地上\" class=\"headerlink\" title=\"將next模板資料拉取至本地上\"></a>將next模板資料拉取至本地上</h3><ul>\n<li>輸入以下指令，將github的資料拉取至本機電腦上</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>當安裝完成時，可以看到<strong><code>./themes</code></strong>路徑下多了<strong><code>next</code></strong>的資料夾，裡面已經有剛剛下載的模板資料了</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/Next%E5%AE%89%E8%A3%9D%E5%AE%8C%E6%88%90.jpg\" alt=\"Next安裝完成\"></p>\n<h3 id=\"修改根目錄下的-config-yml檔案-不是next資料夾下的喔\"><a href=\"#修改根目錄下的-config-yml檔案-不是next資料夾下的喔\" class=\"headerlink\" title=\"修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)\"></a>修改根目錄下的_config.yml檔案(不是next資料夾下的喔!!!)</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/%E4%BF%AE%E6%94%B9%E6%A0%B9%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94.png\" alt=\"修改根目錄下的設定檔\"></p>\n<ul>\n<li>看到theme: landscape的部分，我們要換掉，換成自己的模板next<br>(請修改如下)</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"查看next的模板新世界吧\"><a href=\"#查看next的模板新世界吧\" class=\"headerlink\" title=\"查看next的模板新世界吧&gt; &lt;\"></a>查看next的模板新世界吧&gt; &lt;</h3><ul>\n<li>輸入以下指令</li>\n</ul>\n <figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>透過瀏覽器查看當前部落格新造型<br>(<a href=\"http://localhost:4000/\">http://localhost:4000/</a>)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007049/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/hexo-github-4/next%E6%A8%A1%E6%9D%BF%E9%80%A0%E5%9E%8B.png\" alt=\"next模板造型\"></p>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>看到新造型感覺越來越有樣子了吧!!!希望我們都能夠將部落格布置成每個人獨一無二的秘密基地。</p>\n<hr>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p>[1] <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件-指令</a></p>\n"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2024-05-31T14:23:51.000Z","updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3r000f48z1g6ef60er","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"JavaScript(3)：掌握箭頭函式，優雅簡約的程式寫作","date":"2023-11-28T17:02:36.000Z","description":"深入解析ES6箭頭函數：揭開與傳統函式的差異。","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n<strong>箭頭函數是ES6的新語法，能夠有效縮短傳統函式寫法</strong>\n\n## 傳統函式 VS 箭頭函式情境說明\n\n- 直接透過一個例子來進行比較更快瞭解，透過箭頭函式縮短傳統函式。\n- 情境：我想快速將陣列中的每個元素都變成兩倍(map對原陣列進行操作產生一個新的陣列)。\n\n### 傳統函式\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map(function(item){\n  return item * 2\n})\nconsole.log(resultarr)\n```\n\n顯示如下：\n\n```javascript=\n[2,4,6,8,10]\n```\n\n---\n\n### 箭頭函式\n\n- 方法1：省略function替換成箭頭函數的方式。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map((item) =>{\n  return item * 2\n})\nconsole.log(resultarr)\n```\n\n- 方法2：省略function + 省略return。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map((item) => (item * 2))\nconsole.log(resultarr)\n```\n\n- 方法3：當確定僅有一個參數(item)，不可為空或超過一個參數，可以省略成以下寫法。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map(item => item * 2)\nconsole.log(resultarr)\n```\n\n---\n\n## this指向差別-箭頭函式沒有自己的this指向\n\n- 當看到this的時候自動忽視包覆他的函式\n\n## 傳統函式的this指向\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName() { \n    setTimeout(function () {\n      console.log(this.name); // 2\n    });\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n### 案例1.回調函數遇到箭頭函式\n\n- 當看到this的時候自動忽視包覆他的函式(setTimeout)，可以想像成this.name又變成在callName函式之下，因此這時候this.name就會從全域變數變成指向person物件下的name。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName() { \n    setTimeout(() => {\n      console.log(this.name); // 2\n    });\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n小明\n```\n\n### 案例2.傳統函式遇到箭頭函式(單層)\n\n- 使用箭頭函式會直接跳出當前包覆的function(callName)，也就是目前並沒有人調用person本身，因此this會指向全域。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName: () => { \n    console.log(this.name);\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n---\n\n### 案例3.傳統函式遇到箭頭函式(雙層)\n\n- this.name跳脫包覆他的callName函式，變成直接在callMe下面，因此callMe被person呼叫使用，this將會指向person。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callMe() {\n    const callName = () => { \n      console.log(this.name); // 請尋找箭頭所在的作用域為何？\n    };\n    callName();\n  }\n}\nperson.callMe();\n```\n\n顯示如下：\n\n```javascript=\n小明\n```\n\n## this指向實戰作法，讓this取得正確的值\n\n- 回調函式使用傳統函式的寫法一般指向全域\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(function () {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n### 修改方式1.利用其他變數取代當前this\n\n- 透過在fn使用變數儲存當前this位置指向fn，在回調函式中使用該變數以讓this指向obj4，取得物件 4的值。\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    const that = this\n    setTimeout(function () {\n      console.log(that.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n物件 4\n```\n\n### 修改方式2.使用箭頭函數\n\n- 透過箭頭函數忽視函式setTimeout，讓this變成在fn函式下，this就會指向使用fn的obj4，進而取得obj4下的someone。\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(() => {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n物件 4\n```\n","source":"_posts/2023-11-29-JS-3.md","raw":"---\ntitle: JavaScript(3)：掌握箭頭函式，優雅簡約的程式寫作\ndate: 2023-11-29 01:02:36\ntags:\n- [Arrow Function]\ncategories:\n- [JavaScript]\ndescription: 深入解析ES6箭頭函數：揭開與傳統函式的差異。\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n<strong>箭頭函數是ES6的新語法，能夠有效縮短傳統函式寫法</strong>\n\n## 傳統函式 VS 箭頭函式情境說明\n\n- 直接透過一個例子來進行比較更快瞭解，透過箭頭函式縮短傳統函式。\n- 情境：我想快速將陣列中的每個元素都變成兩倍(map對原陣列進行操作產生一個新的陣列)。\n\n### 傳統函式\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map(function(item){\n  return item * 2\n})\nconsole.log(resultarr)\n```\n\n顯示如下：\n\n```javascript=\n[2,4,6,8,10]\n```\n\n---\n\n### 箭頭函式\n\n- 方法1：省略function替換成箭頭函數的方式。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map((item) =>{\n  return item * 2\n})\nconsole.log(resultarr)\n```\n\n- 方法2：省略function + 省略return。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map((item) => (item * 2))\nconsole.log(resultarr)\n```\n\n- 方法3：當確定僅有一個參數(item)，不可為空或超過一個參數，可以省略成以下寫法。\n\n```javascript=\nconst arr = [1, 2, 3, 4, 5];\nconst resultarr = arr.map(item => item * 2)\nconsole.log(resultarr)\n```\n\n---\n\n## this指向差別-箭頭函式沒有自己的this指向\n\n- 當看到this的時候自動忽視包覆他的函式\n\n## 傳統函式的this指向\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName() { \n    setTimeout(function () {\n      console.log(this.name); // 2\n    });\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n### 案例1.回調函數遇到箭頭函式\n\n- 當看到this的時候自動忽視包覆他的函式(setTimeout)，可以想像成this.name又變成在callName函式之下，因此這時候this.name就會從全域變數變成指向person物件下的name。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName() { \n    setTimeout(() => {\n      console.log(this.name); // 2\n    });\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n小明\n```\n\n### 案例2.傳統函式遇到箭頭函式(單層)\n\n- 使用箭頭函式會直接跳出當前包覆的function(callName)，也就是目前並沒有人調用person本身，因此this會指向全域。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callName: () => { \n    console.log(this.name);\n  },\n}\nperson.callName();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n---\n\n### 案例3.傳統函式遇到箭頭函式(雙層)\n\n- this.name跳脫包覆他的callName函式，變成直接在callMe下面，因此callMe被person呼叫使用，this將會指向person。\n\n```javascript=\nvar name = '全域'\nconst person = {\n  name: '小明',\n  callMe() {\n    const callName = () => { \n      console.log(this.name); // 請尋找箭頭所在的作用域為何？\n    };\n    callName();\n  }\n}\nperson.callMe();\n```\n\n顯示如下：\n\n```javascript=\n小明\n```\n\n## this指向實戰作法，讓this取得正確的值\n\n- 回調函式使用傳統函式的寫法一般指向全域\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(function () {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n### 修改方式1.利用其他變數取代當前this\n\n- 透過在fn使用變數儲存當前this位置指向fn，在回調函式中使用該變數以讓this指向obj4，取得物件 4的值。\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    const that = this\n    setTimeout(function () {\n      console.log(that.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n物件 4\n```\n\n### 修改方式2.使用箭頭函數\n\n- 透過箭頭函數忽視函式setTimeout，讓this變成在fn函式下，this就會指向使用fn的obj4，進而取得obj4下的someone。\n\n```javascript=\nvar someone = '全域';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(() => {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n物件 4\n```\n","slug":"JS-3","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3r000j48z14z6m6g2o","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<p><strong>箭頭函數是ES6的新語法，能夠有效縮短傳統函式寫法</strong></p>\n<h2 id=\"傳統函式-VS-箭頭函式情境說明\"><a href=\"#傳統函式-VS-箭頭函式情境說明\" class=\"headerlink\" title=\"傳統函式 VS 箭頭函式情境說明\"></a>傳統函式 VS 箭頭函式情境說明</h2><ul>\n<li>直接透過一個例子來進行比較更快瞭解，透過箭頭函式縮短傳統函式。</li>\n<li>情境：我想快速將陣列中的每個元素都變成兩倍(map對原陣列進行操作產生一個新的陣列)。</li>\n</ul>\n<h3 id=\"傳統函式\"><a href=\"#傳統函式\" class=\"headerlink\" title=\"傳統函式\"></a>傳統函式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"箭頭函式\"><a href=\"#箭頭函式\" class=\"headerlink\" title=\"箭頭函式\"></a>箭頭函式</h3><ul>\n<li>方法1：省略function替換成箭頭函數的方式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法2：省略function + 省略return。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (item * <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法3：當確定僅有一個參數(item)，不可為空或超過一個參數，可以省略成以下寫法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"this指向差別-箭頭函式沒有自己的this指向\"><a href=\"#this指向差別-箭頭函式沒有自己的this指向\" class=\"headerlink\" title=\"this指向差別-箭頭函式沒有自己的this指向\"></a>this指向差別-箭頭函式沒有自己的this指向</h2><ul>\n<li>當看到this的時候自動忽視包覆他的函式</li>\n</ul>\n<h2 id=\"傳統函式的this指向\"><a href=\"#傳統函式的this指向\" class=\"headerlink\" title=\"傳統函式的this指向\"></a>傳統函式的this指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callName</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例1-回調函數遇到箭頭函式\"><a href=\"#案例1-回調函數遇到箭頭函式\" class=\"headerlink\" title=\"案例1.回調函數遇到箭頭函式\"></a>案例1.回調函數遇到箭頭函式</h3><ul>\n<li>當看到this的時候自動忽視包覆他的函式(setTimeout)，可以想像成this.name又變成在callName函式之下，因此這時候this.name就會從全域變數變成指向person物件下的name。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callName</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例2-傳統函式遇到箭頭函式-單層\"><a href=\"#案例2-傳統函式遇到箭頭函式-單層\" class=\"headerlink\" title=\"案例2.傳統函式遇到箭頭函式(單層)\"></a>案例2.傳統函式遇到箭頭函式(單層)</h3><ul>\n<li>使用箭頭函式會直接跳出當前包覆的function(callName)，也就是目前並沒有人調用person本身，因此this會指向全域。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">callName</span>: <span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例3-傳統函式遇到箭頭函式-雙層\"><a href=\"#案例3-傳統函式遇到箭頭函式-雙層\" class=\"headerlink\" title=\"案例3.傳統函式遇到箭頭函式(雙層)\"></a>案例3.傳統函式遇到箭頭函式(雙層)</h3><ul>\n<li>this.name跳脫包覆他的callName函式，變成直接在callMe下面，因此callMe被person呼叫使用，this將會指向person。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callMe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">callName</span> = (<span class=\"params\"></span>) =&gt; &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 請尋找箭頭所在的作用域為何？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">callName</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callMe</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this指向實戰作法，讓this取得正確的值\"><a href=\"#this指向實戰作法，讓this取得正確的值\" class=\"headerlink\" title=\"this指向實戰作法，讓this取得正確的值\"></a>this指向實戰作法，讓this取得正確的值</h2><ul>\n<li>回調函式使用傳統函式的寫法一般指向全域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改方式1-利用其他變數取代當前this\"><a href=\"#修改方式1-利用其他變數取代當前this\" class=\"headerlink\" title=\"修改方式1.利用其他變數取代當前this\"></a>修改方式1.利用其他變數取代當前this</h3><ul>\n<li>透過在fn使用變數儲存當前this位置指向fn，在回調函式中使用該變數以讓this指向obj4，取得物件 4的值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(that.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改方式2-使用箭頭函數\"><a href=\"#修改方式2-使用箭頭函數\" class=\"headerlink\" title=\"修改方式2.使用箭頭函數\"></a>修改方式2.使用箭頭函數</h3><ul>\n<li>透過箭頭函數忽視函式setTimeout，讓this變成在fn函式下，this就會指向使用fn的obj4，進而取得obj4下的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2445,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<p><strong>箭頭函數是ES6的新語法，能夠有效縮短傳統函式寫法</strong></p>\n<h2 id=\"傳統函式-VS-箭頭函式情境說明\"><a href=\"#傳統函式-VS-箭頭函式情境說明\" class=\"headerlink\" title=\"傳統函式 VS 箭頭函式情境說明\"></a>傳統函式 VS 箭頭函式情境說明</h2><ul>\n<li>直接透過一個例子來進行比較更快瞭解，透過箭頭函式縮短傳統函式。</li>\n<li>情境：我想快速將陣列中的每個元素都變成兩倍(map對原陣列進行操作產生一個新的陣列)。</li>\n</ul>\n<h3 id=\"傳統函式\"><a href=\"#傳統函式\" class=\"headerlink\" title=\"傳統函式\"></a>傳統函式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"箭頭函式\"><a href=\"#箭頭函式\" class=\"headerlink\" title=\"箭頭函式\"></a>箭頭函式</h3><ul>\n<li>方法1：省略function替換成箭頭函數的方式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法2：省略function + 省略return。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (item * <span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法3：當確定僅有一個參數(item)，不可為空或超過一個參數，可以省略成以下寫法。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> resultarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultarr)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"this指向差別-箭頭函式沒有自己的this指向\"><a href=\"#this指向差別-箭頭函式沒有自己的this指向\" class=\"headerlink\" title=\"this指向差別-箭頭函式沒有自己的this指向\"></a>this指向差別-箭頭函式沒有自己的this指向</h2><ul>\n<li>當看到this的時候自動忽視包覆他的函式</li>\n</ul>\n<h2 id=\"傳統函式的this指向\"><a href=\"#傳統函式的this指向\" class=\"headerlink\" title=\"傳統函式的this指向\"></a>傳統函式的this指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callName</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例1-回調函數遇到箭頭函式\"><a href=\"#案例1-回調函數遇到箭頭函式\" class=\"headerlink\" title=\"案例1.回調函數遇到箭頭函式\"></a>案例1.回調函數遇到箭頭函式</h3><ul>\n<li>當看到this的時候自動忽視包覆他的函式(setTimeout)，可以想像成this.name又變成在callName函式之下，因此這時候this.name就會從全域變數變成指向person物件下的name。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callName</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例2-傳統函式遇到箭頭函式-單層\"><a href=\"#案例2-傳統函式遇到箭頭函式-單層\" class=\"headerlink\" title=\"案例2.傳統函式遇到箭頭函式(單層)\"></a>案例2.傳統函式遇到箭頭函式(單層)</h3><ul>\n<li>使用箭頭函式會直接跳出當前包覆的function(callName)，也就是目前並沒有人調用person本身，因此this會指向全域。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">callName</span>: <span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callName</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例3-傳統函式遇到箭頭函式-雙層\"><a href=\"#案例3-傳統函式遇到箭頭函式-雙層\" class=\"headerlink\" title=\"案例3.傳統函式遇到箭頭函式(雙層)\"></a>案例3.傳統函式遇到箭頭函式(雙層)</h3><ul>\n<li>this.name跳脫包覆他的callName函式，變成直接在callMe下面，因此callMe被person呼叫使用，this將會指向person。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callMe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">callName</span> = (<span class=\"params\"></span>) =&gt; &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// 請尋找箭頭所在的作用域為何？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">callName</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">callMe</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this指向實戰作法，讓this取得正確的值\"><a href=\"#this指向實戰作法，讓this取得正確的值\" class=\"headerlink\" title=\"this指向實戰作法，讓this取得正確的值\"></a>this指向實戰作法，讓this取得正確的值</h2><ul>\n<li>回調函式使用傳統函式的寫法一般指向全域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改方式1-利用其他變數取代當前this\"><a href=\"#修改方式1-利用其他變數取代當前this\" class=\"headerlink\" title=\"修改方式1.利用其他變數取代當前this\"></a>修改方式1.利用其他變數取代當前this</h3><ul>\n<li>透過在fn使用變數儲存當前this位置指向fn，在回調函式中使用該變數以讓this指向obj4，取得物件 4的值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(that.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改方式2-使用箭頭函數\"><a href=\"#修改方式2-使用箭頭函數\" class=\"headerlink\" title=\"修改方式2.使用箭頭函數\"></a>修改方式2.使用箭頭函數</h3><ul>\n<li>透過箭頭函數忽視函式setTimeout，讓this變成在fn函式下，this就會指向使用fn的obj4，進而取得obj4下的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript(4)：注重關注點的分離","date":"2023-11-29T01:44:29.000Z","description":"透過關注點分離的設計方式，可顯著提高系統整體的可維護性。","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n<strong>關注點分離（Separation of Concerns，SoC）</strong>\n\n## 定義\n\n- 關注點分離是一種軟體設計原則，將一個系統劃分為不同的模組或元件，每個模組或元件集中於解決特定的關注點或任務，以提高系統的可操作性、可維護性、可擴展性和可重用性。該原則主張將不同層面的關注點獨立開發，使得修改一個關注點不會影響其他關注點。\n- 傳統的網頁開發中，通常會將網頁的開發區分為HTML、CSS、JavaScript三個技術領域，並分別將它們拆分成不同的檔案，以負責各自的領域。\n  - HTML： 語意層，負責網頁結構和整體語意。\n  - CSS： 樣式層，負責網頁外觀和樣式。\n  - JavaScript： 邏輯層，負責處理事件邏輯和動態行為。\n- 避免寫行內樣式(inline style)跟行內腳本(inline script)造成彼此領域的干涉。\n\n```htmlembedded=\n<h1 style=\"color:red;font-size:46px;\"  onclick=\"alert('Hi')\">\n  Hello World\n</h1>\n```\n\n---\n\n- 關注點分離寫法\n- HTML(語意層)：\n\n```htmlembedded=\n<h1>\n  Hello World\n</h1>\n```\n\n- CSS(樣式層)\n\n```css=\nh1 {\n  color: red;\n  font-size: 46px;\n}\n```\n\n- JavaScript（邏輯層）\n\n```javascript=\n// script.js\ndocument.addEventListener('DOMContentLoaded', function () {\n  const header = document.querySelector('h1');\n  header.addEventListener('click', function () {\n    alert('Hi');\n  });\n});\n```\n\n## 關注點分離- MVC概念\n\n- Model：\n  - 負責處理數據的邏輯，包括數據的存儲、檢索、更新和刪除等操作。\n- View：\n  - 負責呈現界面，即用戶界面的渲染和顯示。\n- Controller：\n  - 負責接收用戶的輸入，處理業務邏輯，然後更新模型和視圖。\n\n---\n\n- 單純依賴Controller影響View的節點，使得View上呈現的節點難以維護。\n![傳統網頁結構](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg)\n\n---\n我們希望透過MVC的概念讓維護上更為方便。\n\n- 使用者與介面互動 -> Controller處理網頁邏輯 -> Controller調用Model方法，影響Model資料(新增或修改) -> 修改完Controller再次呼叫View渲染的方法 -> View根據更新後的資料重新渲染\n- 達到View及Model透過Controller進行彼此的溝通而不直接互相影響。\n![關注點分離-網頁結構](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg)\n- 透過以下流程搭配程式碼進行說明\n  1. 用戶與界面互動，觸發 Controller 的相應方法。\n     - 使用者在瀏覽器點擊移除。\n  2. Controller 根據用戶的輸入操作 Model。\n     - 按鈕的點擊事件觸發了 removeData 方法，這是 Controller 中的一個相應方法。\n  3. Model 的狀態發生變化。\n     - removeData方法中使用了 splice 方法來移除資料陣列 data 中的特定項目，即刪除了一個資料項。\n  4. Controller 得知 Model 狀態的變化，通知相應的 View。\n     - removeData方法執行完畢後，立即呼叫了 render 方法，這是通知 View 部分。\n  5. View 從 Model 中獲取最新的數據。\n     - render方法內部重新遍歷資料陣列，創建新的HTML元素，並更新 DOM 中的內容。\n  6. View 使用這些數據更新界面。\n      - 新的HTML元素被注入到DOM中，此時界面上的列表已經更新，反映了資料變化。\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/LYqevQL)\n\n```javascript=\nconst component = {\n  // Model的部分\n  // --------\n  data: [\n    '這是第一句話',\n    '這是第二句話',\n    '這是第三句話'\n  ],\n  removeData(id) {\n    this.data.splice(id, 1);\n    this.render();\n  },\n  // --------\n\n  // View的部分\n  // --------\n  renderList() {\n    const list = document.querySelector('.component ul');\n    let content = '';\n    this.data.forEach((item, i) => {\n      content = `${content}<li>${item} <button type=\"button\" class=\"btn\" data-id=\"${i}\">移除</button></li>`;\n    });\n    list.innerHTML = content;\n  },\n  addEventListeners() {\n    const btns = document.querySelectorAll('.btn');\n    btns.forEach(btn => btn.addEventListener('click', (e) => {\n      const id = e.target.dataset.id;\n      this.removeData(id);\n    }));\n  },\n  // --------\n\n  // Controller\n  // --------\n  render() { // 渲染方法\n    this.renderList();\n    this.addEventListeners();\n  },\n  init() {\n    this.render();\n  }\n  // --------\n};\ncomponent.init();\n```\n","source":"_posts/2023-11-29-JS-4.md","raw":"---\ntitle: JavaScript(4)：注重關注點的分離\ndate: 2023-11-29 09:44:29\ntags:\n- [SoC]\ncategories:\n- [JavaScript]\ndescription: 透過關注點分離的設計方式，可顯著提高系統整體的可維護性。\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n<strong>關注點分離（Separation of Concerns，SoC）</strong>\n\n## 定義\n\n- 關注點分離是一種軟體設計原則，將一個系統劃分為不同的模組或元件，每個模組或元件集中於解決特定的關注點或任務，以提高系統的可操作性、可維護性、可擴展性和可重用性。該原則主張將不同層面的關注點獨立開發，使得修改一個關注點不會影響其他關注點。\n- 傳統的網頁開發中，通常會將網頁的開發區分為HTML、CSS、JavaScript三個技術領域，並分別將它們拆分成不同的檔案，以負責各自的領域。\n  - HTML： 語意層，負責網頁結構和整體語意。\n  - CSS： 樣式層，負責網頁外觀和樣式。\n  - JavaScript： 邏輯層，負責處理事件邏輯和動態行為。\n- 避免寫行內樣式(inline style)跟行內腳本(inline script)造成彼此領域的干涉。\n\n```htmlembedded=\n<h1 style=\"color:red;font-size:46px;\"  onclick=\"alert('Hi')\">\n  Hello World\n</h1>\n```\n\n---\n\n- 關注點分離寫法\n- HTML(語意層)：\n\n```htmlembedded=\n<h1>\n  Hello World\n</h1>\n```\n\n- CSS(樣式層)\n\n```css=\nh1 {\n  color: red;\n  font-size: 46px;\n}\n```\n\n- JavaScript（邏輯層）\n\n```javascript=\n// script.js\ndocument.addEventListener('DOMContentLoaded', function () {\n  const header = document.querySelector('h1');\n  header.addEventListener('click', function () {\n    alert('Hi');\n  });\n});\n```\n\n## 關注點分離- MVC概念\n\n- Model：\n  - 負責處理數據的邏輯，包括數據的存儲、檢索、更新和刪除等操作。\n- View：\n  - 負責呈現界面，即用戶界面的渲染和顯示。\n- Controller：\n  - 負責接收用戶的輸入，處理業務邏輯，然後更新模型和視圖。\n\n---\n\n- 單純依賴Controller影響View的節點，使得View上呈現的節點難以維護。\n![傳統網頁結構](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg)\n\n---\n我們希望透過MVC的概念讓維護上更為方便。\n\n- 使用者與介面互動 -> Controller處理網頁邏輯 -> Controller調用Model方法，影響Model資料(新增或修改) -> 修改完Controller再次呼叫View渲染的方法 -> View根據更新後的資料重新渲染\n- 達到View及Model透過Controller進行彼此的溝通而不直接互相影響。\n![關注點分離-網頁結構](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg)\n- 透過以下流程搭配程式碼進行說明\n  1. 用戶與界面互動，觸發 Controller 的相應方法。\n     - 使用者在瀏覽器點擊移除。\n  2. Controller 根據用戶的輸入操作 Model。\n     - 按鈕的點擊事件觸發了 removeData 方法，這是 Controller 中的一個相應方法。\n  3. Model 的狀態發生變化。\n     - removeData方法中使用了 splice 方法來移除資料陣列 data 中的特定項目，即刪除了一個資料項。\n  4. Controller 得知 Model 狀態的變化，通知相應的 View。\n     - removeData方法執行完畢後，立即呼叫了 render 方法，這是通知 View 部分。\n  5. View 從 Model 中獲取最新的數據。\n     - render方法內部重新遍歷資料陣列，創建新的HTML元素，並更新 DOM 中的內容。\n  6. View 使用這些數據更新界面。\n      - 新的HTML元素被注入到DOM中，此時界面上的列表已經更新，反映了資料變化。\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/LYqevQL)\n\n```javascript=\nconst component = {\n  // Model的部分\n  // --------\n  data: [\n    '這是第一句話',\n    '這是第二句話',\n    '這是第三句話'\n  ],\n  removeData(id) {\n    this.data.splice(id, 1);\n    this.render();\n  },\n  // --------\n\n  // View的部分\n  // --------\n  renderList() {\n    const list = document.querySelector('.component ul');\n    let content = '';\n    this.data.forEach((item, i) => {\n      content = `${content}<li>${item} <button type=\"button\" class=\"btn\" data-id=\"${i}\">移除</button></li>`;\n    });\n    list.innerHTML = content;\n  },\n  addEventListeners() {\n    const btns = document.querySelectorAll('.btn');\n    btns.forEach(btn => btn.addEventListener('click', (e) => {\n      const id = e.target.dataset.id;\n      this.removeData(id);\n    }));\n  },\n  // --------\n\n  // Controller\n  // --------\n  render() { // 渲染方法\n    this.renderList();\n    this.addEventListeners();\n  },\n  init() {\n    this.render();\n  }\n  // --------\n};\ncomponent.init();\n```\n","slug":"JS-4","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3r000m48z10yp6d17u","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<p><strong>關注點分離（Separation of Concerns，SoC）</strong></p>\n<h2 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h2><ul>\n<li>關注點分離是一種軟體設計原則，將一個系統劃分為不同的模組或元件，每個模組或元件集中於解決特定的關注點或任務，以提高系統的可操作性、可維護性、可擴展性和可重用性。該原則主張將不同層面的關注點獨立開發，使得修改一個關注點不會影響其他關注點。</li>\n<li>傳統的網頁開發中，通常會將網頁的開發區分為HTML、CSS、JavaScript三個技術領域，並分別將它們拆分成不同的檔案，以負責各自的領域。<ul>\n<li>HTML： 語意層，負責網頁結構和整體語意。</li>\n<li>CSS： 樣式層，負責網頁外觀和樣式。</li>\n<li>JavaScript： 邏輯層，負責處理事件邏輯和動態行為。</li>\n</ul>\n</li>\n<li>避免寫行內樣式(inline style)跟行內腳本(inline script)造成彼此領域的干涉。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 style=&quot;color:red;font-size:46px;&quot;  onclick=&quot;alert(&#x27;Hi&#x27;)&quot;&gt;</span><br><span class=\"line\">  Hello World</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>關注點分離寫法</li>\n<li>HTML(語意層)：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">  Hello World</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>CSS(樣式層)</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">46px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JavaScript（邏輯層）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> header = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br><span class=\"line\">  header.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hi&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"關注點分離-MVC概念\"><a href=\"#關注點分離-MVC概念\" class=\"headerlink\" title=\"關注點分離- MVC概念\"></a>關注點分離- MVC概念</h2><ul>\n<li>Model：<ul>\n<li>負責處理數據的邏輯，包括數據的存儲、檢索、更新和刪除等操作。</li>\n</ul>\n</li>\n<li>View：<ul>\n<li>負責呈現界面，即用戶界面的渲染和顯示。</li>\n</ul>\n</li>\n<li>Controller：<ul>\n<li>負責接收用戶的輸入，處理業務邏輯，然後更新模型和視圖。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>單純依賴Controller影響View的節點，使得View上呈現的節點難以維護。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg\" alt=\"傳統網頁結構\"></li>\n</ul>\n<hr>\n<p>我們希望透過MVC的概念讓維護上更為方便。</p>\n<ul>\n<li>使用者與介面互動 -&gt; Controller處理網頁邏輯 -&gt; Controller調用Model方法，影響Model資料(新增或修改) -&gt; 修改完Controller再次呼叫View渲染的方法 -&gt; View根據更新後的資料重新渲染</li>\n<li>達到View及Model透過Controller進行彼此的溝通而不直接互相影響。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg\" alt=\"關注點分離-網頁結構\"></li>\n<li>透過以下流程搭配程式碼進行說明<ol>\n<li>用戶與界面互動，觸發 Controller 的相應方法。<ul>\n<li>使用者在瀏覽器點擊移除。</li>\n</ul>\n</li>\n<li>Controller 根據用戶的輸入操作 Model。<ul>\n<li>按鈕的點擊事件觸發了 removeData 方法，這是 Controller 中的一個相應方法。</li>\n</ul>\n</li>\n<li>Model 的狀態發生變化。<ul>\n<li>removeData方法中使用了 splice 方法來移除資料陣列 data 中的特定項目，即刪除了一個資料項。</li>\n</ul>\n</li>\n<li>Controller 得知 Model 狀態的變化，通知相應的 View。<ul>\n<li>removeData方法執行完畢後，立即呼叫了 render 方法，這是通知 View 部分。</li>\n</ul>\n</li>\n<li>View 從 Model 中獲取最新的數據。<ul>\n<li>render方法內部重新遍歷資料陣列，創建新的HTML元素，並更新 DOM 中的內容。</li>\n</ul>\n</li>\n<li>View 使用這些數據更新界面。<ul>\n<li>新的HTML元素被注入到DOM中，此時界面上的列表已經更新，反映了資料變化。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/LYqevQL\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Model的部分</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第一句話&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第二句話&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第三句話&#x27;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"title function_\">removeData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">splice</span>(id, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// View的部分</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"title function_\">renderList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.component ul&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      content = <span class=\"string\">`<span class=\"subst\">$&#123;content&#125;</span>&lt;li&gt;<span class=\"subst\">$&#123;item&#125;</span> &lt;button type=&quot;button&quot; class=&quot;btn&quot; data-id=&quot;<span class=\"subst\">$&#123;i&#125;</span>&quot;&gt;移除&lt;/button&gt;&lt;/li&gt;`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    list.<span class=\"property\">innerHTML</span> = content;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">addEventListeners</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> btns = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.btn&#x27;</span>);</span><br><span class=\"line\">    btns.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">btn</span> =&gt;</span> btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> id = e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">removeData</span>(id);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Controller</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 渲染方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">renderList</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">addEventListeners</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">component.<span class=\"title function_\">init</span>();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2546,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<p><strong>關注點分離（Separation of Concerns，SoC）</strong></p>\n<h2 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h2><ul>\n<li>關注點分離是一種軟體設計原則，將一個系統劃分為不同的模組或元件，每個模組或元件集中於解決特定的關注點或任務，以提高系統的可操作性、可維護性、可擴展性和可重用性。該原則主張將不同層面的關注點獨立開發，使得修改一個關注點不會影響其他關注點。</li>\n<li>傳統的網頁開發中，通常會將網頁的開發區分為HTML、CSS、JavaScript三個技術領域，並分別將它們拆分成不同的檔案，以負責各自的領域。<ul>\n<li>HTML： 語意層，負責網頁結構和整體語意。</li>\n<li>CSS： 樣式層，負責網頁外觀和樣式。</li>\n<li>JavaScript： 邏輯層，負責處理事件邏輯和動態行為。</li>\n</ul>\n</li>\n<li>避免寫行內樣式(inline style)跟行內腳本(inline script)造成彼此領域的干涉。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 style=&quot;color:red;font-size:46px;&quot;  onclick=&quot;alert(&#x27;Hi&#x27;)&quot;&gt;</span><br><span class=\"line\">  Hello World</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>關注點分離寫法</li>\n<li>HTML(語意層)：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">  Hello World</span><br><span class=\"line\">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>CSS(樣式層)</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">46px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JavaScript（邏輯層）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> header = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;h1&#x27;</span>);</span><br><span class=\"line\">  header.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hi&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"關注點分離-MVC概念\"><a href=\"#關注點分離-MVC概念\" class=\"headerlink\" title=\"關注點分離- MVC概念\"></a>關注點分離- MVC概念</h2><ul>\n<li>Model：<ul>\n<li>負責處理數據的邏輯，包括數據的存儲、檢索、更新和刪除等操作。</li>\n</ul>\n</li>\n<li>View：<ul>\n<li>負責呈現界面，即用戶界面的渲染和顯示。</li>\n</ul>\n</li>\n<li>Controller：<ul>\n<li>負責接收用戶的輸入，處理業務邏輯，然後更新模型和視圖。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>單純依賴Controller影響View的節點，使得View上呈現的節點難以維護。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg\" alt=\"傳統網頁結構\"></li>\n</ul>\n<hr>\n<p>我們希望透過MVC的概念讓維護上更為方便。</p>\n<ul>\n<li>使用者與介面互動 -&gt; Controller處理網頁邏輯 -&gt; Controller調用Model方法，影響Model資料(新增或修改) -&gt; 修改完Controller再次呼叫View渲染的方法 -&gt; View根據更新後的資料重新渲染</li>\n<li>達到View及Model透過Controller進行彼此的溝通而不直接互相影響。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007052/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-4/%E5%82%B3%E7%B5%B1%E7%B6%B2%E9%A0%81%E7%B5%90%E6%A7%8B_bkkbwr.jpg\" alt=\"關注點分離-網頁結構\"></li>\n<li>透過以下流程搭配程式碼進行說明<ol>\n<li>用戶與界面互動，觸發 Controller 的相應方法。<ul>\n<li>使用者在瀏覽器點擊移除。</li>\n</ul>\n</li>\n<li>Controller 根據用戶的輸入操作 Model。<ul>\n<li>按鈕的點擊事件觸發了 removeData 方法，這是 Controller 中的一個相應方法。</li>\n</ul>\n</li>\n<li>Model 的狀態發生變化。<ul>\n<li>removeData方法中使用了 splice 方法來移除資料陣列 data 中的特定項目，即刪除了一個資料項。</li>\n</ul>\n</li>\n<li>Controller 得知 Model 狀態的變化，通知相應的 View。<ul>\n<li>removeData方法執行完畢後，立即呼叫了 render 方法，這是通知 View 部分。</li>\n</ul>\n</li>\n<li>View 從 Model 中獲取最新的數據。<ul>\n<li>render方法內部重新遍歷資料陣列，創建新的HTML元素，並更新 DOM 中的內容。</li>\n</ul>\n</li>\n<li>View 使用這些數據更新界面。<ul>\n<li>新的HTML元素被注入到DOM中，此時界面上的列表已經更新，反映了資料變化。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/LYqevQL\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Model的部分</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: [</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第一句話&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第二句話&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;這是第三句話&#x27;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"title function_\">removeData</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">splice</span>(id, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// View的部分</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"title function_\">renderList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.component ul&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      content = <span class=\"string\">`<span class=\"subst\">$&#123;content&#125;</span>&lt;li&gt;<span class=\"subst\">$&#123;item&#125;</span> &lt;button type=&quot;button&quot; class=&quot;btn&quot; data-id=&quot;<span class=\"subst\">$&#123;i&#125;</span>&quot;&gt;移除&lt;/button&gt;&lt;/li&gt;`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    list.<span class=\"property\">innerHTML</span> = content;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">addEventListeners</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> btns = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.btn&#x27;</span>);</span><br><span class=\"line\">    btns.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">btn</span> =&gt;</span> btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> id = e.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">removeData</span>(id);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Controller</span></span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 渲染方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">renderList</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">addEventListeners</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// --------</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">component.<span class=\"title function_\">init</span>();</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript(2)：深入了解This的指向與應用","date":"2023-11-28T14:22:45.000Z","description":"探索JavaScript This 的指向：深入剖析判斷的技巧。","_content":"\n<strong>JavaScript this指向跟調用關係有關</strong>\n\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 一個函式中包含多少參數\n\n```javascript=\nvar a = '全域'\nfunction fn(params) {\n  console.log(params, this, window, arguments);\n}\nfn(100, 200, 300)\n```\n\n- 每個Function都擁有**params**及**arguments**\n  - params(參數)：參數是函式定義中所列出的變數\n    - 100\n  - arguments(引數)：引數是當我們呼叫函式時傳遞給它的值\n    - [100, 200, 300]\n    - 這個是類陣列(Array-like)：意思就是他不是真的陣列，有一些方法他並無法使用，雖然他可以查看長度，以及變更參數的值，但是他不是純陣列。\n  - this(隱含的引數)：根據調用的方式指向的位置不同(這邊是全域變數也就是window)\n- window：預設的全域變數。\n\n---\n\n- 接著讓我們來了解不同情況的this的指向(以調用的方式為主)\n- 這邊this是callSomeone的孩子，本身自己調用函式的情況下this會指向全域(window)變數，也就是全域變數的someone。\n\n```javascript=\nvar someone = '全域';\nfunction callSomeone() {\n  console.log(this.someone);\n}\ncallSomeone();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n---\n\n### 案例1.傳統函式this指向\n\n- 當前案例this是callSomeone的小孩。\n- 調用的方式改成透過obj去調用這個callSome，這時候this會改指向前面的這個怪叔叔，也就是obj，所以這邊的this已經不是window，已經改變成obj，自然this.someone就會變成obj裡面的someone。\n\n```javascript=\nvar someone = '搗蛋鬼'\nvar obj = {\n  someone: '物件',\n  callSomeone() {\n    console.log(this.someone);\n  }\n}\nobj.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n物件\n```\n\n---\n\n### 案例2.引用傳統函式this指向(小小變形一下)\n\n- 雖然原本定義在obj裡面的function變成引用外面的function，但調用的方式依然是obj2.callSomeone()，傳統函式的情況大多符合這種規則。\n\n```javascript=\nvar someone = '全域';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar obj2 = {\n  someone: '物件2',\n  callSomeone\n}\nobj2.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n物件2\n```\n\n---\n\n### 案例3.夾帶兩層函式的this指向\n\n- 這邊可以看到wrapObj.callSomeone()這個是由wrapObj調用，因此this會指向wrapObj這個物件，自然就會將this.someone定義成外層物件。\n- 而wrapObj.innerObj.callSomeone()調用的人改變成innderObj，因此調用的this.someone將會定義成innerObj裡面的內層物件。\n\n```javascript=\n\nvar someone = '搗蛋鬼';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar wrapObj = {\n  someone: '外層物件',\n  callSomeone,\n  innerObj: {\n    someone: '內層物件',\n    callSomeone,\n  }\n}\nwrapObj.callSomeone()\nwrapObj.innerObj.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n外層物件\n內層物件\n```\n\n---\n\n### 特殊案例1.間接使用this函式\n\n- 我們來看看特別一些的案例，記清楚剛剛說過this只取決於調用他的人是誰，callSomeone前面並沒有人使用它，因此他的this會指向全域(陷阱題)。\n\n```javascript=\nvar someone = '搗蛋鬼';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar obj3 = {\n  someone: '物件 3',\n  fn() {\n    callSomeone();\n  }\n}\nobj3.fn();\n```\n\n顯示如下：\n\n```javascript=\n搗蛋鬼\n```\n\n---\n\n### 特殊案例2.setTimeout回調函式\n\n- 大部分傳統函式的情況下，遇到回調函式，this會指向全域變數，因此this.someone會變成搗蛋鬼。\n\n```javascript=\nvar someone = '搗蛋鬼';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(function () {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n搗蛋鬼\n```\n","source":"_posts/2023-11-28-JS-2.md","raw":"---\ntitle: JavaScript(2)：深入了解This的指向與應用\ndate: 2023-11-28 22:22:45\ntags:\ncategories:\n- [JavaScript]\ndescription: 探索JavaScript This 的指向：深入剖析判斷的技巧。\n---\n\n<strong>JavaScript this指向跟調用關係有關</strong>\n\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 一個函式中包含多少參數\n\n```javascript=\nvar a = '全域'\nfunction fn(params) {\n  console.log(params, this, window, arguments);\n}\nfn(100, 200, 300)\n```\n\n- 每個Function都擁有**params**及**arguments**\n  - params(參數)：參數是函式定義中所列出的變數\n    - 100\n  - arguments(引數)：引數是當我們呼叫函式時傳遞給它的值\n    - [100, 200, 300]\n    - 這個是類陣列(Array-like)：意思就是他不是真的陣列，有一些方法他並無法使用，雖然他可以查看長度，以及變更參數的值，但是他不是純陣列。\n  - this(隱含的引數)：根據調用的方式指向的位置不同(這邊是全域變數也就是window)\n- window：預設的全域變數。\n\n---\n\n- 接著讓我們來了解不同情況的this的指向(以調用的方式為主)\n- 這邊this是callSomeone的孩子，本身自己調用函式的情況下this會指向全域(window)變數，也就是全域變數的someone。\n\n```javascript=\nvar someone = '全域';\nfunction callSomeone() {\n  console.log(this.someone);\n}\ncallSomeone();\n```\n\n顯示如下：\n\n```javascript=\n全域\n```\n\n---\n\n### 案例1.傳統函式this指向\n\n- 當前案例this是callSomeone的小孩。\n- 調用的方式改成透過obj去調用這個callSome，這時候this會改指向前面的這個怪叔叔，也就是obj，所以這邊的this已經不是window，已經改變成obj，自然this.someone就會變成obj裡面的someone。\n\n```javascript=\nvar someone = '搗蛋鬼'\nvar obj = {\n  someone: '物件',\n  callSomeone() {\n    console.log(this.someone);\n  }\n}\nobj.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n物件\n```\n\n---\n\n### 案例2.引用傳統函式this指向(小小變形一下)\n\n- 雖然原本定義在obj裡面的function變成引用外面的function，但調用的方式依然是obj2.callSomeone()，傳統函式的情況大多符合這種規則。\n\n```javascript=\nvar someone = '全域';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar obj2 = {\n  someone: '物件2',\n  callSomeone\n}\nobj2.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n物件2\n```\n\n---\n\n### 案例3.夾帶兩層函式的this指向\n\n- 這邊可以看到wrapObj.callSomeone()這個是由wrapObj調用，因此this會指向wrapObj這個物件，自然就會將this.someone定義成外層物件。\n- 而wrapObj.innerObj.callSomeone()調用的人改變成innderObj，因此調用的this.someone將會定義成innerObj裡面的內層物件。\n\n```javascript=\n\nvar someone = '搗蛋鬼';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar wrapObj = {\n  someone: '外層物件',\n  callSomeone,\n  innerObj: {\n    someone: '內層物件',\n    callSomeone,\n  }\n}\nwrapObj.callSomeone()\nwrapObj.innerObj.callSomeone();\n```\n\n顯示如下：\n\n```javascript=\n外層物件\n內層物件\n```\n\n---\n\n### 特殊案例1.間接使用this函式\n\n- 我們來看看特別一些的案例，記清楚剛剛說過this只取決於調用他的人是誰，callSomeone前面並沒有人使用它，因此他的this會指向全域(陷阱題)。\n\n```javascript=\nvar someone = '搗蛋鬼';\nfunction callSomeone() {\n  console.log(this.someone);\n}\nvar obj3 = {\n  someone: '物件 3',\n  fn() {\n    callSomeone();\n  }\n}\nobj3.fn();\n```\n\n顯示如下：\n\n```javascript=\n搗蛋鬼\n```\n\n---\n\n### 特殊案例2.setTimeout回調函式\n\n- 大部分傳統函式的情況下，遇到回調函式，this會指向全域變數，因此this.someone會變成搗蛋鬼。\n\n```javascript=\nvar someone = '搗蛋鬼';\nvar obj4 = {\n  someone: '物件 4',\n  fn() {\n    setTimeout(function () {\n      console.log(this.someone);\n    });\n  }\n}\nobj4.fn();\n```\n\n顯示如下：\n\n```javascript=\n搗蛋鬼\n```\n","slug":"JS-2","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3s000q48z11cieg94v","content":"<p><strong>JavaScript this指向跟調用關係有關</strong></p>\n<hr>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"一個函式中包含多少參數\"><a href=\"#一個函式中包含多少參數\" class=\"headerlink\" title=\"一個函式中包含多少參數\"></a>一個函式中包含多少參數</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params, <span class=\"variable language_\">this</span>, <span class=\"variable language_\">window</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每個Function都擁有<strong>params</strong>及<strong>arguments</strong><ul>\n<li>params(參數)：參數是函式定義中所列出的變數<ul>\n<li>100</li>\n</ul>\n</li>\n<li>arguments(引數)：引數是當我們呼叫函式時傳遞給它的值<ul>\n<li>[100, 200, 300]</li>\n<li>這個是類陣列(Array-like)：意思就是他不是真的陣列，有一些方法他並無法使用，雖然他可以查看長度，以及變更參數的值，但是他不是純陣列。</li>\n</ul>\n</li>\n<li>this(隱含的引數)：根據調用的方式指向的位置不同(這邊是全域變數也就是window)</li>\n</ul>\n</li>\n<li>window：預設的全域變數。</li>\n</ul>\n<hr>\n<ul>\n<li>接著讓我們來了解不同情況的this的指向(以調用的方式為主)</li>\n<li>這邊this是callSomeone的孩子，本身自己調用函式的情況下this會指向全域(window)變數，也就是全域變數的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例1-傳統函式this指向\"><a href=\"#案例1-傳統函式this指向\" class=\"headerlink\" title=\"案例1.傳統函式this指向\"></a>案例1.傳統函式this指向</h3><ul>\n<li>當前案例this是callSomeone的小孩。</li>\n<li>調用的方式改成透過obj去調用這個callSome，這時候this會改指向前面的這個怪叔叔，也就是obj，所以這邊的this已經不是window，已經改變成obj，自然this.someone就會變成obj裡面的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例2-引用傳統函式this指向-小小變形一下\"><a href=\"#案例2-引用傳統函式this指向-小小變形一下\" class=\"headerlink\" title=\"案例2.引用傳統函式this指向(小小變形一下)\"></a>案例2.引用傳統函式this指向(小小變形一下)</h3><ul>\n<li>雖然原本定義在obj裡面的function變成引用外面的function，但調用的方式依然是obj2.callSomeone()，傳統函式的情況大多符合這種規則。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件2&#x27;</span>,</span><br><span class=\"line\">  callSomeone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例3-夾帶兩層函式的this指向\"><a href=\"#案例3-夾帶兩層函式的this指向\" class=\"headerlink\" title=\"案例3.夾帶兩層函式的this指向\"></a>案例3.夾帶兩層函式的this指向</h3><ul>\n<li>這邊可以看到wrapObj.callSomeone()這個是由wrapObj調用，因此this會指向wrapObj這個物件，自然就會將this.someone定義成外層物件。</li>\n<li>而wrapObj.innerObj.callSomeone()調用的人改變成innderObj，因此調用的this.someone將會定義成innerObj裡面的內層物件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;外層物件&#x27;</span>,</span><br><span class=\"line\">  callSomeone,</span><br><span class=\"line\">  <span class=\"attr\">innerObj</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;內層物件&#x27;</span>,</span><br><span class=\"line\">    callSomeone,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wrapObj.<span class=\"title function_\">callSomeone</span>()</span><br><span class=\"line\">wrapObj.<span class=\"property\">innerObj</span>.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外層物件</span><br><span class=\"line\">內層物件</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"特殊案例1-間接使用this函式\"><a href=\"#特殊案例1-間接使用this函式\" class=\"headerlink\" title=\"特殊案例1.間接使用this函式\"></a>特殊案例1.間接使用this函式</h3><ul>\n<li>我們來看看特別一些的案例，記清楚剛剛說過this只取決於調用他的人是誰，callSomeone前面並沒有人使用它，因此他的this會指向全域(陷阱題)。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 3&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callSomeone</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj3.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搗蛋鬼</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"特殊案例2-setTimeout回調函式\"><a href=\"#特殊案例2-setTimeout回調函式\" class=\"headerlink\" title=\"特殊案例2.setTimeout回調函式\"></a>特殊案例2.setTimeout回調函式</h3><ul>\n<li>大部分傳統函式的情況下，遇到回調函式，this會指向全域變數，因此this.someone會變成搗蛋鬼。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搗蛋鬼</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2191,"excerpt":"","more":"<p><strong>JavaScript this指向跟調用關係有關</strong></p>\n<hr>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"一個函式中包含多少參數\"><a href=\"#一個函式中包含多少參數\" class=\"headerlink\" title=\"一個函式中包含多少參數\"></a>一個函式中包含多少參數</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;全域&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params, <span class=\"variable language_\">this</span>, <span class=\"variable language_\">window</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每個Function都擁有<strong>params</strong>及<strong>arguments</strong><ul>\n<li>params(參數)：參數是函式定義中所列出的變數<ul>\n<li>100</li>\n</ul>\n</li>\n<li>arguments(引數)：引數是當我們呼叫函式時傳遞給它的值<ul>\n<li>[100, 200, 300]</li>\n<li>這個是類陣列(Array-like)：意思就是他不是真的陣列，有一些方法他並無法使用，雖然他可以查看長度，以及變更參數的值，但是他不是純陣列。</li>\n</ul>\n</li>\n<li>this(隱含的引數)：根據調用的方式指向的位置不同(這邊是全域變數也就是window)</li>\n</ul>\n</li>\n<li>window：預設的全域變數。</li>\n</ul>\n<hr>\n<ul>\n<li>接著讓我們來了解不同情況的this的指向(以調用的方式為主)</li>\n<li>這邊this是callSomeone的孩子，本身自己調用函式的情況下this會指向全域(window)變數，也就是全域變數的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全域</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例1-傳統函式this指向\"><a href=\"#案例1-傳統函式this指向\" class=\"headerlink\" title=\"案例1.傳統函式this指向\"></a>案例1.傳統函式this指向</h3><ul>\n<li>當前案例this是callSomeone的小孩。</li>\n<li>調用的方式改成透過obj去調用這個callSome，這時候this會改指向前面的這個怪叔叔，也就是obj，所以這邊的this已經不是window，已經改變成obj，自然this.someone就會變成obj裡面的someone。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例2-引用傳統函式this指向-小小變形一下\"><a href=\"#案例2-引用傳統函式this指向-小小變形一下\" class=\"headerlink\" title=\"案例2.引用傳統函式this指向(小小變形一下)\"></a>案例2.引用傳統函式this指向(小小變形一下)</h3><ul>\n<li>雖然原本定義在obj裡面的function變成引用外面的function，但調用的方式依然是obj2.callSomeone()，傳統函式的情況大多符合這種規則。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;全域&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件2&#x27;</span>,</span><br><span class=\"line\">  callSomeone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"案例3-夾帶兩層函式的this指向\"><a href=\"#案例3-夾帶兩層函式的this指向\" class=\"headerlink\" title=\"案例3.夾帶兩層函式的this指向\"></a>案例3.夾帶兩層函式的this指向</h3><ul>\n<li>這邊可以看到wrapObj.callSomeone()這個是由wrapObj調用，因此this會指向wrapObj這個物件，自然就會將this.someone定義成外層物件。</li>\n<li>而wrapObj.innerObj.callSomeone()調用的人改變成innderObj，因此調用的this.someone將會定義成innerObj裡面的內層物件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wrapObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;外層物件&#x27;</span>,</span><br><span class=\"line\">  callSomeone,</span><br><span class=\"line\">  <span class=\"attr\">innerObj</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;內層物件&#x27;</span>,</span><br><span class=\"line\">    callSomeone,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wrapObj.<span class=\"title function_\">callSomeone</span>()</span><br><span class=\"line\">wrapObj.<span class=\"property\">innerObj</span>.<span class=\"title function_\">callSomeone</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外層物件</span><br><span class=\"line\">內層物件</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"特殊案例1-間接使用this函式\"><a href=\"#特殊案例1-間接使用this函式\" class=\"headerlink\" title=\"特殊案例1.間接使用this函式\"></a>特殊案例1.間接使用this函式</h3><ul>\n<li>我們來看看特別一些的案例，記清楚剛剛說過this只取決於調用他的人是誰，callSomeone前面並沒有人使用它，因此他的this會指向全域(陷阱題)。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callSomeone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 3&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callSomeone</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj3.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搗蛋鬼</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"特殊案例2-setTimeout回調函式\"><a href=\"#特殊案例2-setTimeout回調函式\" class=\"headerlink\" title=\"特殊案例2.setTimeout回調函式\"></a>特殊案例2.setTimeout回調函式</h3><ul>\n<li>大部分傳統函式的情況下，遇到回調函式，this會指向全域變數，因此this.someone會變成搗蛋鬼。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someone = <span class=\"string\">&#x27;搗蛋鬼&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj4 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">someone</span>: <span class=\"string\">&#x27;物件 4&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">someone</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj4.<span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搗蛋鬼</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript(5)：物件傳參考特性(Pass by reference)","date":"2023-11-29T01:55:50.000Z","description":"淺拷貝(shallow copy)與深拷貝(deep copy)在JavaScript中的應用與理解","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## JS-5 Javascript物件傳參考特性\n\nJS的型別大致可分為原始型別(Primitive Types)及物件(Object)兩種\n\n- 原始型別(Primitive Types)：傳值(Pass by value)\n  - **本身不可變**\n- 物件(Object)：傳參考(Pass by reference)\n  - **本身可變**\n\n## 原始型別(Primitive Types)\n\n- Number\n  - 整數\n  - 含小數點\n  - Infinity(無窮大)\n  - -Infinity(負無窮大)\n  - NaN(Not A Number)--->不是數值\n- BigInt\n- String\n- Boolean\n  - true\n  - false\n- Undefined\n- Null\n- Symbol\n\n---\n\n- 宣告方式如下\n\n```javascript=\n// ↓數字\nlet num = 42;\n// ↓字串\nlet str = \"Hello, World!\";\n// ↓布林\nlet isTrue = true;\nlet isFalse = false;\n// ↓未定義\nlet undefinedVar;\n// ↓空值\nlet nullVar = null;\n// ↓符號\nlet sym = Symbol(\"uniqueSymbol\");\n```\n\n## 物件資料(Object data)\n\n- 物件 (Object)\n- 陣列 (Array)\n- 函數 (Function)\n\n```javascript=\n// ↓物件 (Object)\nlet person = {\n  name: \"John\",\n  age: 30,\n  isStudent: false\n};\n// ↓陣列 (Array)\nlet fruits = [\"apple\", \"orange\", \"banana\"];\n// ↓函數 (Function)\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n```\n\n## javascript-原始型別-傳值(Pass by value)\n\n- 傳遞原始型別的值時，是按值傳遞的。函數接收的是原始值的一個複本，對這個複本的修改不會影響原始值。\n\n```javascript=\nlet a = 100\nlet b = a\nb = 200\nconsole.log(a)\n```\n\n顯示如下：\n\n```javascript=\n100\n```\n\n## javascript-物件-傳參考(Pass by reference)\n\n- 當傳遞物件（Object）或陣列（Array）等引用型別的值時，函數接收的是物件或陣列的參考，對這個參考的修改會影響原始物件或陣列。\n\n```javascript=\nlet a = {\"food\": \"apple\"}\nlet b = a\nb.food = \"banana\"\nconsole.log(a)\n```\n\n顯示如下：\n\n```javascript=\n{ food: 'banana' }\n```\n\n## 淺拷貝(Shallow copy)\n\n- 只拷貝被複製物件的第一層屬性，而不是整個物件及其嵌套的屬性。換句話說，淺拷貝創建了一個新的物件，並將原始物件的直接屬性複製到新的物件中，但對於原始物件中的物件（如物件中的物件），它們仍然是引用，而不是被複製的。\n- 成功複製第一層物件的屬性，且彼此互不影響。\n\n```javascript=\nlet a = { \"food\": \"apple\" }\nlet b = { ...a }\nb.food = \"banana\"\nconsole.log(\"a變數= \", a)\nconsole.log(\"b變數= \", b)\n```\n\n顯示如下：\n\n```javascript=\na變數=  { food: 'apple' }\nb變數=  { food: 'banana' }\n```\n\n---\n\n- 物件中的物件因為指向同一記憶體位址，因此彼此變動會連動。\n\n```javascript=\nlet a = { \"food\": \"apple\", obj : {\"feeling\": \"happy\"} }\nlet b = { ...a }\na.obj.feeling = \"sad\"\nconsole.log(\"a變數= \", a)\nconsole.log(\"b變數= \", b)\n```\n\n顯示如下：\n\n```javascript=\na變數=  { food: 'apple', obj: { feeling: 'sad' } }\nb變數=  { food: 'apple', obj: { feeling: 'sad' } }\n```\n\n## 淺拷貝的方式\n\n### ...展開運算子(Spread operator)\n\n- 上面的案例即是採用展開運算子\n\n### 使用Object.assign()的方法\n\n```javascript=\nconst originalObject = { a: 1, b: { c: 2 } };\nconst shallowCopiedObject = Object.assign({}, originalObject);\nshallowCopiedObject.a = 2\nshallowCopiedObject.b.c = 100000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"shallowCopiedObject\", shallowCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 100000 } }\nshallowCopiedObject { a: 2, b: { c: 100000 } }\n```\n\n### 陣列能夠使用slice的方法\n\n```javascript=\nconst originalArray = [1, [2, 3], 4];\nconst shallowCopiedArray = originalArray.slice();\nshallowCopiedArray[0] = 'X1';\nshallowCopiedArray[1][0] = 'X2';\nconsole.log(\"originalArray\", originalArray);\nconsole.log(\"shallowCopiedArray\", shallowCopiedArray);\n```\n\n顯示如下：\n\n```javascript=\noriginalArray [ 1, [ 'X2', 3 ], 4 ]\nshallowCopiedArray [ 'X1', [ 'X2', 3 ], 4 ]\n```\n\n### 手動複製物件中其中一層資料\n\n```javascript=\nlet a = { \"food\": \"apple\", obj: { \"feeling\": \"happy\" } }\nlet b = { \"food\": a.food, obj: a.obj }\nconsole.log(\"改變前a\", a)\nconsole.log(\"改變前b\", b)\nb.food = \"banana\"\nb.obj.feeling = \"sad\" \nconsole.log(\"------------\")\nconsole.log(\"改變後a\", a)\nconsole.log(\"改變後b\", b)\n```\n\n顯示如下\n\n```javascript=\n改變前a { food: 'apple', obj: { feeling: 'happy' } }\n改變前b { food: 'apple', obj: { feeling: 'happy' } }\n------------\n改變後a { food: 'apple', obj: { feeling: 'sad' } }\n改變後b { food: 'banana', obj: { feeling: 'sad' } }\n```\n\n## 深拷貝(Deep Copy)\n\n- 是指創建一個新的物件，並且這個新物件的所有屬性的值都是原始物件相對應屬性值的複本。深拷貝會遞迴地複製原始物件及其所有嵌套的物件，使得新的物件和原始物件在記憶體中獨立存在，修改其中一個物件不會影響另一個。\n\n## 深拷貝的方式\n\n### 使用 JSON.parse() 和 JSON.stringify()\n\n```javascript=\nconst originalObject = { a: 1, b: { c: 2 } };\nconst deepCopiedObject = JSON.parse(JSON.stringify(originalObject));\ndeepCopiedObject.a = 200\ndeepCopiedObject.b.c = 4000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"deepCopiedObject\", deepCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 2 } }\ndeepCopiedObject { a: 200, b: { c: 4000 } }\n```\n\n需注意使用此方式會有些意外情況如下\n\n- undefined：undefined的值會在序列化過程中完全丟失，包括包含 undefined 值的鍵本身。\n- NaN：NaN會被強制轉換成null。\n- Infinity和-Infinity：這兩個特殊的數字值會被強制轉換成 null。\n- 正則表達式(RegExp)：正則表達式會被強制轉換為空物件\n- 日期(Date)：日期會被轉換成對應的字符串形式。\n- 函數(Function)：函數是無法被序列化的，它們會被忽略。\n- 符號Symbol 會被忽略，不會被序列化\n\n```javascript=\nconst originalData = {\n    undefinedValue: undefined,\n    notANumberValue: NaN,\n    infinityValue: Infinity,\n    regExpValue: /.*/,\n    dateValue: new Date('1999-12-31T23:59:59'),\n    functionValue: function() {},\n    symbolValue: Symbol('uniqueSymbol')\n};\nconst faultyClonedData = JSON.parse(JSON.stringify(originalData));\nconsole.log(\"undefineValue\", faultyClonedData.undefinedValue);\nconsole.log(\"NaNValue\", faultyClonedData.notANumberValue);\nconsole.log(\"InfinityValue\", faultyClonedData.infinityValue);\nconsole.log(\"regExpValue\", faultyClonedData.regExpValue);\nconsole.log(\"dateValue\", faultyClonedData.dateValue);\nconsole.log(\"function\", faultyClonedData.functionValue);\nconsole.log(\"symbolValue\", faultyClonedData.symbolValue);\n```\n\n顯示如下\n\n```javascript=\nundefineValue undefined\nNaNValue null\nInfinityValue null\nregExpValue {}\ndateValue 1999-12-31T15:59:59.000Z\nfunction undefined\nsymbolValue undefined\n```\n\n### 使用第三方庫（例如 Lodash）\n\n```javascript=\nconst _ = require('lodash');\nconst originalObject = { a: 1, b: { c: 2 } };\nconst deepCopiedObject = _.cloneDeep(originalObject);\ndeepCopiedObject.a = 30\ndeepCopiedObject.b.c = 4000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"deepCopiedObject\", deepCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 2 } }\ndeepCopiedObject { a: 30, b: { c: 4000 } }\n```\n","source":"_posts/2023-11-29-JS-5.md","raw":"---\ntitle: JavaScript(5)：物件傳參考特性(Pass by reference)\ndate: 2023-11-29 09:55:50\ntags:\n- [Pass by reference]\n- [shallow copy]\n- [deep copy]\ncategories:\n- [JavaScript]\ndescription: 淺拷貝(shallow copy)與深拷貝(deep copy)在JavaScript中的應用與理解\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## JS-5 Javascript物件傳參考特性\n\nJS的型別大致可分為原始型別(Primitive Types)及物件(Object)兩種\n\n- 原始型別(Primitive Types)：傳值(Pass by value)\n  - **本身不可變**\n- 物件(Object)：傳參考(Pass by reference)\n  - **本身可變**\n\n## 原始型別(Primitive Types)\n\n- Number\n  - 整數\n  - 含小數點\n  - Infinity(無窮大)\n  - -Infinity(負無窮大)\n  - NaN(Not A Number)--->不是數值\n- BigInt\n- String\n- Boolean\n  - true\n  - false\n- Undefined\n- Null\n- Symbol\n\n---\n\n- 宣告方式如下\n\n```javascript=\n// ↓數字\nlet num = 42;\n// ↓字串\nlet str = \"Hello, World!\";\n// ↓布林\nlet isTrue = true;\nlet isFalse = false;\n// ↓未定義\nlet undefinedVar;\n// ↓空值\nlet nullVar = null;\n// ↓符號\nlet sym = Symbol(\"uniqueSymbol\");\n```\n\n## 物件資料(Object data)\n\n- 物件 (Object)\n- 陣列 (Array)\n- 函數 (Function)\n\n```javascript=\n// ↓物件 (Object)\nlet person = {\n  name: \"John\",\n  age: 30,\n  isStudent: false\n};\n// ↓陣列 (Array)\nlet fruits = [\"apple\", \"orange\", \"banana\"];\n// ↓函數 (Function)\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n```\n\n## javascript-原始型別-傳值(Pass by value)\n\n- 傳遞原始型別的值時，是按值傳遞的。函數接收的是原始值的一個複本，對這個複本的修改不會影響原始值。\n\n```javascript=\nlet a = 100\nlet b = a\nb = 200\nconsole.log(a)\n```\n\n顯示如下：\n\n```javascript=\n100\n```\n\n## javascript-物件-傳參考(Pass by reference)\n\n- 當傳遞物件（Object）或陣列（Array）等引用型別的值時，函數接收的是物件或陣列的參考，對這個參考的修改會影響原始物件或陣列。\n\n```javascript=\nlet a = {\"food\": \"apple\"}\nlet b = a\nb.food = \"banana\"\nconsole.log(a)\n```\n\n顯示如下：\n\n```javascript=\n{ food: 'banana' }\n```\n\n## 淺拷貝(Shallow copy)\n\n- 只拷貝被複製物件的第一層屬性，而不是整個物件及其嵌套的屬性。換句話說，淺拷貝創建了一個新的物件，並將原始物件的直接屬性複製到新的物件中，但對於原始物件中的物件（如物件中的物件），它們仍然是引用，而不是被複製的。\n- 成功複製第一層物件的屬性，且彼此互不影響。\n\n```javascript=\nlet a = { \"food\": \"apple\" }\nlet b = { ...a }\nb.food = \"banana\"\nconsole.log(\"a變數= \", a)\nconsole.log(\"b變數= \", b)\n```\n\n顯示如下：\n\n```javascript=\na變數=  { food: 'apple' }\nb變數=  { food: 'banana' }\n```\n\n---\n\n- 物件中的物件因為指向同一記憶體位址，因此彼此變動會連動。\n\n```javascript=\nlet a = { \"food\": \"apple\", obj : {\"feeling\": \"happy\"} }\nlet b = { ...a }\na.obj.feeling = \"sad\"\nconsole.log(\"a變數= \", a)\nconsole.log(\"b變數= \", b)\n```\n\n顯示如下：\n\n```javascript=\na變數=  { food: 'apple', obj: { feeling: 'sad' } }\nb變數=  { food: 'apple', obj: { feeling: 'sad' } }\n```\n\n## 淺拷貝的方式\n\n### ...展開運算子(Spread operator)\n\n- 上面的案例即是採用展開運算子\n\n### 使用Object.assign()的方法\n\n```javascript=\nconst originalObject = { a: 1, b: { c: 2 } };\nconst shallowCopiedObject = Object.assign({}, originalObject);\nshallowCopiedObject.a = 2\nshallowCopiedObject.b.c = 100000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"shallowCopiedObject\", shallowCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 100000 } }\nshallowCopiedObject { a: 2, b: { c: 100000 } }\n```\n\n### 陣列能夠使用slice的方法\n\n```javascript=\nconst originalArray = [1, [2, 3], 4];\nconst shallowCopiedArray = originalArray.slice();\nshallowCopiedArray[0] = 'X1';\nshallowCopiedArray[1][0] = 'X2';\nconsole.log(\"originalArray\", originalArray);\nconsole.log(\"shallowCopiedArray\", shallowCopiedArray);\n```\n\n顯示如下：\n\n```javascript=\noriginalArray [ 1, [ 'X2', 3 ], 4 ]\nshallowCopiedArray [ 'X1', [ 'X2', 3 ], 4 ]\n```\n\n### 手動複製物件中其中一層資料\n\n```javascript=\nlet a = { \"food\": \"apple\", obj: { \"feeling\": \"happy\" } }\nlet b = { \"food\": a.food, obj: a.obj }\nconsole.log(\"改變前a\", a)\nconsole.log(\"改變前b\", b)\nb.food = \"banana\"\nb.obj.feeling = \"sad\" \nconsole.log(\"------------\")\nconsole.log(\"改變後a\", a)\nconsole.log(\"改變後b\", b)\n```\n\n顯示如下\n\n```javascript=\n改變前a { food: 'apple', obj: { feeling: 'happy' } }\n改變前b { food: 'apple', obj: { feeling: 'happy' } }\n------------\n改變後a { food: 'apple', obj: { feeling: 'sad' } }\n改變後b { food: 'banana', obj: { feeling: 'sad' } }\n```\n\n## 深拷貝(Deep Copy)\n\n- 是指創建一個新的物件，並且這個新物件的所有屬性的值都是原始物件相對應屬性值的複本。深拷貝會遞迴地複製原始物件及其所有嵌套的物件，使得新的物件和原始物件在記憶體中獨立存在，修改其中一個物件不會影響另一個。\n\n## 深拷貝的方式\n\n### 使用 JSON.parse() 和 JSON.stringify()\n\n```javascript=\nconst originalObject = { a: 1, b: { c: 2 } };\nconst deepCopiedObject = JSON.parse(JSON.stringify(originalObject));\ndeepCopiedObject.a = 200\ndeepCopiedObject.b.c = 4000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"deepCopiedObject\", deepCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 2 } }\ndeepCopiedObject { a: 200, b: { c: 4000 } }\n```\n\n需注意使用此方式會有些意外情況如下\n\n- undefined：undefined的值會在序列化過程中完全丟失，包括包含 undefined 值的鍵本身。\n- NaN：NaN會被強制轉換成null。\n- Infinity和-Infinity：這兩個特殊的數字值會被強制轉換成 null。\n- 正則表達式(RegExp)：正則表達式會被強制轉換為空物件\n- 日期(Date)：日期會被轉換成對應的字符串形式。\n- 函數(Function)：函數是無法被序列化的，它們會被忽略。\n- 符號Symbol 會被忽略，不會被序列化\n\n```javascript=\nconst originalData = {\n    undefinedValue: undefined,\n    notANumberValue: NaN,\n    infinityValue: Infinity,\n    regExpValue: /.*/,\n    dateValue: new Date('1999-12-31T23:59:59'),\n    functionValue: function() {},\n    symbolValue: Symbol('uniqueSymbol')\n};\nconst faultyClonedData = JSON.parse(JSON.stringify(originalData));\nconsole.log(\"undefineValue\", faultyClonedData.undefinedValue);\nconsole.log(\"NaNValue\", faultyClonedData.notANumberValue);\nconsole.log(\"InfinityValue\", faultyClonedData.infinityValue);\nconsole.log(\"regExpValue\", faultyClonedData.regExpValue);\nconsole.log(\"dateValue\", faultyClonedData.dateValue);\nconsole.log(\"function\", faultyClonedData.functionValue);\nconsole.log(\"symbolValue\", faultyClonedData.symbolValue);\n```\n\n顯示如下\n\n```javascript=\nundefineValue undefined\nNaNValue null\nInfinityValue null\nregExpValue {}\ndateValue 1999-12-31T15:59:59.000Z\nfunction undefined\nsymbolValue undefined\n```\n\n### 使用第三方庫（例如 Lodash）\n\n```javascript=\nconst _ = require('lodash');\nconst originalObject = { a: 1, b: { c: 2 } };\nconst deepCopiedObject = _.cloneDeep(originalObject);\ndeepCopiedObject.a = 30\ndeepCopiedObject.b.c = 4000\nconsole.log(\"originalObject\", originalObject)\nconsole.log(\"deepCopiedObject\", deepCopiedObject)\n```\n\n顯示如下：\n\n```javascript=\noriginalObject { a: 1, b: { c: 2 } }\ndeepCopiedObject { a: 30, b: { c: 4000 } }\n```\n","slug":"JS-5","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3s000s48z17s1m827w","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"JS-5-Javascript物件傳參考特性\"><a href=\"#JS-5-Javascript物件傳參考特性\" class=\"headerlink\" title=\"JS-5 Javascript物件傳參考特性\"></a>JS-5 Javascript物件傳參考特性</h2><p>JS的型別大致可分為原始型別(Primitive Types)及物件(Object)兩種</p>\n<ul>\n<li>原始型別(Primitive Types)：傳值(Pass by value)<ul>\n<li><strong>本身不可變</strong></li>\n</ul>\n</li>\n<li>物件(Object)：傳參考(Pass by reference)<ul>\n<li><strong>本身可變</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原始型別-Primitive-Types\"><a href=\"#原始型別-Primitive-Types\" class=\"headerlink\" title=\"原始型別(Primitive Types)\"></a>原始型別(Primitive Types)</h2><ul>\n<li>Number<ul>\n<li>整數</li>\n<li>含小數點</li>\n<li>Infinity(無窮大)</li>\n<li>-Infinity(負無窮大)</li>\n<li>NaN(Not A Number)—&gt;不是數值</li>\n</ul>\n</li>\n<li>BigInt</li>\n<li>String</li>\n<li>Boolean<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>Undefined</li>\n<li>Null</li>\n<li>Symbol</li>\n</ul>\n<hr>\n<ul>\n<li>宣告方式如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓數字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓字串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓布林</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isFalse = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓未定義</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> undefinedVar;</span><br><span class=\"line\"><span class=\"comment\">// ↓空值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nullVar = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓符號</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;uniqueSymbol&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件資料-Object-data\"><a href=\"#物件資料-Object-data\" class=\"headerlink\" title=\"物件資料(Object data)\"></a>物件資料(Object data)</h2><ul>\n<li>物件 (Object)</li>\n<li>陣列 (Array)</li>\n<li>函數 (Function)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓物件 (Object)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"attr\">isStudent</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ↓陣列 (Array)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">// ↓函數 (Function)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript-原始型別-傳值-Pass-by-value\"><a href=\"#javascript-原始型別-傳值-Pass-by-value\" class=\"headerlink\" title=\"javascript-原始型別-傳值(Pass by value)\"></a>javascript-原始型別-傳值(Pass by value)</h2><ul>\n<li>傳遞原始型別的值時，是按值傳遞的。函數接收的是原始值的一個複本，對這個複本的修改不會影響原始值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript-物件-傳參考-Pass-by-reference\"><a href=\"#javascript-物件-傳參考-Pass-by-reference\" class=\"headerlink\" title=\"javascript-物件-傳參考(Pass by reference)\"></a>javascript-物件-傳參考(Pass by reference)</h2><ul>\n<li>當傳遞物件（Object）或陣列（Array）等引用型別的值時，函數接收的是物件或陣列的參考，對這個參考的修改會影響原始物件或陣列。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"淺拷貝-Shallow-copy\"><a href=\"#淺拷貝-Shallow-copy\" class=\"headerlink\" title=\"淺拷貝(Shallow copy)\"></a>淺拷貝(Shallow copy)</h2><ul>\n<li>只拷貝被複製物件的第一層屬性，而不是整個物件及其嵌套的屬性。換句話說，淺拷貝創建了一個新的物件，並將原始物件的直接屬性複製到新的物件中，但對於原始物件中的物件（如物件中的物件），它們仍然是引用，而不是被複製的。</li>\n<li>成功複製第一層物件的屬性，且彼此互不影響。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a變數= &quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span> &#125;</span><br><span class=\"line\">b變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>物件中的物件因為指向同一記憶體位址，因此彼此變動會連動。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>, obj : &#123;<span class=\"string\">&quot;feeling&quot;</span>: <span class=\"string\">&quot;happy&quot;</span>&#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">a.<span class=\"property\">obj</span>.<span class=\"property\">feeling</span> = <span class=\"string\">&quot;sad&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a變數= &quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class=\"line\">b變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"淺拷貝的方式\"><a href=\"#淺拷貝的方式\" class=\"headerlink\" title=\"淺拷貝的方式\"></a>淺拷貝的方式</h2><h3 id=\"…展開運算子-Spread-operator\"><a href=\"#…展開運算子-Spread-operator\" class=\"headerlink\" title=\"…展開運算子(Spread operator)\"></a>…展開運算子(Spread operator)</h3><ul>\n<li>上面的案例即是採用展開運算子</li>\n</ul>\n<h3 id=\"使用Object-assign-的方法\"><a href=\"#使用Object-assign-的方法\" class=\"headerlink\" title=\"使用Object.assign()的方法\"></a>使用Object.assign()的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shallowCopiedObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, originalObject);</span><br><span class=\"line\">shallowCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">shallowCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">100000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;shallowCopiedObject&quot;</span>, shallowCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">100000</span> &#125; &#125;</span><br><span class=\"line\">shallowCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">100000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列能夠使用slice的方法\"><a href=\"#陣列能夠使用slice的方法\" class=\"headerlink\" title=\"陣列能夠使用slice的方法\"></a>陣列能夠使用slice的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> shallowCopiedArray = originalArray.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">shallowCopiedArray[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;X1&#x27;</span>;</span><br><span class=\"line\">shallowCopiedArray[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&#x27;X2&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalArray&quot;</span>, originalArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;shallowCopiedArray&quot;</span>, shallowCopiedArray);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalArray [ <span class=\"number\">1</span>, [ <span class=\"string\">&#x27;X2&#x27;</span>, <span class=\"number\">3</span> ], <span class=\"number\">4</span> ]</span><br><span class=\"line\">shallowCopiedArray [ <span class=\"string\">&#x27;X1&#x27;</span>, [ <span class=\"string\">&#x27;X2&#x27;</span>, <span class=\"number\">3</span> ], <span class=\"number\">4</span> ]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手動複製物件中其中一層資料\"><a href=\"#手動複製物件中其中一層資料\" class=\"headerlink\" title=\"手動複製物件中其中一層資料\"></a>手動複製物件中其中一層資料</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"string\">&quot;feeling&quot;</span>: <span class=\"string\">&quot;happy&quot;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; <span class=\"string\">&quot;food&quot;</span>: a.<span class=\"property\">food</span>, <span class=\"attr\">obj</span>: a.<span class=\"property\">obj</span> &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變前a&quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變前b&quot;</span>, b)</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">b.<span class=\"property\">obj</span>.<span class=\"property\">feeling</span> = <span class=\"string\">&quot;sad&quot;</span> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;------------&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變後a&quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變後b&quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改變前a &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class=\"line\">改變前b &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">改變後a &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class=\"line\">改變後b &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深拷貝-Deep-Copy\"><a href=\"#深拷貝-Deep-Copy\" class=\"headerlink\" title=\"深拷貝(Deep Copy)\"></a>深拷貝(Deep Copy)</h2><ul>\n<li>是指創建一個新的物件，並且這個新物件的所有屬性的值都是原始物件相對應屬性值的複本。深拷貝會遞迴地複製原始物件及其所有嵌套的物件，使得新的物件和原始物件在記憶體中獨立存在，修改其中一個物件不會影響另一個。</li>\n</ul>\n<h2 id=\"深拷貝的方式\"><a href=\"#深拷貝的方式\" class=\"headerlink\" title=\"深拷貝的方式\"></a>深拷貝的方式</h2><h3 id=\"使用-JSON-parse-和-JSON-stringify\"><a href=\"#使用-JSON-parse-和-JSON-stringify\" class=\"headerlink\" title=\"使用 JSON.parse() 和 JSON.stringify()\"></a>使用 JSON.parse() 和 JSON.stringify()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepCopiedObject = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(originalObject));</span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">200</span></span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;</span><br><span class=\"line\">deepCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">200</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>需注意使用此方式會有些意外情況如下</p>\n<ul>\n<li>undefined：undefined的值會在序列化過程中完全丟失，包括包含 undefined 值的鍵本身。</li>\n<li>NaN：NaN會被強制轉換成null。</li>\n<li>Infinity和-Infinity：這兩個特殊的數字值會被強制轉換成 null。</li>\n<li>正則表達式(RegExp)：正則表達式會被強制轉換為空物件</li>\n<li>日期(Date)：日期會被轉換成對應的字符串形式。</li>\n<li>函數(Function)：函數是無法被序列化的，它們會被忽略。</li>\n<li>符號Symbol 會被忽略，不會被序列化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">undefinedValue</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">notANumberValue</span>: <span class=\"title class_\">NaN</span>,</span><br><span class=\"line\">    <span class=\"attr\">infinityValue</span>: <span class=\"title class_\">Infinity</span>,</span><br><span class=\"line\">    <span class=\"attr\">regExpValue</span>: <span class=\"regexp\">/.*/</span>,</span><br><span class=\"line\">    <span class=\"attr\">dateValue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;1999-12-31T23:59:59&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">functionValue</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">symbolValue</span>: <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;uniqueSymbol&#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> faultyClonedData = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(originalData));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;undefineValue&quot;</span>, faultyClonedData.<span class=\"property\">undefinedValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;NaNValue&quot;</span>, faultyClonedData.<span class=\"property\">notANumberValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;InfinityValue&quot;</span>, faultyClonedData.<span class=\"property\">infinityValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;regExpValue&quot;</span>, faultyClonedData.<span class=\"property\">regExpValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;dateValue&quot;</span>, faultyClonedData.<span class=\"property\">dateValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;function&quot;</span>, faultyClonedData.<span class=\"property\">functionValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;symbolValue&quot;</span>, faultyClonedData.<span class=\"property\">symbolValue</span>);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefineValue <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"title class_\">NaNValue</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"title class_\">InfinityValue</span> <span class=\"literal\">null</span></span><br><span class=\"line\">regExpValue &#123;&#125;</span><br><span class=\"line\">dateValue <span class=\"number\">1999</span>-<span class=\"number\">12</span>-31<span class=\"attr\">T15</span>:<span class=\"number\">59</span>:<span class=\"number\">59.</span>000Z</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\">symbolValue <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用第三方庫（例如-Lodash）\"><a href=\"#使用第三方庫（例如-Lodash）\" class=\"headerlink\" title=\"使用第三方庫（例如 Lodash）\"></a>使用第三方庫（例如 Lodash）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepCopiedObject = _.<span class=\"title function_\">cloneDeep</span>(originalObject);</span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">30</span></span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;</span><br><span class=\"line\">deepCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">30</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":5716,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"JS-5-Javascript物件傳參考特性\"><a href=\"#JS-5-Javascript物件傳參考特性\" class=\"headerlink\" title=\"JS-5 Javascript物件傳參考特性\"></a>JS-5 Javascript物件傳參考特性</h2><p>JS的型別大致可分為原始型別(Primitive Types)及物件(Object)兩種</p>\n<ul>\n<li>原始型別(Primitive Types)：傳值(Pass by value)<ul>\n<li><strong>本身不可變</strong></li>\n</ul>\n</li>\n<li>物件(Object)：傳參考(Pass by reference)<ul>\n<li><strong>本身可變</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原始型別-Primitive-Types\"><a href=\"#原始型別-Primitive-Types\" class=\"headerlink\" title=\"原始型別(Primitive Types)\"></a>原始型別(Primitive Types)</h2><ul>\n<li>Number<ul>\n<li>整數</li>\n<li>含小數點</li>\n<li>Infinity(無窮大)</li>\n<li>-Infinity(負無窮大)</li>\n<li>NaN(Not A Number)—&gt;不是數值</li>\n</ul>\n</li>\n<li>BigInt</li>\n<li>String</li>\n<li>Boolean<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n</li>\n<li>Undefined</li>\n<li>Null</li>\n<li>Symbol</li>\n</ul>\n<hr>\n<ul>\n<li>宣告方式如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓數字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓字串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓布林</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isFalse = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓未定義</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> undefinedVar;</span><br><span class=\"line\"><span class=\"comment\">// ↓空值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nullVar = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓符號</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;uniqueSymbol&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件資料-Object-data\"><a href=\"#物件資料-Object-data\" class=\"headerlink\" title=\"物件資料(Object data)\"></a>物件資料(Object data)</h2><ul>\n<li>物件 (Object)</li>\n<li>陣列 (Array)</li>\n<li>函數 (Function)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓物件 (Object)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"attr\">isStudent</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ↓陣列 (Array)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">// ↓函數 (Function)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript-原始型別-傳值-Pass-by-value\"><a href=\"#javascript-原始型別-傳值-Pass-by-value\" class=\"headerlink\" title=\"javascript-原始型別-傳值(Pass by value)\"></a>javascript-原始型別-傳值(Pass by value)</h2><ul>\n<li>傳遞原始型別的值時，是按值傳遞的。函數接收的是原始值的一個複本，對這個複本的修改不會影響原始值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"javascript-物件-傳參考-Pass-by-reference\"><a href=\"#javascript-物件-傳參考-Pass-by-reference\" class=\"headerlink\" title=\"javascript-物件-傳參考(Pass by reference)\"></a>javascript-物件-傳參考(Pass by reference)</h2><ul>\n<li>當傳遞物件（Object）或陣列（Array）等引用型別的值時，函數接收的是物件或陣列的參考，對這個參考的修改會影響原始物件或陣列。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;<span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"淺拷貝-Shallow-copy\"><a href=\"#淺拷貝-Shallow-copy\" class=\"headerlink\" title=\"淺拷貝(Shallow copy)\"></a>淺拷貝(Shallow copy)</h2><ul>\n<li>只拷貝被複製物件的第一層屬性，而不是整個物件及其嵌套的屬性。換句話說，淺拷貝創建了一個新的物件，並將原始物件的直接屬性複製到新的物件中，但對於原始物件中的物件（如物件中的物件），它們仍然是引用，而不是被複製的。</li>\n<li>成功複製第一層物件的屬性，且彼此互不影響。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a變數= &quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span> &#125;</span><br><span class=\"line\">b變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>物件中的物件因為指向同一記憶體位址，因此彼此變動會連動。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>, obj : &#123;<span class=\"string\">&quot;feeling&quot;</span>: <span class=\"string\">&quot;happy&quot;</span>&#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; ...a &#125;</span><br><span class=\"line\">a.<span class=\"property\">obj</span>.<span class=\"property\">feeling</span> = <span class=\"string\">&quot;sad&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a變數= &quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b變數= &quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class=\"line\">b變數=  &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"淺拷貝的方式\"><a href=\"#淺拷貝的方式\" class=\"headerlink\" title=\"淺拷貝的方式\"></a>淺拷貝的方式</h2><h3 id=\"…展開運算子-Spread-operator\"><a href=\"#…展開運算子-Spread-operator\" class=\"headerlink\" title=\"…展開運算子(Spread operator)\"></a>…展開運算子(Spread operator)</h3><ul>\n<li>上面的案例即是採用展開運算子</li>\n</ul>\n<h3 id=\"使用Object-assign-的方法\"><a href=\"#使用Object-assign-的方法\" class=\"headerlink\" title=\"使用Object.assign()的方法\"></a>使用Object.assign()的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shallowCopiedObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, originalObject);</span><br><span class=\"line\">shallowCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">shallowCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">100000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;shallowCopiedObject&quot;</span>, shallowCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">100000</span> &#125; &#125;</span><br><span class=\"line\">shallowCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">100000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列能夠使用slice的方法\"><a href=\"#陣列能夠使用slice的方法\" class=\"headerlink\" title=\"陣列能夠使用slice的方法\"></a>陣列能夠使用slice的方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> shallowCopiedArray = originalArray.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">shallowCopiedArray[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;X1&#x27;</span>;</span><br><span class=\"line\">shallowCopiedArray[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&#x27;X2&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalArray&quot;</span>, originalArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;shallowCopiedArray&quot;</span>, shallowCopiedArray);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalArray [ <span class=\"number\">1</span>, [ <span class=\"string\">&#x27;X2&#x27;</span>, <span class=\"number\">3</span> ], <span class=\"number\">4</span> ]</span><br><span class=\"line\">shallowCopiedArray [ <span class=\"string\">&#x27;X1&#x27;</span>, [ <span class=\"string\">&#x27;X2&#x27;</span>, <span class=\"number\">3</span> ], <span class=\"number\">4</span> ]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手動複製物件中其中一層資料\"><a href=\"#手動複製物件中其中一層資料\" class=\"headerlink\" title=\"手動複製物件中其中一層資料\"></a>手動複製物件中其中一層資料</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"string\">&quot;food&quot;</span>: <span class=\"string\">&quot;apple&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"string\">&quot;feeling&quot;</span>: <span class=\"string\">&quot;happy&quot;</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123; <span class=\"string\">&quot;food&quot;</span>: a.<span class=\"property\">food</span>, <span class=\"attr\">obj</span>: a.<span class=\"property\">obj</span> &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變前a&quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變前b&quot;</span>, b)</span><br><span class=\"line\">b.<span class=\"property\">food</span> = <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">b.<span class=\"property\">obj</span>.<span class=\"property\">feeling</span> = <span class=\"string\">&quot;sad&quot;</span> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;------------&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變後a&quot;</span>, a)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;改變後b&quot;</span>, b)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改變前a &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class=\"line\">改變前b &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;happy&#x27;</span> &#125; &#125;</span><br><span class=\"line\">------------</span><br><span class=\"line\">改變後a &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br><span class=\"line\">改變後b &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">feeling</span>: <span class=\"string\">&#x27;sad&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深拷貝-Deep-Copy\"><a href=\"#深拷貝-Deep-Copy\" class=\"headerlink\" title=\"深拷貝(Deep Copy)\"></a>深拷貝(Deep Copy)</h2><ul>\n<li>是指創建一個新的物件，並且這個新物件的所有屬性的值都是原始物件相對應屬性值的複本。深拷貝會遞迴地複製原始物件及其所有嵌套的物件，使得新的物件和原始物件在記憶體中獨立存在，修改其中一個物件不會影響另一個。</li>\n</ul>\n<h2 id=\"深拷貝的方式\"><a href=\"#深拷貝的方式\" class=\"headerlink\" title=\"深拷貝的方式\"></a>深拷貝的方式</h2><h3 id=\"使用-JSON-parse-和-JSON-stringify\"><a href=\"#使用-JSON-parse-和-JSON-stringify\" class=\"headerlink\" title=\"使用 JSON.parse() 和 JSON.stringify()\"></a>使用 JSON.parse() 和 JSON.stringify()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepCopiedObject = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(originalObject));</span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">200</span></span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;</span><br><span class=\"line\">deepCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">200</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>需注意使用此方式會有些意外情況如下</p>\n<ul>\n<li>undefined：undefined的值會在序列化過程中完全丟失，包括包含 undefined 值的鍵本身。</li>\n<li>NaN：NaN會被強制轉換成null。</li>\n<li>Infinity和-Infinity：這兩個特殊的數字值會被強制轉換成 null。</li>\n<li>正則表達式(RegExp)：正則表達式會被強制轉換為空物件</li>\n<li>日期(Date)：日期會被轉換成對應的字符串形式。</li>\n<li>函數(Function)：函數是無法被序列化的，它們會被忽略。</li>\n<li>符號Symbol 會被忽略，不會被序列化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">undefinedValue</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">notANumberValue</span>: <span class=\"title class_\">NaN</span>,</span><br><span class=\"line\">    <span class=\"attr\">infinityValue</span>: <span class=\"title class_\">Infinity</span>,</span><br><span class=\"line\">    <span class=\"attr\">regExpValue</span>: <span class=\"regexp\">/.*/</span>,</span><br><span class=\"line\">    <span class=\"attr\">dateValue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;1999-12-31T23:59:59&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">functionValue</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">symbolValue</span>: <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;uniqueSymbol&#x27;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> faultyClonedData = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(originalData));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;undefineValue&quot;</span>, faultyClonedData.<span class=\"property\">undefinedValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;NaNValue&quot;</span>, faultyClonedData.<span class=\"property\">notANumberValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;InfinityValue&quot;</span>, faultyClonedData.<span class=\"property\">infinityValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;regExpValue&quot;</span>, faultyClonedData.<span class=\"property\">regExpValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;dateValue&quot;</span>, faultyClonedData.<span class=\"property\">dateValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;function&quot;</span>, faultyClonedData.<span class=\"property\">functionValue</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;symbolValue&quot;</span>, faultyClonedData.<span class=\"property\">symbolValue</span>);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefineValue <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"title class_\">NaNValue</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"title class_\">InfinityValue</span> <span class=\"literal\">null</span></span><br><span class=\"line\">regExpValue &#123;&#125;</span><br><span class=\"line\">dateValue <span class=\"number\">1999</span>-<span class=\"number\">12</span>-31<span class=\"attr\">T15</span>:<span class=\"number\">59</span>:<span class=\"number\">59.</span>000Z</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\">symbolValue <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用第三方庫（例如-Lodash）\"><a href=\"#使用第三方庫（例如-Lodash）\" class=\"headerlink\" title=\"使用第三方庫（例如 Lodash）\"></a>使用第三方庫（例如 Lodash）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalObject = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> deepCopiedObject = _.<span class=\"title function_\">cloneDeep</span>(originalObject);</span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">a</span> = <span class=\"number\">30</span></span><br><span class=\"line\">deepCopiedObject.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;originalObject&quot;</span>, originalObject)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;deepCopiedObject&quot;</span>, deepCopiedObject)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">originalObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125; &#125;</span><br><span class=\"line\">deepCopiedObject &#123; <span class=\"attr\">a</span>: <span class=\"number\">30</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">4000</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"React(1)：Pure Function 的概念及其在 React 中的應用","date":"2023-11-29T07:50:17.000Z","description":"探索 Pure Function 概念及其與 React 的相互關係。","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg)\n\n## Pure Function是甚麼\n\n1. **此函數在相同的輸入值時，需產生相同的輸出。**\n\n- pure Functions範例如下\n\n```javascript=\nconst sum = function (value1, value2) {\n    return value1 + value2\n}\n\nconsole.log(sum(100, 200))\n```\n\n- 不管你傳入幾次得到的結果都一樣\n- 不受外部變數影響\n\n---\n\n- Impure Functions範例則如下\n\n```javascript=\nlet Number = 20\nconst add = function (Value) {\n    return Value + Number\n}\n\nconsole.log(add(100))\n```\n\n- 會在執行的過程中受到Number外部變數的影響\n\n1. **該函數不能有語義上可觀察的函數副作用。**\n\n- 常見的副作用\n  - Making a HTTP request（發送 HTTP 請求）\n  - Mutating data（修改資料）\n  - Printing to a screen or console（輸出至螢幕或控制台）\n  - DOM Query/Manipulation（DOM 操作）\n  - Math.random()（使用亂數）\n  - Getting the current time（取得目前時間）\n\n- pure Functions範例如下\n\n- Impure Functions(會在執行的過程中產生副作用)\n\n```javascript=\nconst revise = function (key, value, object) {\n    object[key] = value\n}\nconst food = {\n    \"name\": \"banana\"\n}\nconsole.log(food)\nrevise(\"number\", 100, food)\nconsole.log(food)\n```\n\n顯示如下：\n\n```javascript=\n{ name: 'banana' }\n{ name: 'banana', number: 100 }\n```\n\n- Impure Functions會在執行的過程中產生副作用，導致物件產生變更\n\n## React跟Pure Function的關係\n\n- React中的組件概念使用Pure Function的理念，並且React的 functional components 通常被設計成純函數的形式。\n  - Props 是唯讀的： 父組件向子組件傳遞 props，而子組件不能直接修改這些 props，確保了 props 的不可變性。\n  - State 控制內部狀態： 使用 useState 來管理組件的內部狀態，React 確保了state的不可變性和純粹性。每次狀態發生改變，React 都會根據新的狀態重新渲染組件，確保渲染的結果是基於當前的應用狀態而生成的，並保證了渲染的一致性。\n- 若直接更改obj.count將無法導致渲染，進而無法讓UI顯示最新狀態。\n\n```javascript=\nimport { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [obj, setObj] = useState({ count: 0 });\n  function clickPlus1() {\n    // obj.count = obj.count + 1;\n    // ↑ 直接改變 obj 時並沒有改變這個 obj 的reference，所以雖然數字改變了，但並不會重新 render\n    setObj({ count: obj.count + 1 });\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>{obj.count}</h2>\n      <button onClick={() => clickPlus1()}>plus 1</button>\n    </div>\n  );\n}\n```\n","source":"_posts/2023-11-29-React-1.md","raw":"---\ntitle: React(1)：Pure Function 的概念及其在 React 中的應用\ndate: 2023-11-29 15:50:17\ntags:\n- [Pure Function]\ncategories:\n- [React]\ndescription: 探索 Pure Function 概念及其與 React 的相互關係。\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg)\n\n## Pure Function是甚麼\n\n1. **此函數在相同的輸入值時，需產生相同的輸出。**\n\n- pure Functions範例如下\n\n```javascript=\nconst sum = function (value1, value2) {\n    return value1 + value2\n}\n\nconsole.log(sum(100, 200))\n```\n\n- 不管你傳入幾次得到的結果都一樣\n- 不受外部變數影響\n\n---\n\n- Impure Functions範例則如下\n\n```javascript=\nlet Number = 20\nconst add = function (Value) {\n    return Value + Number\n}\n\nconsole.log(add(100))\n```\n\n- 會在執行的過程中受到Number外部變數的影響\n\n1. **該函數不能有語義上可觀察的函數副作用。**\n\n- 常見的副作用\n  - Making a HTTP request（發送 HTTP 請求）\n  - Mutating data（修改資料）\n  - Printing to a screen or console（輸出至螢幕或控制台）\n  - DOM Query/Manipulation（DOM 操作）\n  - Math.random()（使用亂數）\n  - Getting the current time（取得目前時間）\n\n- pure Functions範例如下\n\n- Impure Functions(會在執行的過程中產生副作用)\n\n```javascript=\nconst revise = function (key, value, object) {\n    object[key] = value\n}\nconst food = {\n    \"name\": \"banana\"\n}\nconsole.log(food)\nrevise(\"number\", 100, food)\nconsole.log(food)\n```\n\n顯示如下：\n\n```javascript=\n{ name: 'banana' }\n{ name: 'banana', number: 100 }\n```\n\n- Impure Functions會在執行的過程中產生副作用，導致物件產生變更\n\n## React跟Pure Function的關係\n\n- React中的組件概念使用Pure Function的理念，並且React的 functional components 通常被設計成純函數的形式。\n  - Props 是唯讀的： 父組件向子組件傳遞 props，而子組件不能直接修改這些 props，確保了 props 的不可變性。\n  - State 控制內部狀態： 使用 useState 來管理組件的內部狀態，React 確保了state的不可變性和純粹性。每次狀態發生改變，React 都會根據新的狀態重新渲染組件，確保渲染的結果是基於當前的應用狀態而生成的，並保證了渲染的一致性。\n- 若直接更改obj.count將無法導致渲染，進而無法讓UI顯示最新狀態。\n\n```javascript=\nimport { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [obj, setObj] = useState({ count: 0 });\n  function clickPlus1() {\n    // obj.count = obj.count + 1;\n    // ↑ 直接改變 obj 時並沒有改變這個 obj 的reference，所以雖然數字改變了，但並不會重新 render\n    setObj({ count: obj.count + 1 });\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>{obj.count}</h2>\n      <button onClick={() => clickPlus1()}>plus 1</button>\n    </div>\n  );\n}\n```\n","slug":"React-1","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3s000w48z186zf3rr2","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Pure-Function是甚麼\"><a href=\"#Pure-Function是甚麼\" class=\"headerlink\" title=\"Pure Function是甚麼\"></a>Pure Function是甚麼</h2><ol>\n<li><strong>此函數在相同的輸入值時，需產生相同的輸出。</strong></li>\n</ol>\n<ul>\n<li>pure Functions範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"keyword\">function</span> (<span class=\"params\">value1, value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 + value2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不管你傳入幾次得到的結果都一樣</li>\n<li>不受外部變數影響</li>\n</ul>\n<hr>\n<ul>\n<li>Impure Functions範例則如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Number</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"title class_\">Number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>會在執行的過程中受到Number外部變數的影響</li>\n</ul>\n<ol>\n<li><strong>該函數不能有語義上可觀察的函數副作用。</strong></li>\n</ol>\n<ul>\n<li><p>常見的副作用</p>\n<ul>\n<li>Making a HTTP request（發送 HTTP 請求）</li>\n<li>Mutating data（修改資料）</li>\n<li>Printing to a screen or console（輸出至螢幕或控制台）</li>\n<li>DOM Query&#x2F;Manipulation（DOM 操作）</li>\n<li>Math.random()（使用亂數）</li>\n<li>Getting the current time（取得目前時間）</li>\n</ul>\n</li>\n<li><p>pure Functions範例如下</p>\n</li>\n<li><p>Impure Functions(會在執行的過程中產生副作用)</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> revise = <span class=\"keyword\">function</span> (<span class=\"params\">key, value, object</span>) &#123;</span><br><span class=\"line\">    object[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> food = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(food)</span><br><span class=\"line\"><span class=\"title function_\">revise</span>(<span class=\"string\">&quot;number&quot;</span>, <span class=\"number\">100</span>, food)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(food)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"attr\">number</span>: <span class=\"number\">100</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Impure Functions會在執行的過程中產生副作用，導致物件產生變更</li>\n</ul>\n<h2 id=\"React跟Pure-Function的關係\"><a href=\"#React跟Pure-Function的關係\" class=\"headerlink\" title=\"React跟Pure Function的關係\"></a>React跟Pure Function的關係</h2><ul>\n<li>React中的組件概念使用Pure Function的理念，並且React的 functional components 通常被設計成純函數的形式。<ul>\n<li>Props 是唯讀的： 父組件向子組件傳遞 props，而子組件不能直接修改這些 props，確保了 props 的不可變性。</li>\n<li>State 控制內部狀態： 使用 useState 來管理組件的內部狀態，React 確保了state的不可變性和純粹性。每次狀態發生改變，React 都會根據新的狀態重新渲染組件，確保渲染的結果是基於當前的應用狀態而生成的，並保證了渲染的一致性。</li>\n</ul>\n</li>\n<li>若直接更改obj.count將無法導致渲染，進而無法讓UI顯示最新狀態。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [obj, setObj] = <span class=\"title function_\">useState</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">clickPlus1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// obj.count = obj.count + 1;</span></span><br><span class=\"line\">    <span class=\"comment\">// ↑ 直接改變 obj 時並沒有改變這個 obj 的reference，所以雖然數字改變了，但並不會重新 render</span></span><br><span class=\"line\">    <span class=\"title function_\">setObj</span>(&#123; <span class=\"attr\">count</span>: obj.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;obj.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> clickPlus1()&#125;&gt;plus 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1682,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Pure-Function是甚麼\"><a href=\"#Pure-Function是甚麼\" class=\"headerlink\" title=\"Pure Function是甚麼\"></a>Pure Function是甚麼</h2><ol>\n<li><strong>此函數在相同的輸入值時，需產生相同的輸出。</strong></li>\n</ol>\n<ul>\n<li>pure Functions範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"keyword\">function</span> (<span class=\"params\">value1, value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value1 + value2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不管你傳入幾次得到的結果都一樣</li>\n<li>不受外部變數影響</li>\n</ul>\n<hr>\n<ul>\n<li>Impure Functions範例則如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Number</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"title class_\">Number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>會在執行的過程中受到Number外部變數的影響</li>\n</ul>\n<ol>\n<li><strong>該函數不能有語義上可觀察的函數副作用。</strong></li>\n</ol>\n<ul>\n<li><p>常見的副作用</p>\n<ul>\n<li>Making a HTTP request（發送 HTTP 請求）</li>\n<li>Mutating data（修改資料）</li>\n<li>Printing to a screen or console（輸出至螢幕或控制台）</li>\n<li>DOM Query&#x2F;Manipulation（DOM 操作）</li>\n<li>Math.random()（使用亂數）</li>\n<li>Getting the current time（取得目前時間）</li>\n</ul>\n</li>\n<li><p>pure Functions範例如下</p>\n</li>\n<li><p>Impure Functions(會在執行的過程中產生副作用)</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> revise = <span class=\"keyword\">function</span> (<span class=\"params\">key, value, object</span>) &#123;</span><br><span class=\"line\">    object[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> food = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(food)</span><br><span class=\"line\"><span class=\"title function_\">revise</span>(<span class=\"string\">&quot;number&quot;</span>, <span class=\"number\">100</span>, food)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(food)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;banana&#x27;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"attr\">number</span>: <span class=\"number\">100</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Impure Functions會在執行的過程中產生副作用，導致物件產生變更</li>\n</ul>\n<h2 id=\"React跟Pure-Function的關係\"><a href=\"#React跟Pure-Function的關係\" class=\"headerlink\" title=\"React跟Pure Function的關係\"></a>React跟Pure Function的關係</h2><ul>\n<li>React中的組件概念使用Pure Function的理念，並且React的 functional components 通常被設計成純函數的形式。<ul>\n<li>Props 是唯讀的： 父組件向子組件傳遞 props，而子組件不能直接修改這些 props，確保了 props 的不可變性。</li>\n<li>State 控制內部狀態： 使用 useState 來管理組件的內部狀態，React 確保了state的不可變性和純粹性。每次狀態發生改變，React 都會根據新的狀態重新渲染組件，確保渲染的結果是基於當前的應用狀態而生成的，並保證了渲染的一致性。</li>\n</ul>\n</li>\n<li>若直接更改obj.count將無法導致渲染，進而無法讓UI顯示最新狀態。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [obj, setObj] = <span class=\"title function_\">useState</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">clickPlus1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// obj.count = obj.count + 1;</span></span><br><span class=\"line\">    <span class=\"comment\">// ↑ 直接改變 obj 時並沒有改變這個 obj 的reference，所以雖然數字改變了，但並不會重新 render</span></span><br><span class=\"line\">    <span class=\"title function_\">setObj</span>(&#123; <span class=\"attr\">count</span>: obj.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;obj.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> clickPlus1()&#125;&gt;plus 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript(9)：陣列的常見操作方法","date":"2023-12-01T07:01:06.000Z","description":"掌握 JavaScript 陣列操作！從forEach、map、filter、findIndex、reduce、sort，深入了解這些方法，使你的程式碼更具靈活性和效率！","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## Array.forEach(callback[element, index, array])\n\n### forEach參數(變數名稱可以自定義)\n\n- element：當前陣列元素(必填)\n- index：當前陣列元素索引值(可選)\n- array：傳遞進來的陣列(可選)\n\n### forEach功能\n\n- 用於對陣列中的每個元素進行特定操作的功能\n\n### forEach特點\n\n- 能被中斷（break），即使在函式中返回 false，forEach 也會繼續遍歷\n- **不會產生新的陣列**\n\n---\n\n### forEach範例\n\n- 新增NewPrice參數，且NewPrice是基於Price + 20產生\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = []\narr.forEach((item, key) => {\n  newarr[key] = {\n    ...item,\n    NewPrice: item.Price + 20\n  }\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\nconsole.log 顯示如下：\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小王', Price: 10, NewPrice: 30 },\n  { Name: '小明', Price: 100, NewPrice: 120 },\n  { Name: '小美', Price: 50, NewPrice: 70 },\n  { Name: '小天', Price: 80, NewPrice: 100 }\n]\n```\n\n## Array.map(callback[element, index, array])\n\n### map功能\n\n- map方法用於對陣列中的每個元素進行特定操作的功能，並返回一個新的陣列。\n\n### map特點\n\n- 會產生新的陣列，需要有其他變數指定。\n\n### map範例\n\n- 新增NewPrice參數，且NewPrice是基於Price + 20產生(上述forEach題目改用map寫法)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = arr.map((item, key) => {\n  return {\n    ...item,\n    NewPrice: item.Price + 20\n  }\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\nconsole.log 顯示如下\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小王', Price: 10, NewPrice: 30 },\n  { Name: '小明', Price: 100, NewPrice: 120 },\n  { Name: '小美', Price: 50, NewPrice: 70 },\n  { Name: '小天', Price: 80, NewPrice: 100 }\n]\n```\n\n## Array.filter(callback[element, index, array])\n\n### filter功能\n\n- 用於從陣列中選擇滿足特定條件的元素，並返回一個新的陣列。\n\n### filter特點\n\n- 會產生新的陣列，需要有其他變數指定。\n\n### filter範例\n\n- 找到大於等於80的用戶資訊\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = arr.filter((item) => {\n  return item.Price >= 80\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\n顯示如下\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小明', Price: 100},\n  { Name: '小天', Price: 80}\n]\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = []\narr.forEach((item) => {\n  if (item.Price >= 80) {\n    newarr.push(item)\n  }\n  return item.Price >= 80\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\n## Array.findIndex(callback[element, index, array])\n\n### findIndex功能\n\n- 用於找到陣列中第一個滿足指定條件的元素的索引，如果找不到則返回 -1。\n\n### findIndex範例\n\n- 小美漲價10塊\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconsole.log(\"arr before\", arr)\n\nconst finditemindex = arr.findIndex((item) => {\n  return item.Name === '小美'\n})\narr[finditemindex].Price = arr[finditemindex].Price + 10\n\nconsole.log(\"finditemindex(小美索引位置)\", finditemindex)\nconsole.log(\"info(小美物件資訊)\", arr[finditemindex])\nconsole.log(\"arr after\", arr)\n```\n\n顯示如下\n\n```javascript=\narr before [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nfinditemindex(小美索引位置) 2\ninfo(小美物件資訊) { Name: '小美', Price: 60 }\narr after [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 60 },\n  { Name: '小天', Price: 80 }\n]\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconsole.log(\"arr before\", arr)\n\nlet index = -1\nconsole\narr.forEach((item, key) => {\n  if(item.Name === '小美'){\n    index = key\n  }\n})\narr[index].Price = arr[index].Price + 10\n\nconsole.log(\"finditemindex(小美索引位置)\", index)\nconsole.log(\"info(小美物件資訊)\", arr[index])\nconsole.log(\"arr after\", arr)\n```\n\n## Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)\n\n### reduce參數(變數名稱可以自定義)\n\n- accumulator：上一次累加的數值，若為第一次則等於initialValue(必填)\n- currentValue：當前處理的陣列元素(必填)\n- currentIndex：當前處理陣列元素的索引值(可選)\n- array：傳遞進來的陣列(可選)\n- initialValue：初始值(可選)\n\n### reduce功能\n\n- 用於將陣列中的所有元素進行累積\n\n### reduce特點\n\n- 可以用於陣列的求和、求積等操作\n- 可以指定初始值(initialValue)\n\n### reduce範例\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst init = 0\nconst Total = arr.reduce((acc, cur, index) => {\n  console.log(`目前累加值：${acc}\n  -------`)\n  console.log(\"當前陣列元素\", cur)\n  console.log(\"當前陣列索引\", index)\n  return acc + cur.Price\n}, init)\n\nconsole.log(\"Total\", Total)\n```\n\n顯示如下\n\n```javascript=\n目前累加值：0\n  -------\n當前陣列元素 { Name: '小王', Price: 10 }\n當前陣列索引 0\n目前累加值：10\n  -------\n當前陣列元素 { Name: '小明', Price: 100 }\n當前陣列索引 1\n目前累加值：110\n  -------\n當前陣列元素 { Name: '小美', Price: 50 }\n當前陣列索引 2\n目前累加值：160\n  -------\n當前陣列元素 { Name: '小天', Price: 80 }\n當前陣列索引 3\nTotal 240\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nlet Total = 0\narr.forEach((item, key) => {\n  console.log(`目前累加值：${Total}\n  -------`)\n  console.log(\"當前陣列元素\", item)\n  console.log(\"當前陣列索引\", key)\n  Total = Total + item.Price\n})\n\nconsole.log(\"Total\", Total)\n```\n\n## Array.sort([compareFunction])\n\n### sort參數(變數名稱可以自定義)\n\n- a, b: 要比較的兩個元素\n\n### sort特點\n\n- a - b：由小到大(升序)\n- b - a：由大到小(降序)\n\n### sort功能\n\n- 用於對陣列元素進行排序。\n\n### sort範例\n\n#### 由小到大(升序)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst sortarr = arr.sort((a, b) => {\n  return a.Price - b.Price\n})\n\nconsole.log(\"sortarr\", sortarr)\n```\n\n#### 由大到小(降序)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst sortarr = arr.sort((a, b) => {\n  return b.Price - a.Price\n})\n\nconsole.log(\"sortarr\", sortarr)\n```\n","source":"_posts/2023-12-01-JS-9.md","raw":"---\ntitle: JavaScript(9)：陣列的常見操作方法\ndate: 2023-12-01 15:01:06\ntags:\n- [Array.forEach]\n- [Array.map]\n- [Array.filter]\n- [Array.findIndex]\n- [Array.reduce]\n- [Array.sort]\ncategories:\n- [JavaScript]\ndescription: 掌握 JavaScript 陣列操作！從forEach、map、filter、findIndex、reduce、sort，深入了解這些方法，使你的程式碼更具靈活性和效率！\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## Array.forEach(callback[element, index, array])\n\n### forEach參數(變數名稱可以自定義)\n\n- element：當前陣列元素(必填)\n- index：當前陣列元素索引值(可選)\n- array：傳遞進來的陣列(可選)\n\n### forEach功能\n\n- 用於對陣列中的每個元素進行特定操作的功能\n\n### forEach特點\n\n- 能被中斷（break），即使在函式中返回 false，forEach 也會繼續遍歷\n- **不會產生新的陣列**\n\n---\n\n### forEach範例\n\n- 新增NewPrice參數，且NewPrice是基於Price + 20產生\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = []\narr.forEach((item, key) => {\n  newarr[key] = {\n    ...item,\n    NewPrice: item.Price + 20\n  }\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\nconsole.log 顯示如下：\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小王', Price: 10, NewPrice: 30 },\n  { Name: '小明', Price: 100, NewPrice: 120 },\n  { Name: '小美', Price: 50, NewPrice: 70 },\n  { Name: '小天', Price: 80, NewPrice: 100 }\n]\n```\n\n## Array.map(callback[element, index, array])\n\n### map功能\n\n- map方法用於對陣列中的每個元素進行特定操作的功能，並返回一個新的陣列。\n\n### map特點\n\n- 會產生新的陣列，需要有其他變數指定。\n\n### map範例\n\n- 新增NewPrice參數，且NewPrice是基於Price + 20產生(上述forEach題目改用map寫法)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = arr.map((item, key) => {\n  return {\n    ...item,\n    NewPrice: item.Price + 20\n  }\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\nconsole.log 顯示如下\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小王', Price: 10, NewPrice: 30 },\n  { Name: '小明', Price: 100, NewPrice: 120 },\n  { Name: '小美', Price: 50, NewPrice: 70 },\n  { Name: '小天', Price: 80, NewPrice: 100 }\n]\n```\n\n## Array.filter(callback[element, index, array])\n\n### filter功能\n\n- 用於從陣列中選擇滿足特定條件的元素，並返回一個新的陣列。\n\n### filter特點\n\n- 會產生新的陣列，需要有其他變數指定。\n\n### filter範例\n\n- 找到大於等於80的用戶資訊\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = arr.filter((item) => {\n  return item.Price >= 80\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\n顯示如下\n\n```javascript=\narr [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nnewarr [\n  { Name: '小明', Price: 100},\n  { Name: '小天', Price: 80}\n]\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst newarr = []\narr.forEach((item) => {\n  if (item.Price >= 80) {\n    newarr.push(item)\n  }\n  return item.Price >= 80\n})\n\nconsole.log(\"arr\", arr)\nconsole.log(\"newarr\", newarr)\n```\n\n## Array.findIndex(callback[element, index, array])\n\n### findIndex功能\n\n- 用於找到陣列中第一個滿足指定條件的元素的索引，如果找不到則返回 -1。\n\n### findIndex範例\n\n- 小美漲價10塊\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconsole.log(\"arr before\", arr)\n\nconst finditemindex = arr.findIndex((item) => {\n  return item.Name === '小美'\n})\narr[finditemindex].Price = arr[finditemindex].Price + 10\n\nconsole.log(\"finditemindex(小美索引位置)\", finditemindex)\nconsole.log(\"info(小美物件資訊)\", arr[finditemindex])\nconsole.log(\"arr after\", arr)\n```\n\n顯示如下\n\n```javascript=\narr before [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 50 },\n  { Name: '小天', Price: 80 }\n]\nfinditemindex(小美索引位置) 2\ninfo(小美物件資訊) { Name: '小美', Price: 60 }\narr after [\n  { Name: '小王', Price: 10 },\n  { Name: '小明', Price: 100 },\n  { Name: '小美', Price: 60 },\n  { Name: '小天', Price: 80 }\n]\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconsole.log(\"arr before\", arr)\n\nlet index = -1\nconsole\narr.forEach((item, key) => {\n  if(item.Name === '小美'){\n    index = key\n  }\n})\narr[index].Price = arr[index].Price + 10\n\nconsole.log(\"finditemindex(小美索引位置)\", index)\nconsole.log(\"info(小美物件資訊)\", arr[index])\nconsole.log(\"arr after\", arr)\n```\n\n## Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)\n\n### reduce參數(變數名稱可以自定義)\n\n- accumulator：上一次累加的數值，若為第一次則等於initialValue(必填)\n- currentValue：當前處理的陣列元素(必填)\n- currentIndex：當前處理陣列元素的索引值(可選)\n- array：傳遞進來的陣列(可選)\n- initialValue：初始值(可選)\n\n### reduce功能\n\n- 用於將陣列中的所有元素進行累積\n\n### reduce特點\n\n- 可以用於陣列的求和、求積等操作\n- 可以指定初始值(initialValue)\n\n### reduce範例\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst init = 0\nconst Total = arr.reduce((acc, cur, index) => {\n  console.log(`目前累加值：${acc}\n  -------`)\n  console.log(\"當前陣列元素\", cur)\n  console.log(\"當前陣列索引\", index)\n  return acc + cur.Price\n}, init)\n\nconsole.log(\"Total\", Total)\n```\n\n顯示如下\n\n```javascript=\n目前累加值：0\n  -------\n當前陣列元素 { Name: '小王', Price: 10 }\n當前陣列索引 0\n目前累加值：10\n  -------\n當前陣列元素 { Name: '小明', Price: 100 }\n當前陣列索引 1\n目前累加值：110\n  -------\n當前陣列元素 { Name: '小美', Price: 50 }\n當前陣列索引 2\n目前累加值：160\n  -------\n當前陣列元素 { Name: '小天', Price: 80 }\n當前陣列索引 3\nTotal 240\n```\n\n- forEach雖然也能達到相同效果，但程式碼會較繁瑣\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nlet Total = 0\narr.forEach((item, key) => {\n  console.log(`目前累加值：${Total}\n  -------`)\n  console.log(\"當前陣列元素\", item)\n  console.log(\"當前陣列索引\", key)\n  Total = Total + item.Price\n})\n\nconsole.log(\"Total\", Total)\n```\n\n## Array.sort([compareFunction])\n\n### sort參數(變數名稱可以自定義)\n\n- a, b: 要比較的兩個元素\n\n### sort特點\n\n- a - b：由小到大(升序)\n- b - a：由大到小(降序)\n\n### sort功能\n\n- 用於對陣列元素進行排序。\n\n### sort範例\n\n#### 由小到大(升序)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst sortarr = arr.sort((a, b) => {\n  return a.Price - b.Price\n})\n\nconsole.log(\"sortarr\", sortarr)\n```\n\n#### 由大到小(降序)\n\n```javascript=\nconst arr = [\n  {\n    Name: \"小王\",\n    Price: 10\n  },\n  {\n    Name: \"小明\",\n    Price: 100\n  },\n  {\n    Name: \"小美\",\n    Price: 50\n  },\n  {\n    Name: \"小天\",\n    Price: 80\n  }\n];\n\nconst sortarr = arr.sort((a, b) => {\n  return b.Price - a.Price\n})\n\nconsole.log(\"sortarr\", sortarr)\n```\n","slug":"JS-9","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3t000z48z1f7w2b6mr","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Array-forEach-callback-element-index-array\"><a href=\"#Array-forEach-callback-element-index-array\" class=\"headerlink\" title=\"Array.forEach(callback[element, index, array])\"></a>Array.forEach(callback[element, index, array])</h2><h3 id=\"forEach參數-變數名稱可以自定義\"><a href=\"#forEach參數-變數名稱可以自定義\" class=\"headerlink\" title=\"forEach參數(變數名稱可以自定義)\"></a>forEach參數(變數名稱可以自定義)</h3><ul>\n<li>element：當前陣列元素(必填)</li>\n<li>index：當前陣列元素索引值(可選)</li>\n<li>array：傳遞進來的陣列(可選)</li>\n</ul>\n<h3 id=\"forEach功能\"><a href=\"#forEach功能\" class=\"headerlink\" title=\"forEach功能\"></a>forEach功能</h3><ul>\n<li>用於對陣列中的每個元素進行特定操作的功能</li>\n</ul>\n<h3 id=\"forEach特點\"><a href=\"#forEach特點\" class=\"headerlink\" title=\"forEach特點\"></a>forEach特點</h3><ul>\n<li>能被中斷（break），即使在函式中返回 false，forEach 也會繼續遍歷</li>\n<li><strong>不會產生新的陣列</strong></li>\n</ul>\n<hr>\n<h3 id=\"forEach範例\"><a href=\"#forEach範例\" class=\"headerlink\" title=\"forEach範例\"></a>forEach範例</h3><ul>\n<li>新增NewPrice參數，且NewPrice是基於Price + 20產生</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = []</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  newarr[key] = &#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"title class_\">NewPrice</span>: item.<span class=\"property\">Price</span> + <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>console.log 顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">120</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-map-callback-element-index-array\"><a href=\"#Array-map-callback-element-index-array\" class=\"headerlink\" title=\"Array.map(callback[element, index, array])\"></a>Array.map(callback[element, index, array])</h2><h3 id=\"map功能\"><a href=\"#map功能\" class=\"headerlink\" title=\"map功能\"></a>map功能</h3><ul>\n<li>map方法用於對陣列中的每個元素進行特定操作的功能，並返回一個新的陣列。</li>\n</ul>\n<h3 id=\"map特點\"><a href=\"#map特點\" class=\"headerlink\" title=\"map特點\"></a>map特點</h3><ul>\n<li>會產生新的陣列，需要有其他變數指定。</li>\n</ul>\n<h3 id=\"map範例\"><a href=\"#map範例\" class=\"headerlink\" title=\"map範例\"></a>map範例</h3><ul>\n<li>新增NewPrice參數，且NewPrice是基於Price + 20產生(上述forEach題目改用map寫法)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"title class_\">NewPrice</span>: item.<span class=\"property\">Price</span> + <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>console.log 顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">120</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-filter-callback-element-index-array\"><a href=\"#Array-filter-callback-element-index-array\" class=\"headerlink\" title=\"Array.filter(callback[element, index, array])\"></a>Array.filter(callback[element, index, array])</h2><h3 id=\"filter功能\"><a href=\"#filter功能\" class=\"headerlink\" title=\"filter功能\"></a>filter功能</h3><ul>\n<li>用於從陣列中選擇滿足特定條件的元素，並返回一個新的陣列。</li>\n</ul>\n<h3 id=\"filter特點\"><a href=\"#filter特點\" class=\"headerlink\" title=\"filter特點\"></a>filter特點</h3><ul>\n<li>會產生新的陣列，需要有其他變數指定。</li>\n</ul>\n<h3 id=\"filter範例\"><a href=\"#filter範例\" class=\"headerlink\" title=\"filter範例\"></a>filter範例</h3><ul>\n<li>找到大於等於80的用戶資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = []</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">    newarr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-findIndex-callback-element-index-array\"><a href=\"#Array-findIndex-callback-element-index-array\" class=\"headerlink\" title=\"Array.findIndex(callback[element, index, array])\"></a>Array.findIndex(callback[element, index, array])</h2><h3 id=\"findIndex功能\"><a href=\"#findIndex功能\" class=\"headerlink\" title=\"findIndex功能\"></a>findIndex功能</h3><ul>\n<li>用於找到陣列中第一個滿足指定條件的元素的索引，如果找不到則返回 -1。</li>\n</ul>\n<h3 id=\"findIndex範例\"><a href=\"#findIndex範例\" class=\"headerlink\" title=\"findIndex範例\"></a>findIndex範例</h3><ul>\n<li>小美漲價10塊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr before&quot;</span>, arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finditemindex = arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Name</span> === <span class=\"string\">&#x27;小美&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr[finditemindex].<span class=\"property\">Price</span> = arr[finditemindex].<span class=\"property\">Price</span> + <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;finditemindex(小美索引位置)&quot;</span>, finditemindex)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;info(小美物件資訊)&quot;</span>, arr[finditemindex])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr before [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"title function_\">finditemindex</span>(小美索引位置) <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"title function_\">info</span>(<span class=\"params\">小美物件資訊</span>) &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">60</span> &#125;</span><br><span class=\"line\">arr after [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr before&quot;</span>, arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item.<span class=\"property\">Name</span> === <span class=\"string\">&#x27;小美&#x27;</span>)&#123;</span><br><span class=\"line\">    index = key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr[index].<span class=\"property\">Price</span> = arr[index].<span class=\"property\">Price</span> + <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;finditemindex(小美索引位置)&quot;</span>, index)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;info(小美物件資訊)&quot;</span>, arr[index])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue\"><a href=\"#Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue\" class=\"headerlink\" title=\"Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)\"></a>Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</h2><h3 id=\"reduce參數-變數名稱可以自定義\"><a href=\"#reduce參數-變數名稱可以自定義\" class=\"headerlink\" title=\"reduce參數(變數名稱可以自定義)\"></a>reduce參數(變數名稱可以自定義)</h3><ul>\n<li>accumulator：上一次累加的數值，若為第一次則等於initialValue(必填)</li>\n<li>currentValue：當前處理的陣列元素(必填)</li>\n<li>currentIndex：當前處理陣列元素的索引值(可選)</li>\n<li>array：傳遞進來的陣列(可選)</li>\n<li>initialValue：初始值(可選)</li>\n</ul>\n<h3 id=\"reduce功能\"><a href=\"#reduce功能\" class=\"headerlink\" title=\"reduce功能\"></a>reduce功能</h3><ul>\n<li>用於將陣列中的所有元素進行累積</li>\n</ul>\n<h3 id=\"reduce特點\"><a href=\"#reduce特點\" class=\"headerlink\" title=\"reduce特點\"></a>reduce特點</h3><ul>\n<li>可以用於陣列的求和、求積等操作</li>\n<li>可以指定初始值(initialValue)</li>\n</ul>\n<h3 id=\"reduce範例\"><a href=\"#reduce範例\" class=\"headerlink\" title=\"reduce範例\"></a>reduce範例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Total</span> = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`目前累加值：<span class=\"subst\">$&#123;acc&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  -------`</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列元素&quot;</span>, cur)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列索引&quot;</span>, index)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> acc + cur.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;, init)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Total&quot;</span>, <span class=\"title class_\">Total</span>)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目前累加值：<span class=\"number\">0</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">0</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">10</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">1</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">110</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">2</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">160</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"title class_\">Total</span> <span class=\"number\">240</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Total</span> = <span class=\"number\">0</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`目前累加值：<span class=\"subst\">$&#123;Total&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  -------`</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列元素&quot;</span>, item)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列索引&quot;</span>, key)</span><br><span class=\"line\">  <span class=\"title class_\">Total</span> = <span class=\"title class_\">Total</span> + item.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Total&quot;</span>, <span class=\"title class_\">Total</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-sort-compareFunction\"><a href=\"#Array-sort-compareFunction\" class=\"headerlink\" title=\"Array.sort([compareFunction])\"></a>Array.sort([compareFunction])</h2><h3 id=\"sort參數-變數名稱可以自定義\"><a href=\"#sort參數-變數名稱可以自定義\" class=\"headerlink\" title=\"sort參數(變數名稱可以自定義)\"></a>sort參數(變數名稱可以自定義)</h3><ul>\n<li>a, b: 要比較的兩個元素</li>\n</ul>\n<h3 id=\"sort特點\"><a href=\"#sort特點\" class=\"headerlink\" title=\"sort特點\"></a>sort特點</h3><ul>\n<li>a - b：由小到大(升序)</li>\n<li>b - a：由大到小(降序)</li>\n</ul>\n<h3 id=\"sort功能\"><a href=\"#sort功能\" class=\"headerlink\" title=\"sort功能\"></a>sort功能</h3><ul>\n<li>用於對陣列元素進行排序。</li>\n</ul>\n<h3 id=\"sort範例\"><a href=\"#sort範例\" class=\"headerlink\" title=\"sort範例\"></a>sort範例</h3><h4 id=\"由小到大-升序\"><a href=\"#由小到大-升序\" class=\"headerlink\" title=\"由小到大(升序)\"></a>由小到大(升序)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortarr = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">Price</span> - b.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"由大到小-降序\"><a href=\"#由大到小-降序\" class=\"headerlink\" title=\"由大到小(降序)\"></a>由大到小(降序)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortarr = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b.<span class=\"property\">Price</span> - a.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":7273,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Array-forEach-callback-element-index-array\"><a href=\"#Array-forEach-callback-element-index-array\" class=\"headerlink\" title=\"Array.forEach(callback[element, index, array])\"></a>Array.forEach(callback[element, index, array])</h2><h3 id=\"forEach參數-變數名稱可以自定義\"><a href=\"#forEach參數-變數名稱可以自定義\" class=\"headerlink\" title=\"forEach參數(變數名稱可以自定義)\"></a>forEach參數(變數名稱可以自定義)</h3><ul>\n<li>element：當前陣列元素(必填)</li>\n<li>index：當前陣列元素索引值(可選)</li>\n<li>array：傳遞進來的陣列(可選)</li>\n</ul>\n<h3 id=\"forEach功能\"><a href=\"#forEach功能\" class=\"headerlink\" title=\"forEach功能\"></a>forEach功能</h3><ul>\n<li>用於對陣列中的每個元素進行特定操作的功能</li>\n</ul>\n<h3 id=\"forEach特點\"><a href=\"#forEach特點\" class=\"headerlink\" title=\"forEach特點\"></a>forEach特點</h3><ul>\n<li>能被中斷（break），即使在函式中返回 false，forEach 也會繼續遍歷</li>\n<li><strong>不會產生新的陣列</strong></li>\n</ul>\n<hr>\n<h3 id=\"forEach範例\"><a href=\"#forEach範例\" class=\"headerlink\" title=\"forEach範例\"></a>forEach範例</h3><ul>\n<li>新增NewPrice參數，且NewPrice是基於Price + 20產生</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = []</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  newarr[key] = &#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"title class_\">NewPrice</span>: item.<span class=\"property\">Price</span> + <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>console.log 顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">120</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-map-callback-element-index-array\"><a href=\"#Array-map-callback-element-index-array\" class=\"headerlink\" title=\"Array.map(callback[element, index, array])\"></a>Array.map(callback[element, index, array])</h2><h3 id=\"map功能\"><a href=\"#map功能\" class=\"headerlink\" title=\"map功能\"></a>map功能</h3><ul>\n<li>map方法用於對陣列中的每個元素進行特定操作的功能，並返回一個新的陣列。</li>\n</ul>\n<h3 id=\"map特點\"><a href=\"#map特點\" class=\"headerlink\" title=\"map特點\"></a>map特點</h3><ul>\n<li>會產生新的陣列，需要有其他變數指定。</li>\n</ul>\n<h3 id=\"map範例\"><a href=\"#map範例\" class=\"headerlink\" title=\"map範例\"></a>map範例</h3><ul>\n<li>新增NewPrice參數，且NewPrice是基於Price + 20產生(上述forEach題目改用map寫法)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"title class_\">NewPrice</span>: item.<span class=\"property\">Price</span> + <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>console.log 顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">30</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">120</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>, <span class=\"title class_\">NewPrice</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-filter-callback-element-index-array\"><a href=\"#Array-filter-callback-element-index-array\" class=\"headerlink\" title=\"Array.filter(callback[element, index, array])\"></a>Array.filter(callback[element, index, array])</h2><h3 id=\"filter功能\"><a href=\"#filter功能\" class=\"headerlink\" title=\"filter功能\"></a>filter功能</h3><ul>\n<li>用於從陣列中選擇滿足特定條件的元素，並返回一個新的陣列。</li>\n</ul>\n<h3 id=\"filter特點\"><a href=\"#filter特點\" class=\"headerlink\" title=\"filter特點\"></a>filter特點</h3><ul>\n<li>會產生新的陣列，需要有其他變數指定。</li>\n</ul>\n<h3 id=\"filter範例\"><a href=\"#filter範例\" class=\"headerlink\" title=\"filter範例\"></a>filter範例</h3><ul>\n<li>找到大於等於80的用戶資訊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">newarr [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newarr = []</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">    newarr.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Price</span> &gt;= <span class=\"number\">80</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr&quot;</span>, arr)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;newarr&quot;</span>, newarr)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-findIndex-callback-element-index-array\"><a href=\"#Array-findIndex-callback-element-index-array\" class=\"headerlink\" title=\"Array.findIndex(callback[element, index, array])\"></a>Array.findIndex(callback[element, index, array])</h2><h3 id=\"findIndex功能\"><a href=\"#findIndex功能\" class=\"headerlink\" title=\"findIndex功能\"></a>findIndex功能</h3><ul>\n<li>用於找到陣列中第一個滿足指定條件的元素的索引，如果找不到則返回 -1。</li>\n</ul>\n<h3 id=\"findIndex範例\"><a href=\"#findIndex範例\" class=\"headerlink\" title=\"findIndex範例\"></a>findIndex範例</h3><ul>\n<li>小美漲價10塊</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr before&quot;</span>, arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> finditemindex = arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.<span class=\"property\">Name</span> === <span class=\"string\">&#x27;小美&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr[finditemindex].<span class=\"property\">Price</span> = arr[finditemindex].<span class=\"property\">Price</span> + <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;finditemindex(小美索引位置)&quot;</span>, finditemindex)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;info(小美物件資訊)&quot;</span>, arr[finditemindex])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr before [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"title function_\">finditemindex</span>(小美索引位置) <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"title function_\">info</span>(<span class=\"params\">小美物件資訊</span>) &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">60</span> &#125;</span><br><span class=\"line\">arr after [</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr before&quot;</span>, arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item.<span class=\"property\">Name</span> === <span class=\"string\">&#x27;小美&#x27;</span>)&#123;</span><br><span class=\"line\">    index = key</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr[index].<span class=\"property\">Price</span> = arr[index].<span class=\"property\">Price</span> + <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;finditemindex(小美索引位置)&quot;</span>, index)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;info(小美物件資訊)&quot;</span>, arr[index])</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;arr after&quot;</span>, arr)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue\"><a href=\"#Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue\" class=\"headerlink\" title=\"Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)\"></a>Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</h2><h3 id=\"reduce參數-變數名稱可以自定義\"><a href=\"#reduce參數-變數名稱可以自定義\" class=\"headerlink\" title=\"reduce參數(變數名稱可以自定義)\"></a>reduce參數(變數名稱可以自定義)</h3><ul>\n<li>accumulator：上一次累加的數值，若為第一次則等於initialValue(必填)</li>\n<li>currentValue：當前處理的陣列元素(必填)</li>\n<li>currentIndex：當前處理陣列元素的索引值(可選)</li>\n<li>array：傳遞進來的陣列(可選)</li>\n<li>initialValue：初始值(可選)</li>\n</ul>\n<h3 id=\"reduce功能\"><a href=\"#reduce功能\" class=\"headerlink\" title=\"reduce功能\"></a>reduce功能</h3><ul>\n<li>用於將陣列中的所有元素進行累積</li>\n</ul>\n<h3 id=\"reduce特點\"><a href=\"#reduce特點\" class=\"headerlink\" title=\"reduce特點\"></a>reduce特點</h3><ul>\n<li>可以用於陣列的求和、求積等操作</li>\n<li>可以指定初始值(initialValue)</li>\n</ul>\n<h3 id=\"reduce範例\"><a href=\"#reduce範例\" class=\"headerlink\" title=\"reduce範例\"></a>reduce範例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Total</span> = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`目前累加值：<span class=\"subst\">$&#123;acc&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  -------`</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列元素&quot;</span>, cur)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列索引&quot;</span>, index)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> acc + cur.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;, init)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Total&quot;</span>, <span class=\"title class_\">Total</span>)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目前累加值：<span class=\"number\">0</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">0</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">10</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">1</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">110</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">50</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">2</span></span><br><span class=\"line\">目前累加值：<span class=\"number\">160</span></span><br><span class=\"line\">  -------</span><br><span class=\"line\">當前陣列元素 &#123; <span class=\"title class_\">Name</span>: <span class=\"string\">&#x27;小天&#x27;</span>, <span class=\"title class_\">Price</span>: <span class=\"number\">80</span> &#125;</span><br><span class=\"line\">當前陣列索引 <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"title class_\">Total</span> <span class=\"number\">240</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>forEach雖然也能達到相同效果，但程式碼會較繁瑣</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Total</span> = <span class=\"number\">0</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`目前累加值：<span class=\"subst\">$&#123;Total&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  -------`</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列元素&quot;</span>, item)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;當前陣列索引&quot;</span>, key)</span><br><span class=\"line\">  <span class=\"title class_\">Total</span> = <span class=\"title class_\">Total</span> + item.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Total&quot;</span>, <span class=\"title class_\">Total</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-sort-compareFunction\"><a href=\"#Array-sort-compareFunction\" class=\"headerlink\" title=\"Array.sort([compareFunction])\"></a>Array.sort([compareFunction])</h2><h3 id=\"sort參數-變數名稱可以自定義\"><a href=\"#sort參數-變數名稱可以自定義\" class=\"headerlink\" title=\"sort參數(變數名稱可以自定義)\"></a>sort參數(變數名稱可以自定義)</h3><ul>\n<li>a, b: 要比較的兩個元素</li>\n</ul>\n<h3 id=\"sort特點\"><a href=\"#sort特點\" class=\"headerlink\" title=\"sort特點\"></a>sort特點</h3><ul>\n<li>a - b：由小到大(升序)</li>\n<li>b - a：由大到小(降序)</li>\n</ul>\n<h3 id=\"sort功能\"><a href=\"#sort功能\" class=\"headerlink\" title=\"sort功能\"></a>sort功能</h3><ul>\n<li>用於對陣列元素進行排序。</li>\n</ul>\n<h3 id=\"sort範例\"><a href=\"#sort範例\" class=\"headerlink\" title=\"sort範例\"></a>sort範例</h3><h4 id=\"由小到大-升序\"><a href=\"#由小到大-升序\" class=\"headerlink\" title=\"由小到大(升序)\"></a>由小到大(升序)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortarr = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">Price</span> - b.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"由大到小-降序\"><a href=\"#由大到小-降序\" class=\"headerlink\" title=\"由大到小(降序)\"></a>由大到小(降序)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小王&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小明&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小美&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小天&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Price</span>: <span class=\"number\">80</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortarr = arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b.<span class=\"property\">Price</span> - a.<span class=\"property\">Price</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sortarr&quot;</span>, sortarr)</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript(10)：var、let、const之間的差異解析","date":"2023-12-10T15:53:30.000Z","description":"var、let及const是JavaScript中宣告變數的關鍵字，它們在作用域、對於for迴圈的影響、提升 (Hoisting) 的差異及重複宣告的處理上有所不同。","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 作用域(Scope)的差別\n\n作用域（Scope）是指在程式碼中變數和函式的可訪問範圍\n\n### var 函數作用域(function scope)\n\n- 變數在函數中的任何地方都是可讀取的。\n- **如果在函數之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤**\n\n---\n\n- 變數作用域說明\n  - 第一個 var a = 20(作用域：1-3行)\n  - 第二個 var a = 30(作用域：4-6行)\n\n![var作用域](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/var%E4%BD%9C%E7%94%A8%E5%9F%9F_oui5yp.png)\n\n- 範例如下\n\n```javascript=\nfunction funcA() {\n    var a = 20\n}\nfunction funcB() {\n    var a = 30\n}\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript=\nUncaught ReferenceError: a is not defined\n```\n\n#### 全域變數擁有全域作用域(Global Scope)\n\n- var變數在函式（Function）外宣告時，該變數會自動成為全域物件屬性。\n- let宣告的變數不會成為全域物件屬性。其作用域僅限於宣告它的區塊（block scope）或函式內部。\n\n範例如下：\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        var a = 10\n        let b = 20\n        console.log(window)\n    </script>\n</body>\n</html>\n```\n\n- 將全域物件window印出，可以看到剛剛設定的a已經變成window的一種屬性\n\n![Window全局屬性](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_bbtlce.png)\n\n---\n\n若跳過宣告的流程，宣告的變數也會變成全域物件屬性\n\n範例如下：\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        function test(){\n            a = 100\n        }\n        test()\n        console.log(window)\n    </script>\n</body>\n</html>\n```\n\n跳過宣告的情形下，變成Window全局屬性\n\n![Window全局屬性(跳過宣告的情形)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_%E8%B7%B3%E9%81%8E%E5%AE%A3%E5%91%8A%E7%9A%84%E6%83%85%E5%BD%A2_ievtuq.png)\n\n### let/const 塊級作用域(block scope)\n\n- 變數在聲明的**區塊{}**（例如，if 語句、迴圈）內可讀取的\n- **如果在區塊之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤**\n\n---\n\n最簡單的定義方式就是單純{}\n\n範例如下\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        {\n            const a = 100\n            console.log(a)\n        }\n    </script>\n</body>\n</html>\n```\n\n顯示如下\n\n![塊級作用域範例印出](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AF%84%E4%BE%8B%E5%8D%B0%E5%87%BA_zygsin.png)\n\n---\n\n搭配以下範例說明let/const 變數作用域\n\n- const Title = \"數字太大了\"(作用域：2-5行)\n\n![塊級作用域(IF範例作用域)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png)\n\n- 範例如下\n\n```javascript=\nfunction funcA(Value) {\n    if (Value > 100) {\n        const Title = \"數字太大了\"\n        console.log(\"if區域\", Title)\n    }\n    console.log(\"我是funcA的最下面\", Title)\n}\nfuncA(120)\n```\n\n顯示如下\n\n```javascript=\nif區域 數字太大了\nUncaught ReferenceError: Title is not defined\n```\n\n- Title作用域在if的括號之內(紅色框框)，因此 if 外層的console.log(\"我是funcA的最下面\", Title)無法正確讀取到Title變數，出現ReferenceError錯誤\n\n![塊級作用域(解釋外層讀取內層變數錯誤方式)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png)\n\n### const & let 差異\n\n#### let與const重新賦值差別\n\n- **let可以重新賦值**，案例如下\n\n```javascript=\nlet x = 10; // 宣告一個let變數\nx = 20 // 合法\n```\n\n- **const不可以重新賦值**，案例如下\n\n```javascript=\nconst x = 10 // 宣告一個const變數\nx = 20 // 不合法\n```\n\n顯示如下\n\n```javascript=\nTypeError: Assignment to constant variable.\n```\n\n#### const可針對物件型別內容物修改\n\n- **const宣告的變數，無法更改原始型別，但可以修改物件型別的屬性**\n\n範例如下(物件型別屬性修改)\n\n```javascript\nconst a = {\n    name: \"hello\"\n}\na.name = \"Antonio\"\n\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\n{ name: 'Antonio' }\n```\n\n#### const常數變數宣告就必須賦值\n\n範例如下(無賦值發生錯誤)\n\n```javascript\nconst a \nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\nSyntaxError: Missing initializer in const declaration\n```\n\n### 作用鍊(Scope chain)\n\n當使用變數時，依序從當前作用域開始，一層一層往外尋找是否有符合其作用域的變數。這個搜尋的過程形成了作用鍊\n\n![作用鍊(Scope chain)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E4%BD%9C%E7%94%A8%E9%8D%8A_Scope_chain_dfunur.png)\n\n---\n\n試著將上圖的程式碼改成console.log(a + b + c + d)顯示如下\n\n- 因為已經到最外層還是找不到宣告變數d的地方，因此出現ReferenceError錯誤\n\n```javascript=\nUncaught ReferenceError: d is not defined\n```\n\n## for迴圈的使用差異\n\n- 情境：使用setTimeout定時器，模擬異步事件。查看透過var及let變數在迴圈中的變化\n\n---\n\n### var定義的index，會彼此共用影響\n\n- var結束的時候，index = 10(全部的index都會被影響)\n\n```javascript=\nfor (var index = 0; index < 10; index++) {\n    setTimeout(()=>{\n        console.log(\"var index\", index)\n    }, 0)\n}\n```\n\n顯示如下\n![for迴圈(var迴圈案例)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_var%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_z2fzw4.png)\n\n### let是重新宣告出來，彼此互不影響(只在單一區塊作用)\n\n```javascript=\nfor (let index = 0; index < 10; index++) {\n    setTimeout(()=>{\n        console.log(\"let index\", index)\n    }, 0)\n}\n```\n\n顯示如下\n![for迴圈(let迴圈案例)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_let%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_vqxnqk.png)\n\n## 提升(Hoisting)的差別\n\nJavaScript編譯階段將變數和函式的宣告存入記憶體的概念，使函式和變量的宣告看起來好像被提升到作用域的頂部(實際程式碼的順序不變)，但賦值的動作並沒有提升\n\n### var變數宣告時會自動存入記憶體並初始化定義undefined\n\n範例如下：\n\n```javascript=\nconsole.log(x)\nvar x = 100\n```\n\n顯示如下\n\n```javascript=\nundefined\n```\n\n實際上瀏覽器看到的是類似以下的順序(並不會真的改變程式碼順序)：\n\n```javascript=\nvar x\nconsole.log(x)\nx = 100\n```\n\n- **執行順序上，var變數會優先提升至作用域的頂部並初始化定義為undefined**\n\n### const/let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)\n\n範例如下：\n\n```javascript=\nconsole.log(x)\nlet x = 100\n```\n\n顯示如下\n\n```javascript=\nReferenceError: Cannot access 'x' before initialization\n```\n\n---\n\n透過不同方式更確定let的區塊性提升\n\n範例如下\n\n```javascript=\nvar a = 10\nfunction test(){\n    console.log(a)\n    let a = 20\n}\ntest()\n```\n\n- 因為let的a變數提升，導致console的結果並未顯示10\n\n顯示如下\n\n```javascript!\nReferenceError: Cannot access 'a' before initialization\n```\n\n## 重複宣告\n\n### var變數可以重複宣告\n\n範例如下\n\n```javascript\nvar a = 10\nvar a = 20\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\n20\n```\n\n- 同樣變數的宣告會被替代，因此最後印出來的是最後一個20\n\n### let變數不可以重複宣告\n\n範例如下\n\n```javascript\nlet a = 10\nlet a = 20\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\nSyntaxError: Identifier 'a' has already been declared\n```\n\n- 同一區塊內不可以宣告同樣的變數\n","source":"_posts/2023-12-10-JS-10.md","raw":"---\ntitle: JavaScript(10)：var、let、const之間的差異解析\ndate: 2023-12-10 23:53:30\ntags:\n- [var]\n- [let]\n- [const]\ncategories:\n- [JavaScript]\ndescription: var、let及const是JavaScript中宣告變數的關鍵字，它們在作用域、對於for迴圈的影響、提升 (Hoisting) 的差異及重複宣告的處理上有所不同。\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## 作用域(Scope)的差別\n\n作用域（Scope）是指在程式碼中變數和函式的可訪問範圍\n\n### var 函數作用域(function scope)\n\n- 變數在函數中的任何地方都是可讀取的。\n- **如果在函數之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤**\n\n---\n\n- 變數作用域說明\n  - 第一個 var a = 20(作用域：1-3行)\n  - 第二個 var a = 30(作用域：4-6行)\n\n![var作用域](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/var%E4%BD%9C%E7%94%A8%E5%9F%9F_oui5yp.png)\n\n- 範例如下\n\n```javascript=\nfunction funcA() {\n    var a = 20\n}\nfunction funcB() {\n    var a = 30\n}\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript=\nUncaught ReferenceError: a is not defined\n```\n\n#### 全域變數擁有全域作用域(Global Scope)\n\n- var變數在函式（Function）外宣告時，該變數會自動成為全域物件屬性。\n- let宣告的變數不會成為全域物件屬性。其作用域僅限於宣告它的區塊（block scope）或函式內部。\n\n範例如下：\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        var a = 10\n        let b = 20\n        console.log(window)\n    </script>\n</body>\n</html>\n```\n\n- 將全域物件window印出，可以看到剛剛設定的a已經變成window的一種屬性\n\n![Window全局屬性](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_bbtlce.png)\n\n---\n\n若跳過宣告的流程，宣告的變數也會變成全域物件屬性\n\n範例如下：\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        function test(){\n            a = 100\n        }\n        test()\n        console.log(window)\n    </script>\n</body>\n</html>\n```\n\n跳過宣告的情形下，變成Window全局屬性\n\n![Window全局屬性(跳過宣告的情形)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_%E8%B7%B3%E9%81%8E%E5%AE%A3%E5%91%8A%E7%9A%84%E6%83%85%E5%BD%A2_ievtuq.png)\n\n### let/const 塊級作用域(block scope)\n\n- 變數在聲明的**區塊{}**（例如，if 語句、迴圈）內可讀取的\n- **如果在區塊之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤**\n\n---\n\n最簡單的定義方式就是單純{}\n\n範例如下\n\n```htmlembedded=\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js\"></script>\n</head>\n<body>\n    <script>\n        {\n            const a = 100\n            console.log(a)\n        }\n    </script>\n</body>\n</html>\n```\n\n顯示如下\n\n![塊級作用域範例印出](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AF%84%E4%BE%8B%E5%8D%B0%E5%87%BA_zygsin.png)\n\n---\n\n搭配以下範例說明let/const 變數作用域\n\n- const Title = \"數字太大了\"(作用域：2-5行)\n\n![塊級作用域(IF範例作用域)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png)\n\n- 範例如下\n\n```javascript=\nfunction funcA(Value) {\n    if (Value > 100) {\n        const Title = \"數字太大了\"\n        console.log(\"if區域\", Title)\n    }\n    console.log(\"我是funcA的最下面\", Title)\n}\nfuncA(120)\n```\n\n顯示如下\n\n```javascript=\nif區域 數字太大了\nUncaught ReferenceError: Title is not defined\n```\n\n- Title作用域在if的括號之內(紅色框框)，因此 if 外層的console.log(\"我是funcA的最下面\", Title)無法正確讀取到Title變數，出現ReferenceError錯誤\n\n![塊級作用域(解釋外層讀取內層變數錯誤方式)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png)\n\n### const & let 差異\n\n#### let與const重新賦值差別\n\n- **let可以重新賦值**，案例如下\n\n```javascript=\nlet x = 10; // 宣告一個let變數\nx = 20 // 合法\n```\n\n- **const不可以重新賦值**，案例如下\n\n```javascript=\nconst x = 10 // 宣告一個const變數\nx = 20 // 不合法\n```\n\n顯示如下\n\n```javascript=\nTypeError: Assignment to constant variable.\n```\n\n#### const可針對物件型別內容物修改\n\n- **const宣告的變數，無法更改原始型別，但可以修改物件型別的屬性**\n\n範例如下(物件型別屬性修改)\n\n```javascript\nconst a = {\n    name: \"hello\"\n}\na.name = \"Antonio\"\n\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\n{ name: 'Antonio' }\n```\n\n#### const常數變數宣告就必須賦值\n\n範例如下(無賦值發生錯誤)\n\n```javascript\nconst a \nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\nSyntaxError: Missing initializer in const declaration\n```\n\n### 作用鍊(Scope chain)\n\n當使用變數時，依序從當前作用域開始，一層一層往外尋找是否有符合其作用域的變數。這個搜尋的過程形成了作用鍊\n\n![作用鍊(Scope chain)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E4%BD%9C%E7%94%A8%E9%8D%8A_Scope_chain_dfunur.png)\n\n---\n\n試著將上圖的程式碼改成console.log(a + b + c + d)顯示如下\n\n- 因為已經到最外層還是找不到宣告變數d的地方，因此出現ReferenceError錯誤\n\n```javascript=\nUncaught ReferenceError: d is not defined\n```\n\n## for迴圈的使用差異\n\n- 情境：使用setTimeout定時器，模擬異步事件。查看透過var及let變數在迴圈中的變化\n\n---\n\n### var定義的index，會彼此共用影響\n\n- var結束的時候，index = 10(全部的index都會被影響)\n\n```javascript=\nfor (var index = 0; index < 10; index++) {\n    setTimeout(()=>{\n        console.log(\"var index\", index)\n    }, 0)\n}\n```\n\n顯示如下\n![for迴圈(var迴圈案例)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_var%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_z2fzw4.png)\n\n### let是重新宣告出來，彼此互不影響(只在單一區塊作用)\n\n```javascript=\nfor (let index = 0; index < 10; index++) {\n    setTimeout(()=>{\n        console.log(\"let index\", index)\n    }, 0)\n}\n```\n\n顯示如下\n![for迴圈(let迴圈案例)](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_let%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_vqxnqk.png)\n\n## 提升(Hoisting)的差別\n\nJavaScript編譯階段將變數和函式的宣告存入記憶體的概念，使函式和變量的宣告看起來好像被提升到作用域的頂部(實際程式碼的順序不變)，但賦值的動作並沒有提升\n\n### var變數宣告時會自動存入記憶體並初始化定義undefined\n\n範例如下：\n\n```javascript=\nconsole.log(x)\nvar x = 100\n```\n\n顯示如下\n\n```javascript=\nundefined\n```\n\n實際上瀏覽器看到的是類似以下的順序(並不會真的改變程式碼順序)：\n\n```javascript=\nvar x\nconsole.log(x)\nx = 100\n```\n\n- **執行順序上，var變數會優先提升至作用域的頂部並初始化定義為undefined**\n\n### const/let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)\n\n範例如下：\n\n```javascript=\nconsole.log(x)\nlet x = 100\n```\n\n顯示如下\n\n```javascript=\nReferenceError: Cannot access 'x' before initialization\n```\n\n---\n\n透過不同方式更確定let的區塊性提升\n\n範例如下\n\n```javascript=\nvar a = 10\nfunction test(){\n    console.log(a)\n    let a = 20\n}\ntest()\n```\n\n- 因為let的a變數提升，導致console的結果並未顯示10\n\n顯示如下\n\n```javascript!\nReferenceError: Cannot access 'a' before initialization\n```\n\n## 重複宣告\n\n### var變數可以重複宣告\n\n範例如下\n\n```javascript\nvar a = 10\nvar a = 20\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\n20\n```\n\n- 同樣變數的宣告會被替代，因此最後印出來的是最後一個20\n\n### let變數不可以重複宣告\n\n範例如下\n\n```javascript\nlet a = 10\nlet a = 20\nconsole.log(a)\n```\n\n顯示如下\n\n```javascript\nSyntaxError: Identifier 'a' has already been declared\n```\n\n- 同一區塊內不可以宣告同樣的變數\n","slug":"JS-10","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3t001248z10sez4ejo","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"作用域-Scope-的差別\"><a href=\"#作用域-Scope-的差別\" class=\"headerlink\" title=\"作用域(Scope)的差別\"></a>作用域(Scope)的差別</h2><p>作用域（Scope）是指在程式碼中變數和函式的可訪問範圍</p>\n<h3 id=\"var-函數作用域-function-scope\"><a href=\"#var-函數作用域-function-scope\" class=\"headerlink\" title=\"var 函數作用域(function scope)\"></a>var 函數作用域(function scope)</h3><ul>\n<li>變數在函數中的任何地方都是可讀取的。</li>\n<li><strong>如果在函數之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>\n</ul>\n<hr>\n<ul>\n<li>變數作用域說明<ul>\n<li>第一個 var a &#x3D; 20(作用域：1-3行)</li>\n<li>第二個 var a &#x3D; 30(作用域：4-6行)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/var%E4%BD%9C%E7%94%A8%E5%9F%9F_oui5yp.png\" alt=\"var作用域\"></p>\n<ul>\n<li>範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: a is not defined</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全域變數擁有全域作用域-Global-Scope\"><a href=\"#全域變數擁有全域作用域-Global-Scope\" class=\"headerlink\" title=\"全域變數擁有全域作用域(Global Scope)\"></a>全域變數擁有全域作用域(Global Scope)</h4><ul>\n<li>var變數在函式（Function）外宣告時，該變數會自動成為全域物件屬性。</li>\n<li>let宣告的變數不會成為全域物件屬性。其作用域僅限於宣告它的區塊（block scope）或函式內部。</li>\n</ul>\n<p>範例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var a = 10</span><br><span class=\"line\">        let b = 20</span><br><span class=\"line\">        console.log(window)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>將全域物件window印出，可以看到剛剛設定的a已經變成window的一種屬性</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_bbtlce.png\" alt=\"Window全局屬性\"></p>\n<hr>\n<p>若跳過宣告的流程，宣告的變數也會變成全域物件屬性</p>\n<p>範例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        function test()&#123;</span><br><span class=\"line\">            a = 100</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test()</span><br><span class=\"line\">        console.log(window)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>跳過宣告的情形下，變成Window全局屬性</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_%E8%B7%B3%E9%81%8E%E5%AE%A3%E5%91%8A%E7%9A%84%E6%83%85%E5%BD%A2_ievtuq.png\" alt=\"Window全局屬性(跳過宣告的情形)\"></p>\n<h3 id=\"let-const-塊級作用域-block-scope\"><a href=\"#let-const-塊級作用域-block-scope\" class=\"headerlink\" title=\"let&#x2F;const 塊級作用域(block scope)\"></a>let&#x2F;const 塊級作用域(block scope)</h3><ul>\n<li>變數在聲明的**區塊{}**（例如，if 語句、迴圈）內可讀取的</li>\n<li><strong>如果在區塊之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>\n</ul>\n<hr>\n<p>最簡單的定義方式就是單純{}</p>\n<p>範例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            const a = 100</span><br><span class=\"line\">            console.log(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AF%84%E4%BE%8B%E5%8D%B0%E5%87%BA_zygsin.png\" alt=\"塊級作用域範例印出\"></p>\n<hr>\n<p>搭配以下範例說明let&#x2F;const 變數作用域</p>\n<ul>\n<li>const Title &#x3D; “數字太大了”(作用域：2-5行)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png\" alt=\"塊級作用域(IF範例作用域)\"></p>\n<ul>\n<li>範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcA</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Value</span> &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">Title</span> = <span class=\"string\">&quot;數字太大了&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;if區域&quot;</span>, <span class=\"title class_\">Title</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是funcA的最下面&quot;</span>, <span class=\"title class_\">Title</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">funcA</span>(<span class=\"number\">120</span>)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>區域 數字太大了</span><br><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: <span class=\"title class_\">Title</span> is not defined</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Title作用域在if的括號之內(紅色框框)，因此 if 外層的console.log(“我是funcA的最下面”, Title)無法正確讀取到Title變數，出現ReferenceError錯誤</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png\" alt=\"塊級作用域(解釋外層讀取內層變數錯誤方式)\"></p>\n<h3 id=\"const-let-差異\"><a href=\"#const-let-差異\" class=\"headerlink\" title=\"const &amp; let 差異\"></a>const &amp; let 差異</h3><h4 id=\"let與const重新賦值差別\"><a href=\"#let與const重新賦值差別\" class=\"headerlink\" title=\"let與const重新賦值差別\"></a>let與const重新賦值差別</h4><ul>\n<li><strong>let可以重新賦值</strong>，案例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>; <span class=\"comment\">// 宣告一個let變數</span></span><br><span class=\"line\">x = <span class=\"number\">20</span> <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>const不可以重新賦值</strong>，案例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">10</span> <span class=\"comment\">// 宣告一個const變數</span></span><br><span class=\"line\">x = <span class=\"number\">20</span> <span class=\"comment\">// 不合法</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TypeError</span>: <span class=\"title class_\">Assignment</span> to constant variable.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const可針對物件型別內容物修改\"><a href=\"#const可針對物件型別內容物修改\" class=\"headerlink\" title=\"const可針對物件型別內容物修改\"></a>const可針對物件型別內容物修改</h4><ul>\n<li><strong>const宣告的變數，無法更改原始型別，但可以修改物件型別的屬性</strong></li>\n</ul>\n<p>範例如下(物件型別屬性修改)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&quot;Antonio&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Antonio&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const常數變數宣告就必須賦值\"><a href=\"#const常數變數宣告就必須賦值\" class=\"headerlink\" title=\"const常數變數宣告就必須賦值\"></a>const常數變數宣告就必須賦值</h4><p>範例如下(無賦值發生錯誤)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Missing</span> initializer <span class=\"keyword\">in</span> <span class=\"keyword\">const</span> declaration</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用鍊-Scope-chain\"><a href=\"#作用鍊-Scope-chain\" class=\"headerlink\" title=\"作用鍊(Scope chain)\"></a>作用鍊(Scope chain)</h3><p>當使用變數時，依序從當前作用域開始，一層一層往外尋找是否有符合其作用域的變數。這個搜尋的過程形成了作用鍊</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E4%BD%9C%E7%94%A8%E9%8D%8A_Scope_chain_dfunur.png\" alt=\"作用鍊(Scope chain)\"></p>\n<hr>\n<p>試著將上圖的程式碼改成console.log(a + b + c + d)顯示如下</p>\n<ul>\n<li>因為已經到最外層還是找不到宣告變數d的地方，因此出現ReferenceError錯誤</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: d is not defined</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for迴圈的使用差異\"><a href=\"#for迴圈的使用差異\" class=\"headerlink\" title=\"for迴圈的使用差異\"></a>for迴圈的使用差異</h2><ul>\n<li>情境：使用setTimeout定時器，模擬異步事件。查看透過var及let變數在迴圈中的變化</li>\n</ul>\n<hr>\n<h3 id=\"var定義的index，會彼此共用影響\"><a href=\"#var定義的index，會彼此共用影響\" class=\"headerlink\" title=\"var定義的index，會彼此共用影響\"></a>var定義的index，會彼此共用影響</h3><ul>\n<li>var結束的時候，index &#x3D; 10(全部的index都會被影響)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;var index&quot;</span>, index)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_var%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_z2fzw4.png\" alt=\"for迴圈(var迴圈案例)\"></p>\n<h3 id=\"let是重新宣告出來，彼此互不影響-只在單一區塊作用\"><a href=\"#let是重新宣告出來，彼此互不影響-只在單一區塊作用\" class=\"headerlink\" title=\"let是重新宣告出來，彼此互不影響(只在單一區塊作用)\"></a>let是重新宣告出來，彼此互不影響(只在單一區塊作用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;let index&quot;</span>, index)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_let%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_vqxnqk.png\" alt=\"for迴圈(let迴圈案例)\"></p>\n<h2 id=\"提升-Hoisting-的差別\"><a href=\"#提升-Hoisting-的差別\" class=\"headerlink\" title=\"提升(Hoisting)的差別\"></a>提升(Hoisting)的差別</h2><p>JavaScript編譯階段將變數和函式的宣告存入記憶體的概念，使函式和變量的宣告看起來好像被提升到作用域的頂部(實際程式碼的順序不變)，但賦值的動作並沒有提升</p>\n<h3 id=\"var變數宣告時會自動存入記憶體並初始化定義undefined\"><a href=\"#var變數宣告時會自動存入記憶體並初始化定義undefined\" class=\"headerlink\" title=\"var變數宣告時會自動存入記憶體並初始化定義undefined\"></a>var變數宣告時會自動存入記憶體並初始化定義undefined</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>實際上瀏覽器看到的是類似以下的順序(並不會真的改變程式碼順序)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\">x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>執行順序上，var變數會優先提升至作用域的頂部並初始化定義為undefined</strong></li>\n</ul>\n<h3 id=\"const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ\"><a href=\"#const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)\"></a>const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReferenceError</span>: <span class=\"title class_\">Cannot</span> access <span class=\"string\">&#x27;x&#x27;</span> before initialization</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>透過不同方式更確定let的區塊性提升</p>\n<p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>因為let的a變數提升，導致console的結果並未顯示10</li>\n</ul>\n<p>顯示如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReferenceError: Cannot access &#x27;a&#x27; before initialization</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重複宣告\"><a href=\"#重複宣告\" class=\"headerlink\" title=\"重複宣告\"></a>重複宣告</h2><h3 id=\"var變數可以重複宣告\"><a href=\"#var變數可以重複宣告\" class=\"headerlink\" title=\"var變數可以重複宣告\"></a>var變數可以重複宣告</h3><p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同樣變數的宣告會被替代，因此最後印出來的是最後一個20</li>\n</ul>\n<h3 id=\"let變數不可以重複宣告\"><a href=\"#let變數不可以重複宣告\" class=\"headerlink\" title=\"let變數不可以重複宣告\"></a>let變數不可以重複宣告</h3><p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Identifier</span> <span class=\"string\">&#x27;a&#x27;</span> has already been declared</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同一區塊內不可以宣告同樣的變數</li>\n</ul>\n","site":{"data":{}},"length":4256,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"作用域-Scope-的差別\"><a href=\"#作用域-Scope-的差別\" class=\"headerlink\" title=\"作用域(Scope)的差別\"></a>作用域(Scope)的差別</h2><p>作用域（Scope）是指在程式碼中變數和函式的可訪問範圍</p>\n<h3 id=\"var-函數作用域-function-scope\"><a href=\"#var-函數作用域-function-scope\" class=\"headerlink\" title=\"var 函數作用域(function scope)\"></a>var 函數作用域(function scope)</h3><ul>\n<li>變數在函數中的任何地方都是可讀取的。</li>\n<li><strong>如果在函數之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>\n</ul>\n<hr>\n<ul>\n<li>變數作用域說明<ul>\n<li>第一個 var a &#x3D; 20(作用域：1-3行)</li>\n<li>第二個 var a &#x3D; 30(作用域：4-6行)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/var%E4%BD%9C%E7%94%A8%E5%9F%9F_oui5yp.png\" alt=\"var作用域\"></p>\n<ul>\n<li>範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: a is not defined</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"全域變數擁有全域作用域-Global-Scope\"><a href=\"#全域變數擁有全域作用域-Global-Scope\" class=\"headerlink\" title=\"全域變數擁有全域作用域(Global Scope)\"></a>全域變數擁有全域作用域(Global Scope)</h4><ul>\n<li>var變數在函式（Function）外宣告時，該變數會自動成為全域物件屬性。</li>\n<li>let宣告的變數不會成為全域物件屬性。其作用域僅限於宣告它的區塊（block scope）或函式內部。</li>\n</ul>\n<p>範例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var a = 10</span><br><span class=\"line\">        let b = 20</span><br><span class=\"line\">        console.log(window)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>將全域物件window印出，可以看到剛剛設定的a已經變成window的一種屬性</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_bbtlce.png\" alt=\"Window全局屬性\"></p>\n<hr>\n<p>若跳過宣告的流程，宣告的變數也會變成全域物件屬性</p>\n<p>範例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        function test()&#123;</span><br><span class=\"line\">            a = 100</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        test()</span><br><span class=\"line\">        console.log(window)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>跳過宣告的情形下，變成Window全局屬性</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/Window%E5%85%A8%E5%B1%80%E5%B1%AC%E6%80%A7_%E8%B7%B3%E9%81%8E%E5%AE%A3%E5%91%8A%E7%9A%84%E6%83%85%E5%BD%A2_ievtuq.png\" alt=\"Window全局屬性(跳過宣告的情形)\"></p>\n<h3 id=\"let-const-塊級作用域-block-scope\"><a href=\"#let-const-塊級作用域-block-scope\" class=\"headerlink\" title=\"let&#x2F;const 塊級作用域(block scope)\"></a>let&#x2F;const 塊級作用域(block scope)</h3><ul>\n<li>變數在聲明的**區塊{}**（例如，if 語句、迴圈）內可讀取的</li>\n<li><strong>如果在區塊之外的地方嘗試訪問變數，將會顯示該變數不存在ReferenceError的錯誤</strong></li>\n</ul>\n<hr>\n<p>最簡單的定義方式就是單純{}</p>\n<p>範例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            const a = 100</span><br><span class=\"line\">            console.log(a)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AF%84%E4%BE%8B%E5%8D%B0%E5%87%BA_zygsin.png\" alt=\"塊級作用域範例印出\"></p>\n<hr>\n<p>搭配以下範例說明let&#x2F;const 變數作用域</p>\n<ul>\n<li>const Title &#x3D; “數字太大了”(作用域：2-5行)</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png\" alt=\"塊級作用域(IF範例作用域)\"></p>\n<ul>\n<li>範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcA</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Value</span> &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title class_\">Title</span> = <span class=\"string\">&quot;數字太大了&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;if區域&quot;</span>, <span class=\"title class_\">Title</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我是funcA的最下面&quot;</span>, <span class=\"title class_\">Title</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">funcA</span>(<span class=\"number\">120</span>)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>區域 數字太大了</span><br><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: <span class=\"title class_\">Title</span> is not defined</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Title作用域在if的括號之內(紅色框框)，因此 if 外層的console.log(“我是funcA的最下面”, Title)無法正確讀取到Title變數，出現ReferenceError錯誤</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E5%A1%8A%E7%B4%9A%E4%BD%9C%E7%94%A8%E5%9F%9F_IF%E7%AF%84%E4%BE%8B%E4%BD%9C%E7%94%A8%E5%9F%9F_d0npaz.png\" alt=\"塊級作用域(解釋外層讀取內層變數錯誤方式)\"></p>\n<h3 id=\"const-let-差異\"><a href=\"#const-let-差異\" class=\"headerlink\" title=\"const &amp; let 差異\"></a>const &amp; let 差異</h3><h4 id=\"let與const重新賦值差別\"><a href=\"#let與const重新賦值差別\" class=\"headerlink\" title=\"let與const重新賦值差別\"></a>let與const重新賦值差別</h4><ul>\n<li><strong>let可以重新賦值</strong>，案例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>; <span class=\"comment\">// 宣告一個let變數</span></span><br><span class=\"line\">x = <span class=\"number\">20</span> <span class=\"comment\">// 合法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>const不可以重新賦值</strong>，案例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"number\">10</span> <span class=\"comment\">// 宣告一個const變數</span></span><br><span class=\"line\">x = <span class=\"number\">20</span> <span class=\"comment\">// 不合法</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TypeError</span>: <span class=\"title class_\">Assignment</span> to constant variable.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const可針對物件型別內容物修改\"><a href=\"#const可針對物件型別內容物修改\" class=\"headerlink\" title=\"const可針對物件型別內容物修改\"></a>const可針對物件型別內容物修改</h4><ul>\n<li><strong>const宣告的變數，無法更改原始型別，但可以修改物件型別的屬性</strong></li>\n</ul>\n<p>範例如下(物件型別屬性修改)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&quot;Antonio&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Antonio&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"const常數變數宣告就必須賦值\"><a href=\"#const常數變數宣告就必須賦值\" class=\"headerlink\" title=\"const常數變數宣告就必須賦值\"></a>const常數變數宣告就必須賦值</h4><p>範例如下(無賦值發生錯誤)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Missing</span> initializer <span class=\"keyword\">in</span> <span class=\"keyword\">const</span> declaration</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"作用鍊-Scope-chain\"><a href=\"#作用鍊-Scope-chain\" class=\"headerlink\" title=\"作用鍊(Scope chain)\"></a>作用鍊(Scope chain)</h3><p>當使用變數時，依序從當前作用域開始，一層一層往外尋找是否有符合其作用域的變數。這個搜尋的過程形成了作用鍊</p>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/%E4%BD%9C%E7%94%A8%E9%8D%8A_Scope_chain_dfunur.png\" alt=\"作用鍊(Scope chain)\"></p>\n<hr>\n<p>試著將上圖的程式碼改成console.log(a + b + c + d)顯示如下</p>\n<ul>\n<li>因為已經到最外層還是找不到宣告變數d的地方，因此出現ReferenceError錯誤</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Uncaught</span> <span class=\"title class_\">ReferenceError</span>: d is not defined</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for迴圈的使用差異\"><a href=\"#for迴圈的使用差異\" class=\"headerlink\" title=\"for迴圈的使用差異\"></a>for迴圈的使用差異</h2><ul>\n<li>情境：使用setTimeout定時器，模擬異步事件。查看透過var及let變數在迴圈中的變化</li>\n</ul>\n<hr>\n<h3 id=\"var定義的index，會彼此共用影響\"><a href=\"#var定義的index，會彼此共用影響\" class=\"headerlink\" title=\"var定義的index，會彼此共用影響\"></a>var定義的index，會彼此共用影響</h3><ul>\n<li>var結束的時候，index &#x3D; 10(全部的index都會被影響)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;var index&quot;</span>, index)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007051/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_var%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_z2fzw4.png\" alt=\"for迴圈(var迴圈案例)\"></p>\n<h3 id=\"let是重新宣告出來，彼此互不影響-只在單一區塊作用\"><a href=\"#let是重新宣告出來，彼此互不影響-只在單一區塊作用\" class=\"headerlink\" title=\"let是重新宣告出來，彼此互不影響(只在單一區塊作用)\"></a>let是重新宣告出來，彼此互不影響(只在單一區塊作用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;let index&quot;</span>, index)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007050/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-10/for%E8%BF%B4%E5%9C%88_let%E8%BF%B4%E5%9C%88%E6%A1%88%E4%BE%8B_vqxnqk.png\" alt=\"for迴圈(let迴圈案例)\"></p>\n<h2 id=\"提升-Hoisting-的差別\"><a href=\"#提升-Hoisting-的差別\" class=\"headerlink\" title=\"提升(Hoisting)的差別\"></a>提升(Hoisting)的差別</h2><p>JavaScript編譯階段將變數和函式的宣告存入記憶體的概念，使函式和變量的宣告看起來好像被提升到作用域的頂部(實際程式碼的順序不變)，但賦值的動作並沒有提升</p>\n<h3 id=\"var變數宣告時會自動存入記憶體並初始化定義undefined\"><a href=\"#var變數宣告時會自動存入記憶體並初始化定義undefined\" class=\"headerlink\" title=\"var變數宣告時會自動存入記憶體並初始化定義undefined\"></a>var變數宣告時會自動存入記憶體並初始化定義undefined</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>實際上瀏覽器看到的是類似以下的順序(並不會真的改變程式碼順序)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\">x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>執行順序上，var變數會優先提升至作用域的頂部並初始化定義為undefined</strong></li>\n</ul>\n<h3 id=\"const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ\"><a href=\"#const-let變數提升時會陷入暫時性死區-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)\"></a>const&#x2F;let變數提升時會陷入暫時性死區(Temporal Dead Zone, TDZ)</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReferenceError</span>: <span class=\"title class_\">Cannot</span> access <span class=\"string\">&#x27;x&#x27;</span> before initialization</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>透過不同方式更確定let的區塊性提升</p>\n<p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>因為let的a變數提升，導致console的結果並未顯示10</li>\n</ul>\n<p>顯示如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReferenceError: Cannot access &#x27;a&#x27; before initialization</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重複宣告\"><a href=\"#重複宣告\" class=\"headerlink\" title=\"重複宣告\"></a>重複宣告</h2><h3 id=\"var變數可以重複宣告\"><a href=\"#var變數可以重複宣告\" class=\"headerlink\" title=\"var變數可以重複宣告\"></a>var變數可以重複宣告</h3><p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同樣變數的宣告會被替代，因此最後印出來的是最後一個20</li>\n</ul>\n<h3 id=\"let變數不可以重複宣告\"><a href=\"#let變數不可以重複宣告\" class=\"headerlink\" title=\"let變數不可以重複宣告\"></a>let變數不可以重複宣告</h3><p>範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Identifier</span> <span class=\"string\">&#x27;a&#x27;</span> has already been declared</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同一區塊內不可以宣告同樣的變數</li>\n</ul>\n"},{"title":"JavaScript(6)：深入理解Promise的原理及實際應用","date":"2023-11-29T06:49:18.000Z","description":"透過Promise，我們能夠有效解決JavaScript中的異步事件，使得程式碼更為清晰和可讀。","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## Promise為了解決什麼問題\n\n- JavaScript Promise是一種用來處理異步操作的對象，它代表一個異步操作的成功(resolve)或失敗(reject)的結果。(以下皆使用setTimeout()示範異步操作的案例)\n- 透過這種方法能避免回調地獄（Callback Hell）的問題。\n- 以下直接透過Callback Hell的函數說明：\n\n```javascript=\n// 假設有一個需求，我們需要連續執行三個異步操作：A、B、C。\nfunction operationA(callbackA) {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      callbackA();\n    }, 1000);  //← 等待1秒執行\n  }\n  function operationB(callbackB) {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      callbackB();\n    }, 1500);  //← 等待1.5秒執行\n  }\n  function operationC(callbackC) {\n    setTimeout(() => {\n      console.log(\"Operation C completed\");\n      callbackC();\n    }, 2000);  //← 等待2秒執行\n  }\n// Callback Hell\n  operationA(() => {\n    operationB(() => {\n      operationC(() => {\n        console.log(\"All operations completed\");\n      });\n    });\n  });\n//   在這個例子中，operationA 完成後，我們才能開始 operationB，然後是 operationC。這種嵌套結構會使得代碼難以閱讀，特別是當有更多異步操作時，這種形式會變得更加複雜和難以管理，這就是所謂的 Callback Hell。\n```\n\n顯示如下(依序出現A->B->C->All)：\n\n```javascript=\nOperation A completed\nOperation B completed\nOperation C completed\nAll operations completed\n```\n\n**這邊特別強調多層次結構的Callback Hell會變成像是波動拳的結構!!!難以維護**\n![Callback Hell示意圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/%E6%B3%A2%E5%8B%95%E6%8B%B3_fmoteh.png)\n\n---\n\n- Promise的寫法能夠避免內嵌的回調函數寫法\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      resolve();\n    }, 1000);  //← 等待1秒執行\n  });\n}\nfunction operationB() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      resolve();\n    }, 1500);  //← 等待1.5秒執行\n  });\n}\nfunction operationC() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation C completed\");\n      resolve();\n    }, 2000);\n  });\n}\n// 使用 Promise 的方式\noperationA()\n  .then(() => operationB())\n  .then(() => operationC())\n  .then(() => console.log(\"All operations completed\"))\n  .catch((error) => console.error(\"Error:\", error));\n```\n\n顯示如下(依序出現A->B->C->All)\n\n```javascript=\nOperation A completed\nOperation B completed\nOperation C completed\nAll operations completed\n```\n\n## Promise狀態\n\n- 當你使用 Promise時，它可以處於三種不同的狀態(狀態改變後就不可逆)：\n  - Peding(等待中)\n    - 創建使用的初始狀態，可在內部放置異步事件\n  - Fulfiled(已完成)\n    - 異步事件完成時，透過resolve()方法將Promise狀態改變至Fulfiled(已完成)\n    - 此時可以透過.then回傳Promise執行的結果\n  - Rejected(已拒絕)\n    - 異步事件失敗時，透過reject()方法將Promise狀態改變至Rejected(已失敗)\n    - 此時可透過.catch處理Promise的錯誤訊息\n- .finally()---最終結果\n  - 不論完成或是被拒絕均會執行的回調函數\n\n---\n\n- 基本使用概念如下\n\n![Promise流程圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/Promise%E6%B5%81%E7%A8%8B%E5%9C%96_u9xnts.png)\n\n```javascript=\noperationA()\n  .then((res) => {\n    console.log(\"操作成功:\", res);\n  })\n  .catch((error) => {\n    console.error(\"錯誤:\", error);\n  })\n  .finally(() => {\n    console.log(\"不論成功還是失敗都會執行的代碼\");\n  });\n```\n\n---\n\n- Fulfilled案例(如果Nb小於10代表成功)\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Number < 10) {\n        resolve({ Status: \"OK\" });\n      } else {\n        reject({ Status: \"Error\" });\n      }\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 5\noperationA(Nb)\n  .then((res) => {\n    console.log(\"異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(.then()捕獲異步事件回傳資料)：\n\n```javascript=\n異步事件-正確執行回傳資料 { Status: 'OK' }\n```\n\n---\n\n- reject案例(如果Nb大於10代表成功)：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Number < 10) {\n        resolve({ Status: \"OK\" });\n      } else {\n        reject({ Status: \"Error\" });\n      }\n    }, 1000);\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 20\noperationA(Nb)\n  .then((res) => {\n    console.log(\"異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(透過.catch()捕獲異步事件錯誤訊息)：\n\n```javascript=\n異步事件-異常訊息: { Status: 'Error' }\n```\n\n---\n\n- Promise的鏈式調用(多個異步事件同步執行)：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Number: Number * 2 });\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 20\noperationA(Nb)\n  .then((res) => {\n    console.log(\"第一階段-異步事件-正確執行回傳資料\", res)\n    return operationA(res.Number)\n  })\n  .then((res) => {\n    console.log(\"第二階段-異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(確保第一個事件執行完接收res.Number，進行第二次異步事件)：\n\n```javascript=\n第一階段-異步事件-正確執行回傳資料 { Number: 40 }\n第二階段-異步事件-正確執行回傳資料 { Number: 80 }\n```\n\n## Promise靜態方法\n\n### Promise.resolve(value) & Promise.reject(reason)\n\n- Promise.resolve(value)：回傳Promise已完成的結果\n- Promise.reject(reason)：回傳Promise被拒絕的結果\n\n```javascript=\nPromise.resolve(\"Reject Result\")\n  .then((res) => {\n    console.log(\"Resolved:\", res);  // 這裡會執行\n  })\n  .catch((error) => {\n    console.log(\"Rejected:\", error);  // 這裡不會執行\n  });\n\nPromise.reject(\"Reject Result\")\n  .then((res) => {\n    console.log(\"Resolved:\", res);  // 這裡不會執行\n  })\n  .catch((error) => {\n    console.log(\"Rejected:\", error);  // 這裡會執行\n  });\n```\n\n顯示如下：\n\n```javascript=\nResolved: Reject Result\nRejected: Reject Result\n```\n\n---\n\n### Promise.all(iterable)\n\n- 等待所有Promise狀態轉變成Fulfiled取得的結果，返回一個包含所有解析值的數組。\n- 如果其中一個Promise狀態轉變成Rejected，整個Promise.all()都會被拒絕。\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      resolve({ Statue: \"A\" });\n    }, 1000);  //← 等待1秒執行\n  });\n}\nfunction operationB() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      resolve({ Statue: \"B\" });\n    }, 1500);  //← 等待1.5秒執行\n  });\n}\nPromise.all([operationA(), operationB()])\n  .then((res) => {\n    console.log(\"res\", res)\n  })\n  .catch((error) => {\n    console.error(\"Error\", error);\n  });\n```\n\n顯示如下：\n\n```javascript=\nOperation A completed\nOperation B completed\nres [ { Statue: 'A' }, { Statue: 'B' } ]\n```\n\n---\n\n### Promise.race(iterable)\n\n- 只要其中一個Promise狀態轉變成Fulfiled或Rejected立即結束，返回第一個成功(resolve)或被拒絕(reject)的Promise。\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Statue: \"A\" });\n    }, 500);  //← 等待0.5秒執行\n  });\n}\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject({ Statue: \"Timeout\" });\n    }, ms);\n  });\n}\nPromise.race([operationA(), timeout(1000)])\n  .then((res) => {\n    console.log(\"res\", res)\n  })\n  .catch((error) => {\n    console.error(\"Error\", error);\n  });\n```\n\n顯示如下：\n\n- 如果超過timeout的時間就算是超時\n\n```javascript=\nres { Statue: 'A' }\n```\n\n## async/await\n\n- 由async函數及await運算子組成，用於處理異步操作的語法糖。\n- await會解析Promise中的Fulfiled完成狀態回傳值\n- 將async/await用法與Promise鍊式寫法相互比較案例如下：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Number: Number * 2 });\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 鍊式的寫法\n// const Nb = 20\n// operationA(Nb)\n//   .then((res) => {\n//     console.log(\"第一階段-異步事件-正確執行回傳資料\", res)\n//     return operationA(res.Number)\n//   })\n//   .then((res) => {\n//     console.log(\"第二階段-異步事件-正確執行回傳資料\", res)\n//   })\n//   .catch((error) => {\n//     console.error(\"異步事件-異常訊息:\", error)\n//   })\n// 使用Async/await的寫法\n\nasync function fetchData() {\n  try {\n    const Nb = 20;\n    const result1 = await operationA(Nb);\n    console.log(\"第一階段-異步事件-正確執行回傳資料\", result1);\n    const result2 = await operationA(result1.Number);\n    console.log(\"第二階段-異步事件-正確執行回傳資料\", result2);\n  } catch (error) {\n    console.error(\"異步事件-異常訊息:\", error);\n  }\n}\n\nfetchData();\n```\n\n顯示如下：\n\n```javascript=\n第一階段-異步事件-正確執行回傳資料 { Number: 40 }\n第二階段-異步事件-正確執行回傳資料 { Number: 80 }\n```\n","source":"_posts/2023-11-29-JS-6.md","raw":"---\ntitle: JavaScript(6)：深入理解Promise的原理及實際應用\ndate: 2023-11-29 14:49:18\ntags:\n- [Promise]\ncategories:\n- [JavaScript]\ndescription: 透過Promise，我們能夠有效解決JavaScript中的異步事件，使得程式碼更為清晰和可讀。\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg)\n\n## Promise為了解決什麼問題\n\n- JavaScript Promise是一種用來處理異步操作的對象，它代表一個異步操作的成功(resolve)或失敗(reject)的結果。(以下皆使用setTimeout()示範異步操作的案例)\n- 透過這種方法能避免回調地獄（Callback Hell）的問題。\n- 以下直接透過Callback Hell的函數說明：\n\n```javascript=\n// 假設有一個需求，我們需要連續執行三個異步操作：A、B、C。\nfunction operationA(callbackA) {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      callbackA();\n    }, 1000);  //← 等待1秒執行\n  }\n  function operationB(callbackB) {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      callbackB();\n    }, 1500);  //← 等待1.5秒執行\n  }\n  function operationC(callbackC) {\n    setTimeout(() => {\n      console.log(\"Operation C completed\");\n      callbackC();\n    }, 2000);  //← 等待2秒執行\n  }\n// Callback Hell\n  operationA(() => {\n    operationB(() => {\n      operationC(() => {\n        console.log(\"All operations completed\");\n      });\n    });\n  });\n//   在這個例子中，operationA 完成後，我們才能開始 operationB，然後是 operationC。這種嵌套結構會使得代碼難以閱讀，特別是當有更多異步操作時，這種形式會變得更加複雜和難以管理，這就是所謂的 Callback Hell。\n```\n\n顯示如下(依序出現A->B->C->All)：\n\n```javascript=\nOperation A completed\nOperation B completed\nOperation C completed\nAll operations completed\n```\n\n**這邊特別強調多層次結構的Callback Hell會變成像是波動拳的結構!!!難以維護**\n![Callback Hell示意圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/%E6%B3%A2%E5%8B%95%E6%8B%B3_fmoteh.png)\n\n---\n\n- Promise的寫法能夠避免內嵌的回調函數寫法\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      resolve();\n    }, 1000);  //← 等待1秒執行\n  });\n}\nfunction operationB() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      resolve();\n    }, 1500);  //← 等待1.5秒執行\n  });\n}\nfunction operationC() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation C completed\");\n      resolve();\n    }, 2000);\n  });\n}\n// 使用 Promise 的方式\noperationA()\n  .then(() => operationB())\n  .then(() => operationC())\n  .then(() => console.log(\"All operations completed\"))\n  .catch((error) => console.error(\"Error:\", error));\n```\n\n顯示如下(依序出現A->B->C->All)\n\n```javascript=\nOperation A completed\nOperation B completed\nOperation C completed\nAll operations completed\n```\n\n## Promise狀態\n\n- 當你使用 Promise時，它可以處於三種不同的狀態(狀態改變後就不可逆)：\n  - Peding(等待中)\n    - 創建使用的初始狀態，可在內部放置異步事件\n  - Fulfiled(已完成)\n    - 異步事件完成時，透過resolve()方法將Promise狀態改變至Fulfiled(已完成)\n    - 此時可以透過.then回傳Promise執行的結果\n  - Rejected(已拒絕)\n    - 異步事件失敗時，透過reject()方法將Promise狀態改變至Rejected(已失敗)\n    - 此時可透過.catch處理Promise的錯誤訊息\n- .finally()---最終結果\n  - 不論完成或是被拒絕均會執行的回調函數\n\n---\n\n- 基本使用概念如下\n\n![Promise流程圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/Promise%E6%B5%81%E7%A8%8B%E5%9C%96_u9xnts.png)\n\n```javascript=\noperationA()\n  .then((res) => {\n    console.log(\"操作成功:\", res);\n  })\n  .catch((error) => {\n    console.error(\"錯誤:\", error);\n  })\n  .finally(() => {\n    console.log(\"不論成功還是失敗都會執行的代碼\");\n  });\n```\n\n---\n\n- Fulfilled案例(如果Nb小於10代表成功)\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Number < 10) {\n        resolve({ Status: \"OK\" });\n      } else {\n        reject({ Status: \"Error\" });\n      }\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 5\noperationA(Nb)\n  .then((res) => {\n    console.log(\"異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(.then()捕獲異步事件回傳資料)：\n\n```javascript=\n異步事件-正確執行回傳資料 { Status: 'OK' }\n```\n\n---\n\n- reject案例(如果Nb大於10代表成功)：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Number < 10) {\n        resolve({ Status: \"OK\" });\n      } else {\n        reject({ Status: \"Error\" });\n      }\n    }, 1000);\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 20\noperationA(Nb)\n  .then((res) => {\n    console.log(\"異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(透過.catch()捕獲異步事件錯誤訊息)：\n\n```javascript=\n異步事件-異常訊息: { Status: 'Error' }\n```\n\n---\n\n- Promise的鏈式調用(多個異步事件同步執行)：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Number: Number * 2 });\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 的方式\nconst Nb = 20\noperationA(Nb)\n  .then((res) => {\n    console.log(\"第一階段-異步事件-正確執行回傳資料\", res)\n    return operationA(res.Number)\n  })\n  .then((res) => {\n    console.log(\"第二階段-異步事件-正確執行回傳資料\", res)\n  })\n  .catch((error) => {\n    console.error(\"異步事件-異常訊息:\", error)\n  })\n```\n\n顯示如下(確保第一個事件執行完接收res.Number，進行第二次異步事件)：\n\n```javascript=\n第一階段-異步事件-正確執行回傳資料 { Number: 40 }\n第二階段-異步事件-正確執行回傳資料 { Number: 80 }\n```\n\n## Promise靜態方法\n\n### Promise.resolve(value) & Promise.reject(reason)\n\n- Promise.resolve(value)：回傳Promise已完成的結果\n- Promise.reject(reason)：回傳Promise被拒絕的結果\n\n```javascript=\nPromise.resolve(\"Reject Result\")\n  .then((res) => {\n    console.log(\"Resolved:\", res);  // 這裡會執行\n  })\n  .catch((error) => {\n    console.log(\"Rejected:\", error);  // 這裡不會執行\n  });\n\nPromise.reject(\"Reject Result\")\n  .then((res) => {\n    console.log(\"Resolved:\", res);  // 這裡不會執行\n  })\n  .catch((error) => {\n    console.log(\"Rejected:\", error);  // 這裡會執行\n  });\n```\n\n顯示如下：\n\n```javascript=\nResolved: Reject Result\nRejected: Reject Result\n```\n\n---\n\n### Promise.all(iterable)\n\n- 等待所有Promise狀態轉變成Fulfiled取得的結果，返回一個包含所有解析值的數組。\n- 如果其中一個Promise狀態轉變成Rejected，整個Promise.all()都會被拒絕。\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation A completed\");\n      resolve({ Statue: \"A\" });\n    }, 1000);  //← 等待1秒執行\n  });\n}\nfunction operationB() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(\"Operation B completed\");\n      resolve({ Statue: \"B\" });\n    }, 1500);  //← 等待1.5秒執行\n  });\n}\nPromise.all([operationA(), operationB()])\n  .then((res) => {\n    console.log(\"res\", res)\n  })\n  .catch((error) => {\n    console.error(\"Error\", error);\n  });\n```\n\n顯示如下：\n\n```javascript=\nOperation A completed\nOperation B completed\nres [ { Statue: 'A' }, { Statue: 'B' } ]\n```\n\n---\n\n### Promise.race(iterable)\n\n- 只要其中一個Promise狀態轉變成Fulfiled或Rejected立即結束，返回第一個成功(resolve)或被拒絕(reject)的Promise。\n\n```javascript=\nfunction operationA() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Statue: \"A\" });\n    }, 500);  //← 等待0.5秒執行\n  });\n}\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject({ Statue: \"Timeout\" });\n    }, ms);\n  });\n}\nPromise.race([operationA(), timeout(1000)])\n  .then((res) => {\n    console.log(\"res\", res)\n  })\n  .catch((error) => {\n    console.error(\"Error\", error);\n  });\n```\n\n顯示如下：\n\n- 如果超過timeout的時間就算是超時\n\n```javascript=\nres { Statue: 'A' }\n```\n\n## async/await\n\n- 由async函數及await運算子組成，用於處理異步操作的語法糖。\n- await會解析Promise中的Fulfiled完成狀態回傳值\n- 將async/await用法與Promise鍊式寫法相互比較案例如下：\n\n```javascript=\nfunction operationA(Number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ Number: Number * 2 });\n    }, 1000);  //← 等待1秒執行\n  });\n}\n// 使用 Promise 鍊式的寫法\n// const Nb = 20\n// operationA(Nb)\n//   .then((res) => {\n//     console.log(\"第一階段-異步事件-正確執行回傳資料\", res)\n//     return operationA(res.Number)\n//   })\n//   .then((res) => {\n//     console.log(\"第二階段-異步事件-正確執行回傳資料\", res)\n//   })\n//   .catch((error) => {\n//     console.error(\"異步事件-異常訊息:\", error)\n//   })\n// 使用Async/await的寫法\n\nasync function fetchData() {\n  try {\n    const Nb = 20;\n    const result1 = await operationA(Nb);\n    console.log(\"第一階段-異步事件-正確執行回傳資料\", result1);\n    const result2 = await operationA(result1.Number);\n    console.log(\"第二階段-異步事件-正確執行回傳資料\", result2);\n  } catch (error) {\n    console.error(\"異步事件-異常訊息:\", error);\n  }\n}\n\nfetchData();\n```\n\n顯示如下：\n\n```javascript=\n第一階段-異步事件-正確執行回傳資料 { Number: 40 }\n第二階段-異步事件-正確執行回傳資料 { Number: 80 }\n```\n","slug":"JS-6","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3v002a48z11vly98em","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Promise為了解決什麼問題\"><a href=\"#Promise為了解決什麼問題\" class=\"headerlink\" title=\"Promise為了解決什麼問題\"></a>Promise為了解決什麼問題</h2><ul>\n<li>JavaScript Promise是一種用來處理異步操作的對象，它代表一個異步操作的成功(resolve)或失敗(reject)的結果。(以下皆使用setTimeout()示範異步操作的案例)</li>\n<li>透過這種方法能避免回調地獄（Callback Hell）的問題。</li>\n<li>以下直接透過Callback Hell的函數說明：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假設有一個需求，我們需要連續執行三個異步操作：A、B、C。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\">callbackA</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackA</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\">callbackB</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackB</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">operationC</span>(<span class=\"params\">callbackC</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation C completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackC</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);  <span class=\"comment\">//← 等待2秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// Callback Hell</span></span><br><span class=\"line\">  <span class=\"title function_\">operationA</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">operationB</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">operationC</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;All operations completed&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">//   在這個例子中，operationA 完成後，我們才能開始 operationB，然後是 operationC。這種嵌套結構會使得代碼難以閱讀，特別是當有更多異步操作時，這種形式會變得更加複雜和難以管理，這就是所謂的 Callback Hell。</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> C completed</span><br><span class=\"line\"><span class=\"title class_\">All</span> operations completed</span><br></pre></td></tr></table></figure>\n\n<p><strong>這邊特別強調多層次結構的Callback Hell會變成像是波動拳的結構!!!難以維護</strong><br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/%E6%B3%A2%E5%8B%95%E6%8B%B3_fmoteh.png\" alt=\"Callback Hell示意圖\"></p>\n<hr>\n<ul>\n<li>Promise的寫法能夠避免內嵌的回調函數寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationC</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation C completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">operationB</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">operationC</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;All operations completed&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error:&quot;</span>, error));</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> C completed</span><br><span class=\"line\"><span class=\"title class_\">All</span> operations completed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise狀態\"><a href=\"#Promise狀態\" class=\"headerlink\" title=\"Promise狀態\"></a>Promise狀態</h2><ul>\n<li>當你使用 Promise時，它可以處於三種不同的狀態(狀態改變後就不可逆)：<ul>\n<li>Peding(等待中)<ul>\n<li>創建使用的初始狀態，可在內部放置異步事件</li>\n</ul>\n</li>\n<li>Fulfiled(已完成)<ul>\n<li>異步事件完成時，透過resolve()方法將Promise狀態改變至Fulfiled(已完成)</li>\n<li>此時可以透過.then回傳Promise執行的結果</li>\n</ul>\n</li>\n<li>Rejected(已拒絕)<ul>\n<li>異步事件失敗時，透過reject()方法將Promise狀態改變至Rejected(已失敗)</li>\n<li>此時可透過.catch處理Promise的錯誤訊息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>.finally()—最終結果<ul>\n<li>不論完成或是被拒絕均會執行的回調函數</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>基本使用概念如下</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/Promise%E6%B5%81%E7%A8%8B%E5%9C%96_u9xnts.png\" alt=\"Promise流程圖\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">operationA</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功:&quot;</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;錯誤:&quot;</span>, error);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;不論成功還是失敗都會執行的代碼&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Fulfilled案例(如果Nb小於10代表成功)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span> &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;OK&quot;</span> &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;Error&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(.then()捕獲異步事件回傳資料)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&#x27;OK&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>reject案例(如果Nb大於10代表成功)：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span> &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;OK&quot;</span> &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;Error&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(透過.catch()捕獲異步事件錯誤訊息)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">異步事件-異常訊息: &#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&#x27;Error&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Promise的鏈式調用(多個異步事件同步執行)：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Number</span>: <span class=\"title class_\">Number</span> * <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">operationA</span>(res.<span class=\"property\">Number</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(確保第一個事件執行完接收res.Number，進行第二次異步事件)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">40</span> &#125;</span><br><span class=\"line\">第二階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">80</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise靜態方法\"><a href=\"#Promise靜態方法\" class=\"headerlink\" title=\"Promise靜態方法\"></a>Promise靜態方法</h2><h3 id=\"Promise-resolve-value-Promise-reject-reason\"><a href=\"#Promise-resolve-value-Promise-reject-reason\" class=\"headerlink\" title=\"Promise.resolve(value) &amp; Promise.reject(reason)\"></a>Promise.resolve(value) &amp; Promise.reject(reason)</h3><ul>\n<li>Promise.resolve(value)：回傳Promise已完成的結果</li>\n<li>Promise.reject(reason)：回傳Promise被拒絕的結果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;Reject Result&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Resolved:&quot;</span>, res);  <span class=\"comment\">// 這裡會執行</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Rejected:&quot;</span>, error);  <span class=\"comment\">// 這裡不會執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&quot;Reject Result&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Resolved:&quot;</span>, res);  <span class=\"comment\">// 這裡不會執行</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Rejected:&quot;</span>, error);  <span class=\"comment\">// 這裡會執行</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Resolved</span>: <span class=\"title class_\">Reject</span> <span class=\"title class_\">Result</span></span><br><span class=\"line\"><span class=\"title class_\">Rejected</span>: <span class=\"title class_\">Reject</span> <span class=\"title class_\">Result</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h3><ul>\n<li>等待所有Promise狀態轉變成Fulfiled取得的結果，返回一個包含所有解析值的數組。</li>\n<li>如果其中一個Promise狀態轉變成Rejected，整個Promise.all()都會被拒絕。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;A&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;B&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">operationA</span>(), <span class=\"title function_\">operationB</span>()])</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error&quot;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\">res [ &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;A&#x27;</span> &#125;, &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;B&#x27;</span> &#125; ]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><ul>\n<li>只要其中一個Promise狀態轉變成Fulfiled或Rejected立即結束，返回第一個成功(resolve)或被拒絕(reject)的Promise。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;A&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);  <span class=\"comment\">//← 等待0.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;Timeout&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, ms);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([<span class=\"title function_\">operationA</span>(), <span class=\"title function_\">timeout</span>(<span class=\"number\">1000</span>)])</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error&quot;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<ul>\n<li>如果超過timeout的時間就算是超時</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;A&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h2><ul>\n<li>由async函數及await運算子組成，用於處理異步操作的語法糖。</li>\n<li>await會解析Promise中的Fulfiled完成狀態回傳值</li>\n<li>將async&#x2F;await用法與Promise鍊式寫法相互比較案例如下：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Number</span>: <span class=\"title class_\">Number</span> * <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 鍊式的寫法</span></span><br><span class=\"line\"><span class=\"comment\">// const Nb = 20</span></span><br><span class=\"line\"><span class=\"comment\">// operationA(Nb)</span></span><br><span class=\"line\"><span class=\"comment\">//   .then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;第一階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class=\"line\"><span class=\"comment\">//     return operationA(res.Number)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;第二階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.error(&quot;異步事件-異常訊息:&quot;, error)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用Async/await的寫法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result1 = <span class=\"keyword\">await</span> <span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, result1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">operationA</span>(result1.<span class=\"property\">Number</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, result2);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">40</span> &#125;</span><br><span class=\"line\">第二階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">80</span> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":7599,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007055/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JavaScript_f1qbxb.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"Promise為了解決什麼問題\"><a href=\"#Promise為了解決什麼問題\" class=\"headerlink\" title=\"Promise為了解決什麼問題\"></a>Promise為了解決什麼問題</h2><ul>\n<li>JavaScript Promise是一種用來處理異步操作的對象，它代表一個異步操作的成功(resolve)或失敗(reject)的結果。(以下皆使用setTimeout()示範異步操作的案例)</li>\n<li>透過這種方法能避免回調地獄（Callback Hell）的問題。</li>\n<li>以下直接透過Callback Hell的函數說明：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假設有一個需求，我們需要連續執行三個異步操作：A、B、C。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\">callbackA</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackA</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\">callbackB</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackB</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">operationC</span>(<span class=\"params\">callbackC</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation C completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">callbackC</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);  <span class=\"comment\">//← 等待2秒執行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// Callback Hell</span></span><br><span class=\"line\">  <span class=\"title function_\">operationA</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">operationB</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">operationC</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;All operations completed&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">//   在這個例子中，operationA 完成後，我們才能開始 operationB，然後是 operationC。這種嵌套結構會使得代碼難以閱讀，特別是當有更多異步操作時，這種形式會變得更加複雜和難以管理，這就是所謂的 Callback Hell。</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> C completed</span><br><span class=\"line\"><span class=\"title class_\">All</span> operations completed</span><br></pre></td></tr></table></figure>\n\n<p><strong>這邊特別強調多層次結構的Callback Hell會變成像是波動拳的結構!!!難以維護</strong><br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/%E6%B3%A2%E5%8B%95%E6%8B%B3_fmoteh.png\" alt=\"Callback Hell示意圖\"></p>\n<hr>\n<ul>\n<li>Promise的寫法能夠避免內嵌的回調函數寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationC</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation C completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">operationB</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">operationC</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;All operations completed&quot;</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error:&quot;</span>, error));</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(依序出現A-&gt;B-&gt;C-&gt;All)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> C completed</span><br><span class=\"line\"><span class=\"title class_\">All</span> operations completed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise狀態\"><a href=\"#Promise狀態\" class=\"headerlink\" title=\"Promise狀態\"></a>Promise狀態</h2><ul>\n<li>當你使用 Promise時，它可以處於三種不同的狀態(狀態改變後就不可逆)：<ul>\n<li>Peding(等待中)<ul>\n<li>創建使用的初始狀態，可在內部放置異步事件</li>\n</ul>\n</li>\n<li>Fulfiled(已完成)<ul>\n<li>異步事件完成時，透過resolve()方法將Promise狀態改變至Fulfiled(已完成)</li>\n<li>此時可以透過.then回傳Promise執行的結果</li>\n</ul>\n</li>\n<li>Rejected(已拒絕)<ul>\n<li>異步事件失敗時，透過reject()方法將Promise狀態改變至Rejected(已失敗)</li>\n<li>此時可透過.catch處理Promise的錯誤訊息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>.finally()—最終結果<ul>\n<li>不論完成或是被拒絕均會執行的回調函數</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>基本使用概念如下</li>\n</ul>\n<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-6/Promise%E6%B5%81%E7%A8%8B%E5%9C%96_u9xnts.png\" alt=\"Promise流程圖\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">operationA</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;操作成功:&quot;</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;錯誤:&quot;</span>, error);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;不論成功還是失敗都會執行的代碼&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Fulfilled案例(如果Nb小於10代表成功)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span> &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;OK&quot;</span> &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;Error&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(.then()捕獲異步事件回傳資料)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&#x27;OK&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>reject案例(如果Nb大於10代表成功)：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span> &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;OK&quot;</span> &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&quot;Error&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(透過.catch()捕獲異步事件錯誤訊息)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">異步事件-異常訊息: &#123; <span class=\"title class_\">Status</span>: <span class=\"string\">&#x27;Error&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Promise的鏈式調用(多個異步事件同步執行)：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Number</span>: <span class=\"title class_\">Number</span> * <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 的方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">operationA</span>(res.<span class=\"property\">Number</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下(確保第一個事件執行完接收res.Number，進行第二次異步事件)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">40</span> &#125;</span><br><span class=\"line\">第二階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">80</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise靜態方法\"><a href=\"#Promise靜態方法\" class=\"headerlink\" title=\"Promise靜態方法\"></a>Promise靜態方法</h2><h3 id=\"Promise-resolve-value-Promise-reject-reason\"><a href=\"#Promise-resolve-value-Promise-reject-reason\" class=\"headerlink\" title=\"Promise.resolve(value) &amp; Promise.reject(reason)\"></a>Promise.resolve(value) &amp; Promise.reject(reason)</h3><ul>\n<li>Promise.resolve(value)：回傳Promise已完成的結果</li>\n<li>Promise.reject(reason)：回傳Promise被拒絕的結果</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;Reject Result&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Resolved:&quot;</span>, res);  <span class=\"comment\">// 這裡會執行</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Rejected:&quot;</span>, error);  <span class=\"comment\">// 這裡不會執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&quot;Reject Result&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Resolved:&quot;</span>, res);  <span class=\"comment\">// 這裡不會執行</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Rejected:&quot;</span>, error);  <span class=\"comment\">// 這裡會執行</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Resolved</span>: <span class=\"title class_\">Reject</span> <span class=\"title class_\">Result</span></span><br><span class=\"line\"><span class=\"title class_\">Rejected</span>: <span class=\"title class_\">Reject</span> <span class=\"title class_\">Result</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h3><ul>\n<li>等待所有Promise狀態轉變成Fulfiled取得的結果，返回一個包含所有解析值的數組。</li>\n<li>如果其中一個Promise狀態轉變成Rejected，整個Promise.all()都會被拒絕。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation A completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;A&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationB</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Operation B completed&quot;</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;B&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1500</span>);  <span class=\"comment\">//← 等待1.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">operationA</span>(), <span class=\"title function_\">operationB</span>()])</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error&quot;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Operation</span> A completed</span><br><span class=\"line\"><span class=\"title class_\">Operation</span> B completed</span><br><span class=\"line\">res [ &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;A&#x27;</span> &#125;, &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;B&#x27;</span> &#125; ]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><ul>\n<li>只要其中一個Promise狀態轉變成Fulfiled或Rejected立即結束，返回第一個成功(resolve)或被拒絕(reject)的Promise。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;A&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);  <span class=\"comment\">//← 等待0.5秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(&#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&quot;Timeout&quot;</span> &#125;);</span><br><span class=\"line\">    &#125;, ms);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([<span class=\"title function_\">operationA</span>(), <span class=\"title function_\">timeout</span>(<span class=\"number\">1000</span>)])</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;res&quot;</span>, res)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Error&quot;</span>, error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<ul>\n<li>如果超過timeout的時間就算是超時</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res &#123; <span class=\"title class_\">Statue</span>: <span class=\"string\">&#x27;A&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async&#x2F;await\"></a>async&#x2F;await</h2><ul>\n<li>由async函數及await運算子組成，用於處理異步操作的語法糖。</li>\n<li>await會解析Promise中的Fulfiled完成狀態回傳值</li>\n<li>將async&#x2F;await用法與Promise鍊式寫法相互比較案例如下：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">operationA</span>(<span class=\"params\"><span class=\"built_in\">Number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; <span class=\"title class_\">Number</span>: <span class=\"title class_\">Number</span> * <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);  <span class=\"comment\">//← 等待1秒執行</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 Promise 鍊式的寫法</span></span><br><span class=\"line\"><span class=\"comment\">// const Nb = 20</span></span><br><span class=\"line\"><span class=\"comment\">// operationA(Nb)</span></span><br><span class=\"line\"><span class=\"comment\">//   .then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;第一階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class=\"line\"><span class=\"comment\">//     return operationA(res.Number)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .then((res) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.log(&quot;第二階段-異步事件-正確執行回傳資料&quot;, res)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//   .catch((error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     console.error(&quot;異步事件-異常訊息:&quot;, error)</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用Async/await的寫法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Nb</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result1 = <span class=\"keyword\">await</span> <span class=\"title function_\">operationA</span>(<span class=\"title class_\">Nb</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第一階段-異步事件-正確執行回傳資料&quot;</span>, result1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result2 = <span class=\"keyword\">await</span> <span class=\"title function_\">operationA</span>(result1.<span class=\"property\">Number</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;第二階段-異步事件-正確執行回傳資料&quot;</span>, result2);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;異步事件-異常訊息:&quot;</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>();</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">40</span> &#125;</span><br><span class=\"line\">第二階段-異步事件-正確執行回傳資料 &#123; <span class=\"title class_\">Number</span>: <span class=\"number\">80</span> &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"六角學院 - 軟體工程師體驗營","date":"2024-05-31T13:40:05.000Z","description":"這麼多線上課程? 你不想知道什麼是最吸引我的線上學習課程嗎?","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1717163281/hexschool-experience_c5chm6.avif)\n\n```text=\n面對網路上各種學習資源的洗禮，你也曾經感到無助或是找不到人討論嗎?\n\n今天想輕鬆一些分享關於我最喜歡的線上課程「六角學院」\n```\n\n## 跟自己比較就好\n\n這不是我第一次參加線上課程，也不是只有參加過六角學院的線上課程，但是我真的很喜歡六角的學習環境。在這邊你可以擁有數不盡的影片資源，提供很大的自由度讓你自行安排學習時間。即使是上班族，也能夠以自己最舒服的步調前進(EX:我)。這非常符合這次課程中一直提到的「跟自己比較就好」。我本身很容易產生知識焦慮，常常看到別人就覺得自己不夠好。但這個體驗營讓我更找回自己的初心，你不需要很厲害才開始，但你要開始了才能很厲害。\n\n## 每個人都是別人的導師\n\n在學習網頁設計的時候，即使是一個特效都可以讓我研究一整天。有時候，只需要有人指點一下，就可以發現自己認知或學習上的盲點。還記得一開始我不太敢問問題，怕問太簡單的問題會被別人認為是伸手族，腦中充滿了各種思緒。最終，我勇敢的提問之後，發現發現這些擔心都是多餘的。每個人在學習上都會遇到不會的事情，提問並不可恥。在這些問題討論的交流中，我更意識到自己喜歡這種大家一起討論學習問題的方式。網頁並沒有絕對正確的設計方式，但這也正是它的迷人之處，因為每個人都可以用自己的想法進行設計。\n\n## 永遠無極限的直播校長\n\n連續直播兩個小時幾乎沒間斷的教學，從基礎的Emmet開始，一步步講解到CSS的優先級、偽元素、偽類及部落格客製化創建等內容。每週我都很期待校長的直播，儘管課程內容中有七成是我已經熟悉的，但那額外的三成新知識讓我受益豐碩。\n\n看著校長的直播，我也希望能成為這樣子的人，將自己的專業轉化成指引其他想要接觸網頁的一盞燈。我非常佩服校長，也很感謝他的用心教學。有時候，甚至在半夜還能看到他回覆課程 Discord 上的訊息，真的很辛苦，與其說單純只是上課關係，更像是校長希望幫助每一個人，只要你願意努力，六角學院就不會放棄你。\n\n除此之外，校長還分享了許多職涯方面的建議，這些對我幫助很大，讓我能夠更有目標地構築未來職業所需的能力。校長針對每個人的問題給予具體的建議，有時甚至會超過原本的直播時間，但校長總是會一一回答，這種無私的付出讓我非常感動。\n\n## 每日任務及助教批改\n\n每日任務這種有具體目標的方式，我非常喜歡。當我看到別人針對同一問題的不同解法時，總是讓我感到興奮，甚至會有一種想要在榜上留名的動力。主題任務的提交數甚至到了1400多份，完全可以感受到助教批改有多辛苦，也讓我更加珍惜每次助教們給予的寶貴回饋。我印象最深刻的是，有次地震發生後，一位助教竟然因為震醒後，乾脆繼續批改作業，助教及老師們還要顧身體誒！！！！之後時間允許的情況下，還會想回來這個學習環境繼續進修及努力。\n","source":"_posts/2024-05-31-hexschool-experience.md","raw":"---\ntitle: 六角學院 - 軟體工程師體驗營\ndate: 2024-05-31 21:40:05\ntags:\n- [六角學院]\n- [軟體工程師體驗營]\n- [心得分享]\ncategories:\n- [學習心得]\ndescription: 這麼多線上課程? 你不想知道什麼是最吸引我的線上學習課程嗎?\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1717163281/hexschool-experience_c5chm6.avif)\n\n```text=\n面對網路上各種學習資源的洗禮，你也曾經感到無助或是找不到人討論嗎?\n\n今天想輕鬆一些分享關於我最喜歡的線上課程「六角學院」\n```\n\n## 跟自己比較就好\n\n這不是我第一次參加線上課程，也不是只有參加過六角學院的線上課程，但是我真的很喜歡六角的學習環境。在這邊你可以擁有數不盡的影片資源，提供很大的自由度讓你自行安排學習時間。即使是上班族，也能夠以自己最舒服的步調前進(EX:我)。這非常符合這次課程中一直提到的「跟自己比較就好」。我本身很容易產生知識焦慮，常常看到別人就覺得自己不夠好。但這個體驗營讓我更找回自己的初心，你不需要很厲害才開始，但你要開始了才能很厲害。\n\n## 每個人都是別人的導師\n\n在學習網頁設計的時候，即使是一個特效都可以讓我研究一整天。有時候，只需要有人指點一下，就可以發現自己認知或學習上的盲點。還記得一開始我不太敢問問題，怕問太簡單的問題會被別人認為是伸手族，腦中充滿了各種思緒。最終，我勇敢的提問之後，發現發現這些擔心都是多餘的。每個人在學習上都會遇到不會的事情，提問並不可恥。在這些問題討論的交流中，我更意識到自己喜歡這種大家一起討論學習問題的方式。網頁並沒有絕對正確的設計方式，但這也正是它的迷人之處，因為每個人都可以用自己的想法進行設計。\n\n## 永遠無極限的直播校長\n\n連續直播兩個小時幾乎沒間斷的教學，從基礎的Emmet開始，一步步講解到CSS的優先級、偽元素、偽類及部落格客製化創建等內容。每週我都很期待校長的直播，儘管課程內容中有七成是我已經熟悉的，但那額外的三成新知識讓我受益豐碩。\n\n看著校長的直播，我也希望能成為這樣子的人，將自己的專業轉化成指引其他想要接觸網頁的一盞燈。我非常佩服校長，也很感謝他的用心教學。有時候，甚至在半夜還能看到他回覆課程 Discord 上的訊息，真的很辛苦，與其說單純只是上課關係，更像是校長希望幫助每一個人，只要你願意努力，六角學院就不會放棄你。\n\n除此之外，校長還分享了許多職涯方面的建議，這些對我幫助很大，讓我能夠更有目標地構築未來職業所需的能力。校長針對每個人的問題給予具體的建議，有時甚至會超過原本的直播時間，但校長總是會一一回答，這種無私的付出讓我非常感動。\n\n## 每日任務及助教批改\n\n每日任務這種有具體目標的方式，我非常喜歡。當我看到別人針對同一問題的不同解法時，總是讓我感到興奮，甚至會有一種想要在榜上留名的動力。主題任務的提交數甚至到了1400多份，完全可以感受到助教批改有多辛苦，也讓我更加珍惜每次助教們給予的寶貴回饋。我印象最深刻的是，有次地震發生後，一位助教竟然因為震醒後，乾脆繼續批改作業，助教及老師們還要顧身體誒！！！！之後時間允許的情況下，還會想回來這個學習環境繼續進修及努力。\n","slug":"hexschool-experience","published":1,"updated":"2024-10-21T14:09:16.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3w002b48z1694f34iv","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1717163281/hexschool-experience_c5chm6.avif\" alt=\"Blog背景圖\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面對網路上各種學習資源的洗禮，你也曾經感到無助或是找不到人討論嗎?</span><br><span class=\"line\"></span><br><span class=\"line\">今天想輕鬆一些分享關於我最喜歡的線上課程「六角學院」</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跟自己比較就好\"><a href=\"#跟自己比較就好\" class=\"headerlink\" title=\"跟自己比較就好\"></a>跟自己比較就好</h2><p>這不是我第一次參加線上課程，也不是只有參加過六角學院的線上課程，但是我真的很喜歡六角的學習環境。在這邊你可以擁有數不盡的影片資源，提供很大的自由度讓你自行安排學習時間。即使是上班族，也能夠以自己最舒服的步調前進(EX:我)。這非常符合這次課程中一直提到的「跟自己比較就好」。我本身很容易產生知識焦慮，常常看到別人就覺得自己不夠好。但這個體驗營讓我更找回自己的初心，你不需要很厲害才開始，但你要開始了才能很厲害。</p>\n<h2 id=\"每個人都是別人的導師\"><a href=\"#每個人都是別人的導師\" class=\"headerlink\" title=\"每個人都是別人的導師\"></a>每個人都是別人的導師</h2><p>在學習網頁設計的時候，即使是一個特效都可以讓我研究一整天。有時候，只需要有人指點一下，就可以發現自己認知或學習上的盲點。還記得一開始我不太敢問問題，怕問太簡單的問題會被別人認為是伸手族，腦中充滿了各種思緒。最終，我勇敢的提問之後，發現發現這些擔心都是多餘的。每個人在學習上都會遇到不會的事情，提問並不可恥。在這些問題討論的交流中，我更意識到自己喜歡這種大家一起討論學習問題的方式。網頁並沒有絕對正確的設計方式，但這也正是它的迷人之處，因為每個人都可以用自己的想法進行設計。</p>\n<h2 id=\"永遠無極限的直播校長\"><a href=\"#永遠無極限的直播校長\" class=\"headerlink\" title=\"永遠無極限的直播校長\"></a>永遠無極限的直播校長</h2><p>連續直播兩個小時幾乎沒間斷的教學，從基礎的Emmet開始，一步步講解到CSS的優先級、偽元素、偽類及部落格客製化創建等內容。每週我都很期待校長的直播，儘管課程內容中有七成是我已經熟悉的，但那額外的三成新知識讓我受益豐碩。</p>\n<p>看著校長的直播，我也希望能成為這樣子的人，將自己的專業轉化成指引其他想要接觸網頁的一盞燈。我非常佩服校長，也很感謝他的用心教學。有時候，甚至在半夜還能看到他回覆課程 Discord 上的訊息，真的很辛苦，與其說單純只是上課關係，更像是校長希望幫助每一個人，只要你願意努力，六角學院就不會放棄你。</p>\n<p>除此之外，校長還分享了許多職涯方面的建議，這些對我幫助很大，讓我能夠更有目標地構築未來職業所需的能力。校長針對每個人的問題給予具體的建議，有時甚至會超過原本的直播時間，但校長總是會一一回答，這種無私的付出讓我非常感動。</p>\n<h2 id=\"每日任務及助教批改\"><a href=\"#每日任務及助教批改\" class=\"headerlink\" title=\"每日任務及助教批改\"></a>每日任務及助教批改</h2><p>每日任務這種有具體目標的方式，我非常喜歡。當我看到別人針對同一問題的不同解法時，總是讓我感到興奮，甚至會有一種想要在榜上留名的動力。主題任務的提交數甚至到了1400多份，完全可以感受到助教批改有多辛苦，也讓我更加珍惜每次助教們給予的寶貴回饋。我印象最深刻的是，有次地震發生後，一位助教竟然因為震醒後，乾脆繼續批改作業，助教及老師們還要顧身體誒！！！！之後時間允許的情況下，還會想回來這個學習環境繼續進修及努力。</p>\n","site":{"data":{}},"length":1108,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1717163281/hexschool-experience_c5chm6.avif\" alt=\"Blog背景圖\"></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面對網路上各種學習資源的洗禮，你也曾經感到無助或是找不到人討論嗎?</span><br><span class=\"line\"></span><br><span class=\"line\">今天想輕鬆一些分享關於我最喜歡的線上課程「六角學院」</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跟自己比較就好\"><a href=\"#跟自己比較就好\" class=\"headerlink\" title=\"跟自己比較就好\"></a>跟自己比較就好</h2><p>這不是我第一次參加線上課程，也不是只有參加過六角學院的線上課程，但是我真的很喜歡六角的學習環境。在這邊你可以擁有數不盡的影片資源，提供很大的自由度讓你自行安排學習時間。即使是上班族，也能夠以自己最舒服的步調前進(EX:我)。這非常符合這次課程中一直提到的「跟自己比較就好」。我本身很容易產生知識焦慮，常常看到別人就覺得自己不夠好。但這個體驗營讓我更找回自己的初心，你不需要很厲害才開始，但你要開始了才能很厲害。</p>\n<h2 id=\"每個人都是別人的導師\"><a href=\"#每個人都是別人的導師\" class=\"headerlink\" title=\"每個人都是別人的導師\"></a>每個人都是別人的導師</h2><p>在學習網頁設計的時候，即使是一個特效都可以讓我研究一整天。有時候，只需要有人指點一下，就可以發現自己認知或學習上的盲點。還記得一開始我不太敢問問題，怕問太簡單的問題會被別人認為是伸手族，腦中充滿了各種思緒。最終，我勇敢的提問之後，發現發現這些擔心都是多餘的。每個人在學習上都會遇到不會的事情，提問並不可恥。在這些問題討論的交流中，我更意識到自己喜歡這種大家一起討論學習問題的方式。網頁並沒有絕對正確的設計方式，但這也正是它的迷人之處，因為每個人都可以用自己的想法進行設計。</p>\n<h2 id=\"永遠無極限的直播校長\"><a href=\"#永遠無極限的直播校長\" class=\"headerlink\" title=\"永遠無極限的直播校長\"></a>永遠無極限的直播校長</h2><p>連續直播兩個小時幾乎沒間斷的教學，從基礎的Emmet開始，一步步講解到CSS的優先級、偽元素、偽類及部落格客製化創建等內容。每週我都很期待校長的直播，儘管課程內容中有七成是我已經熟悉的，但那額外的三成新知識讓我受益豐碩。</p>\n<p>看著校長的直播，我也希望能成為這樣子的人，將自己的專業轉化成指引其他想要接觸網頁的一盞燈。我非常佩服校長，也很感謝他的用心教學。有時候，甚至在半夜還能看到他回覆課程 Discord 上的訊息，真的很辛苦，與其說單純只是上課關係，更像是校長希望幫助每一個人，只要你願意努力，六角學院就不會放棄你。</p>\n<p>除此之外，校長還分享了許多職涯方面的建議，這些對我幫助很大，讓我能夠更有目標地構築未來職業所需的能力。校長針對每個人的問題給予具體的建議，有時甚至會超過原本的直播時間，但校長總是會一一回答，這種無私的付出讓我非常感動。</p>\n<h2 id=\"每日任務及助教批改\"><a href=\"#每日任務及助教批改\" class=\"headerlink\" title=\"每日任務及助教批改\"></a>每日任務及助教批改</h2><p>每日任務這種有具體目標的方式，我非常喜歡。當我看到別人針對同一問題的不同解法時，總是讓我感到興奮，甚至會有一種想要在榜上留名的動力。主題任務的提交數甚至到了1400多份，完全可以感受到助教批改有多辛苦，也讓我更加珍惜每次助教們給予的寶貴回饋。我印象最深刻的是，有次地震發生後，一位助教竟然因為震醒後，乾脆繼續批改作業，助教及老師們還要顧身體誒！！！！之後時間允許的情況下，還會想回來這個學習環境繼續進修及努力。</p>\n"},{"title":"JavaScript(8)：ES module 匯入與匯出","date":"2023-11-30T07:28:23.000Z","description":"使用< script >標籤讓瀏覽器中的網頁能夠使用 ES 模組功能時，你了解不同的匯入及匯出方法了嗎？","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 早期模塊化規範-CommonJS(CJS)\n\n運行環境: 主要在**Node.js**環境下運行。Node.js是一個基於V8引擎的伺服器端JavaScript執行環境，並且內建支援CommonJS模塊系統。\n\n- 匯入模塊\n使用**require**語法進行模塊匯入\n- 匯出模塊\n使用**module.exports**或**exports**語法進行模塊匯出\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓匯出變數\nexports.myVariable = \"Hello from CommonJS\";\n\n// ↓匯出函數\nmodule.exports.myVariableFunc = function(Value){\n    return Value + 100\n}\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓匯入模塊\nconst myModule = require('./Export.js');\n\nconsole.log(\"myModule\", myModule)\nconsole.log(\"myVariable\", myModule.myVariable)\nconsole.log(\"myVariableFunc\", myModule.myVariableFunc(200))\n```\n\n顯示如下：\n\n```javascript=\nmyModule {\n  myVariable: 'Hello from CommonJS',\n  myVariableFunc: [Function (anonymous)]\n}\nmyVariable Hello from CommonJS\nmyVariableFunc 300\n```\n\n## ES6模塊化規範-ES Module(ESM)\n\n運行環境: 可以在**Node.js**和**瀏覽器環境下**運行。ES Modules是ECMAScript 6（ES6）引入的官方模塊系統，得到了現代瀏覽器的原生支援。\n\n- 匯入模塊\n使用**import**語法進行模塊匯入\n- 匯出模塊\n使用**export**語法進行模塊匯出\n\n---\n方式分為以下兩種\n\n### 具名匯出(Named Export)\n\n- 藉由解構賦值來選擇性地引入模塊中的特定變數、函數或類別。\n- 模塊可同時匯出多個變數、函數或類別，使得模塊的功能可以被彈性地引入。\n- 匯入的變數名稱必須與原始模塊中的名稱保持一致\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓具名匯出變數\nexport const myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nexport function myFunction(Value) {\n    return Value + 100\n};\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport { myVariable, myFunction } from './Export.js';\n\nconsole.log(\"myVariable\", myVariable)\nconsole.log(\"myFunction\", myFunction(300))\n```\n\n顯示如下\n\n```javascript=\nmyVariable Hello from ES Module\nmyFunction 400\n```\n\n---\n\n#### 匯出的JS檔案不同的寫法(統一最後在匯出)\n\n```javascript=\n// ↓具名匯出變數\nconst myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nfunction myFunction(Value) {\n    return Value + 100\n};\n\nexport { myVariable, myFunction }\n```\n\n#### 匯入所有的具名模塊(*)\n\n- 需要將*命名成一個自定義的對象名稱\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport * as importModule from './Export.js';\n\nconsole.log(\"importModule\", importModule)\nconsole.log(\"myVariable\", importModule.myVariable)\nconsole.log(\"myFunction\", importModule.myFunction(300))\n```\n\n顯示如下\n\n```javascript=\nimportModule [Module: null prototype] {\n  myFunction: [Function: myFunction],\n  myVariable: 'Hello from ES Module'\n}\nmyVariable Hello from ES Module\nmyFunction 400\n```\n\n### 預設匯出(Default Export)\n\n- 模塊中唯一的默認導出。每個模塊只能使用一個 export default 來導出一個變數、函數、物件等。\n- 可以自行命名引入的變數名稱\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓預設匯出變數\nconst defaultVariable = \"Hello from Default Export\";\nexport default defaultVariable;\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport Customize from './Export.js';\n\nconsole.log(\"Customize\", Customize)\n```\n\n## 模塊化使用教學\n\n### Nodejs\n\n- 透過以下語法快速生成專案所需的package.json\n\n```javascript=\nnpm init -y\n```\n\n- 新增type告訴專案使用的是commonjs或是module即可使用對應的方法。\n![Package.json設定照片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/Package_afp8hn.png)\n\n### 瀏覽器\n\n#### 使用自己撰寫的js方法\n\n- 透過VS Code Live Server或是自幾架設Server(避免CORS限制)\n- Export.js檔案內容如下\n\n```javascript=\n// ↓具名匯出變數\nconst myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nfunction myFunction(Value) {\n    return Value + 100\n};\n\nexport { myVariable, myFunction }\n```\n\n- 以下是HTML範例檔案\n\n```html=\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ES Module Example</title>\n</head>\n\n<body>\n    <script type=\"module\">\n        import { myVariable, myFunction } from './Export.js'\n        console.log(myFunction(800))\n    </script>\n</body>\n\n</html>\n```\n\n顯示結果如下：\n![ESM匯入自己的JS方法](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E5%8C%AF%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84JS%E6%96%B9%E6%B3%95_tl41vj.png)\n\n#### 使用第三方套件的JS方法\n\n- 透過CDN的網站查找別人已開發好的第三方套件方法\n- [網站連結](https://cdnjs.com/)\n- 需確認CDN上面有寫esm標記，代表可以使用ECMAScript模塊的方式匯入\n![確定CDN有esm的標記](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/%E7%A2%BA%E5%AE%9ACDN%E6%9C%89esm%E7%9A%84%E6%A8%99%E8%A8%98_v7k94o.png)\n\n---\n\n- 範例如下(以Axios為例)\n\n```html=\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Using Axios in the Browser</title>\n</head>\n\n<body>\n    <script type=\"module\">\n        import axios from 'https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/esm/axios.js';\n        // 發送 GET 請求\n        axios.get('https://jsonplaceholder.typicode.com/todos/1')\n            .then(response => {\n                console.log('Data:', response.data);\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            });\n    </script>\n</body>\n\n</html>\n```\n\n顯示如下\n![ESM使用Axios第三方套件](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E4%BD%BF%E7%94%A8Axios%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6_v1snpg.png)\n","source":"_posts/2023-11-30-JS-8.md","raw":"---\ntitle: JavaScript(8)：ES module 匯入與匯出\ndate: 2023-11-30 15:28:23\ntags:\n- [CommonJS]\n- [ES Module]\ncategories:\n- [JavaScript]\ndescription: 使用< script >標籤讓瀏覽器中的網頁能夠使用 ES 模組功能時，你了解不同的匯入及匯出方法了嗎？\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg)\n\n## 早期模塊化規範-CommonJS(CJS)\n\n運行環境: 主要在**Node.js**環境下運行。Node.js是一個基於V8引擎的伺服器端JavaScript執行環境，並且內建支援CommonJS模塊系統。\n\n- 匯入模塊\n使用**require**語法進行模塊匯入\n- 匯出模塊\n使用**module.exports**或**exports**語法進行模塊匯出\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓匯出變數\nexports.myVariable = \"Hello from CommonJS\";\n\n// ↓匯出函數\nmodule.exports.myVariableFunc = function(Value){\n    return Value + 100\n}\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓匯入模塊\nconst myModule = require('./Export.js');\n\nconsole.log(\"myModule\", myModule)\nconsole.log(\"myVariable\", myModule.myVariable)\nconsole.log(\"myVariableFunc\", myModule.myVariableFunc(200))\n```\n\n顯示如下：\n\n```javascript=\nmyModule {\n  myVariable: 'Hello from CommonJS',\n  myVariableFunc: [Function (anonymous)]\n}\nmyVariable Hello from CommonJS\nmyVariableFunc 300\n```\n\n## ES6模塊化規範-ES Module(ESM)\n\n運行環境: 可以在**Node.js**和**瀏覽器環境下**運行。ES Modules是ECMAScript 6（ES6）引入的官方模塊系統，得到了現代瀏覽器的原生支援。\n\n- 匯入模塊\n使用**import**語法進行模塊匯入\n- 匯出模塊\n使用**export**語法進行模塊匯出\n\n---\n方式分為以下兩種\n\n### 具名匯出(Named Export)\n\n- 藉由解構賦值來選擇性地引入模塊中的特定變數、函數或類別。\n- 模塊可同時匯出多個變數、函數或類別，使得模塊的功能可以被彈性地引入。\n- 匯入的變數名稱必須與原始模塊中的名稱保持一致\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓具名匯出變數\nexport const myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nexport function myFunction(Value) {\n    return Value + 100\n};\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport { myVariable, myFunction } from './Export.js';\n\nconsole.log(\"myVariable\", myVariable)\nconsole.log(\"myFunction\", myFunction(300))\n```\n\n顯示如下\n\n```javascript=\nmyVariable Hello from ES Module\nmyFunction 400\n```\n\n---\n\n#### 匯出的JS檔案不同的寫法(統一最後在匯出)\n\n```javascript=\n// ↓具名匯出變數\nconst myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nfunction myFunction(Value) {\n    return Value + 100\n};\n\nexport { myVariable, myFunction }\n```\n\n#### 匯入所有的具名模塊(*)\n\n- 需要將*命名成一個自定義的對象名稱\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport * as importModule from './Export.js';\n\nconsole.log(\"importModule\", importModule)\nconsole.log(\"myVariable\", importModule.myVariable)\nconsole.log(\"myFunction\", importModule.myFunction(300))\n```\n\n顯示如下\n\n```javascript=\nimportModule [Module: null prototype] {\n  myFunction: [Function: myFunction],\n  myVariable: 'Hello from ES Module'\n}\nmyVariable Hello from ES Module\nmyFunction 400\n```\n\n### 預設匯出(Default Export)\n\n- 模塊中唯一的默認導出。每個模塊只能使用一個 export default 來導出一個變數、函數、物件等。\n- 可以自行命名引入的變數名稱\n\n---\n\n- 以下是匯出的JS檔案(Export.js)\n\n```javascript=\n// ↓預設匯出變數\nconst defaultVariable = \"Hello from Default Export\";\nexport default defaultVariable;\n```\n\n- 以下是匯入的JS檔案(Import.js)\n\n```javascript=\n// ↓具名匯入 (Named Import)\nimport Customize from './Export.js';\n\nconsole.log(\"Customize\", Customize)\n```\n\n## 模塊化使用教學\n\n### Nodejs\n\n- 透過以下語法快速生成專案所需的package.json\n\n```javascript=\nnpm init -y\n```\n\n- 新增type告訴專案使用的是commonjs或是module即可使用對應的方法。\n![Package.json設定照片](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/Package_afp8hn.png)\n\n### 瀏覽器\n\n#### 使用自己撰寫的js方法\n\n- 透過VS Code Live Server或是自幾架設Server(避免CORS限制)\n- Export.js檔案內容如下\n\n```javascript=\n// ↓具名匯出變數\nconst myVariable = \"Hello from ES Module\";\n\n// ↓具名匯出函數\nfunction myFunction(Value) {\n    return Value + 100\n};\n\nexport { myVariable, myFunction }\n```\n\n- 以下是HTML範例檔案\n\n```html=\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ES Module Example</title>\n</head>\n\n<body>\n    <script type=\"module\">\n        import { myVariable, myFunction } from './Export.js'\n        console.log(myFunction(800))\n    </script>\n</body>\n\n</html>\n```\n\n顯示結果如下：\n![ESM匯入自己的JS方法](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E5%8C%AF%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84JS%E6%96%B9%E6%B3%95_tl41vj.png)\n\n#### 使用第三方套件的JS方法\n\n- 透過CDN的網站查找別人已開發好的第三方套件方法\n- [網站連結](https://cdnjs.com/)\n- 需確認CDN上面有寫esm標記，代表可以使用ECMAScript模塊的方式匯入\n![確定CDN有esm的標記](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/%E7%A2%BA%E5%AE%9ACDN%E6%9C%89esm%E7%9A%84%E6%A8%99%E8%A8%98_v7k94o.png)\n\n---\n\n- 範例如下(以Axios為例)\n\n```html=\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Using Axios in the Browser</title>\n</head>\n\n<body>\n    <script type=\"module\">\n        import axios from 'https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/esm/axios.js';\n        // 發送 GET 請求\n        axios.get('https://jsonplaceholder.typicode.com/todos/1')\n            .then(response => {\n                console.log('Data:', response.data);\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            });\n    </script>\n</body>\n\n</html>\n```\n\n顯示如下\n![ESM使用Axios第三方套件](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E4%BD%BF%E7%94%A8Axios%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6_v1snpg.png)\n","slug":"JS-8","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3w002d48z19yls3xw9","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"早期模塊化規範-CommonJS-CJS\"><a href=\"#早期模塊化規範-CommonJS-CJS\" class=\"headerlink\" title=\"早期模塊化規範-CommonJS(CJS)\"></a>早期模塊化規範-CommonJS(CJS)</h2><p>運行環境: 主要在<strong>Node.js</strong>環境下運行。Node.js是一個基於V8引擎的伺服器端JavaScript執行環境，並且內建支援CommonJS模塊系統。</p>\n<ul>\n<li>匯入模塊<br>使用<strong>require</strong>語法進行模塊匯入</li>\n<li>匯出模塊<br>使用<strong>module.exports</strong>或<strong>exports</strong>語法進行模塊匯出</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓匯出變數</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">myVariable</span> = <span class=\"string\">&quot;Hello from CommonJS&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓匯出函數</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">myVariableFunc</span> = <span class=\"keyword\">function</span>(<span class=\"params\">Value</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓匯入模塊</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Export.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myModule&quot;</span>, myModule)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, myModule.<span class=\"property\">myVariable</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariableFunc&quot;</span>, myModule.<span class=\"title function_\">myVariableFunc</span>(<span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule &#123;</span><br><span class=\"line\">  <span class=\"attr\">myVariable</span>: <span class=\"string\">&#x27;Hello from CommonJS&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">myVariableFunc</span>: [<span class=\"title class_\">Function</span> (anonymous)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"title class_\">CommonJS</span></span><br><span class=\"line\">myVariableFunc <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6模塊化規範-ES-Module-ESM\"><a href=\"#ES6模塊化規範-ES-Module-ESM\" class=\"headerlink\" title=\"ES6模塊化規範-ES Module(ESM)\"></a>ES6模塊化規範-ES Module(ESM)</h2><p>運行環境: 可以在<strong>Node.js</strong>和<strong>瀏覽器環境下</strong>運行。ES Modules是ECMAScript 6（ES6）引入的官方模塊系統，得到了現代瀏覽器的原生支援。</p>\n<ul>\n<li>匯入模塊<br>使用<strong>import</strong>語法進行模塊匯入</li>\n<li>匯出模塊<br>使用<strong>export</strong>語法進行模塊匯出</li>\n</ul>\n<hr>\n<p>方式分為以下兩種</p>\n<h3 id=\"具名匯出-Named-Export\"><a href=\"#具名匯出-Named-Export\" class=\"headerlink\" title=\"具名匯出(Named Export)\"></a>具名匯出(Named Export)</h3><ul>\n<li>藉由解構賦值來選擇性地引入模塊中的特定變數、函數或類別。</li>\n<li>模塊可同時匯出多個變數、函數或類別，使得模塊的功能可以被彈性地引入。</li>\n<li>匯入的變數名稱必須與原始模塊中的名稱保持一致</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; myVariable, myFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, myVariable)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myFunction&quot;</span>, <span class=\"title function_\">myFunction</span>(<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"variable constant_\">ES</span> <span class=\"title class_\">Module</span></span><br><span class=\"line\">myFunction <span class=\"number\">400</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"匯出的JS檔案不同的寫法-統一最後在匯出\"><a href=\"#匯出的JS檔案不同的寫法-統一最後在匯出\" class=\"headerlink\" title=\"匯出的JS檔案不同的寫法(統一最後在匯出)\"></a>匯出的JS檔案不同的寫法(統一最後在匯出)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匯入所有的具名模塊\"><a href=\"#匯入所有的具名模塊\" class=\"headerlink\" title=\"匯入所有的具名模塊(*)\"></a>匯入所有的具名模塊(*)</h4><ul>\n<li>需要將*命名成一個自定義的對象名稱</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> importModule <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;importModule&quot;</span>, importModule)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, importModule.<span class=\"property\">myVariable</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myFunction&quot;</span>, importModule.<span class=\"title function_\">myFunction</span>(<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importModule [<span class=\"title class_\">Module</span>: <span class=\"literal\">null</span> prototype] &#123;</span><br><span class=\"line\">  <span class=\"attr\">myFunction</span>: [<span class=\"title class_\">Function</span>: myFunction],</span><br><span class=\"line\">  <span class=\"attr\">myVariable</span>: <span class=\"string\">&#x27;Hello from ES Module&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"variable constant_\">ES</span> <span class=\"title class_\">Module</span></span><br><span class=\"line\">myFunction <span class=\"number\">400</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"預設匯出-Default-Export\"><a href=\"#預設匯出-Default-Export\" class=\"headerlink\" title=\"預設匯出(Default Export)\"></a>預設匯出(Default Export)</h3><ul>\n<li>模塊中唯一的默認導出。每個模塊只能使用一個 export default 來導出一個變數、函數、物件等。</li>\n<li>可以自行命名引入的變數名稱</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓預設匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultVariable = <span class=\"string\">&quot;Hello from Default Export&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defaultVariable;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Customize</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Customize&quot;</span>, <span class=\"title class_\">Customize</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模塊化使用教學\"><a href=\"#模塊化使用教學\" class=\"headerlink\" title=\"模塊化使用教學\"></a>模塊化使用教學</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><ul>\n<li>透過以下語法快速生成專案所需的package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新增type告訴專案使用的是commonjs或是module即可使用對應的方法。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/Package_afp8hn.png\" alt=\"Package.json設定照片\"></li>\n</ul>\n<h3 id=\"瀏覽器\"><a href=\"#瀏覽器\" class=\"headerlink\" title=\"瀏覽器\"></a>瀏覽器</h3><h4 id=\"使用自己撰寫的js方法\"><a href=\"#使用自己撰寫的js方法\" class=\"headerlink\" title=\"使用自己撰寫的js方法\"></a>使用自己撰寫的js方法</h4><ul>\n<li>透過VS Code Live Server或是自幾架設Server(避免CORS限制)</li>\n<li>Export.js檔案內容如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是HTML範例檔案</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ES Module Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">import</span> &#123; myVariable, myFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myFunction</span>(<span class=\"number\">800</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示結果如下：<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E5%8C%AF%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84JS%E6%96%B9%E6%B3%95_tl41vj.png\" alt=\"ESM匯入自己的JS方法\"></p>\n<h4 id=\"使用第三方套件的JS方法\"><a href=\"#使用第三方套件的JS方法\" class=\"headerlink\" title=\"使用第三方套件的JS方法\"></a>使用第三方套件的JS方法</h4><ul>\n<li>透過CDN的網站查找別人已開發好的第三方套件方法</li>\n<li><a href=\"https://cdnjs.com/\">網站連結</a></li>\n<li>需確認CDN上面有寫esm標記，代表可以使用ECMAScript模塊的方式匯入<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/%E7%A2%BA%E5%AE%9ACDN%E6%9C%89esm%E7%9A%84%E6%A8%99%E8%A8%98_v7k94o.png\" alt=\"確定CDN有esm的標記\"></li>\n</ul>\n<hr>\n<ul>\n<li>範例如下(以Axios為例)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Using Axios in the Browser<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/esm/axios.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 發送 GET 請求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Data:&#x27;</span>, response.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error:&#x27;</span>, error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E4%BD%BF%E7%94%A8Axios%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6_v1snpg.png\" alt=\"ESM使用Axios第三方套件\"></p>\n","site":{"data":{}},"length":3957,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007060/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/web_icuxev.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"早期模塊化規範-CommonJS-CJS\"><a href=\"#早期模塊化規範-CommonJS-CJS\" class=\"headerlink\" title=\"早期模塊化規範-CommonJS(CJS)\"></a>早期模塊化規範-CommonJS(CJS)</h2><p>運行環境: 主要在<strong>Node.js</strong>環境下運行。Node.js是一個基於V8引擎的伺服器端JavaScript執行環境，並且內建支援CommonJS模塊系統。</p>\n<ul>\n<li>匯入模塊<br>使用<strong>require</strong>語法進行模塊匯入</li>\n<li>匯出模塊<br>使用<strong>module.exports</strong>或<strong>exports</strong>語法進行模塊匯出</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓匯出變數</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">myVariable</span> = <span class=\"string\">&quot;Hello from CommonJS&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓匯出函數</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">myVariableFunc</span> = <span class=\"keyword\">function</span>(<span class=\"params\">Value</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓匯入模塊</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Export.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myModule&quot;</span>, myModule)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, myModule.<span class=\"property\">myVariable</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariableFunc&quot;</span>, myModule.<span class=\"title function_\">myVariableFunc</span>(<span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule &#123;</span><br><span class=\"line\">  <span class=\"attr\">myVariable</span>: <span class=\"string\">&#x27;Hello from CommonJS&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">myVariableFunc</span>: [<span class=\"title class_\">Function</span> (anonymous)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"title class_\">CommonJS</span></span><br><span class=\"line\">myVariableFunc <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6模塊化規範-ES-Module-ESM\"><a href=\"#ES6模塊化規範-ES-Module-ESM\" class=\"headerlink\" title=\"ES6模塊化規範-ES Module(ESM)\"></a>ES6模塊化規範-ES Module(ESM)</h2><p>運行環境: 可以在<strong>Node.js</strong>和<strong>瀏覽器環境下</strong>運行。ES Modules是ECMAScript 6（ES6）引入的官方模塊系統，得到了現代瀏覽器的原生支援。</p>\n<ul>\n<li>匯入模塊<br>使用<strong>import</strong>語法進行模塊匯入</li>\n<li>匯出模塊<br>使用<strong>export</strong>語法進行模塊匯出</li>\n</ul>\n<hr>\n<p>方式分為以下兩種</p>\n<h3 id=\"具名匯出-Named-Export\"><a href=\"#具名匯出-Named-Export\" class=\"headerlink\" title=\"具名匯出(Named Export)\"></a>具名匯出(Named Export)</h3><ul>\n<li>藉由解構賦值來選擇性地引入模塊中的特定變數、函數或類別。</li>\n<li>模塊可同時匯出多個變數、函數或類別，使得模塊的功能可以被彈性地引入。</li>\n<li>匯入的變數名稱必須與原始模塊中的名稱保持一致</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; myVariable, myFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, myVariable)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myFunction&quot;</span>, <span class=\"title function_\">myFunction</span>(<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"variable constant_\">ES</span> <span class=\"title class_\">Module</span></span><br><span class=\"line\">myFunction <span class=\"number\">400</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"匯出的JS檔案不同的寫法-統一最後在匯出\"><a href=\"#匯出的JS檔案不同的寫法-統一最後在匯出\" class=\"headerlink\" title=\"匯出的JS檔案不同的寫法(統一最後在匯出)\"></a>匯出的JS檔案不同的寫法(統一最後在匯出)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匯入所有的具名模塊\"><a href=\"#匯入所有的具名模塊\" class=\"headerlink\" title=\"匯入所有的具名模塊(*)\"></a>匯入所有的具名模塊(*)</h4><ul>\n<li>需要將*命名成一個自定義的對象名稱</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> importModule <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;importModule&quot;</span>, importModule)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myVariable&quot;</span>, importModule.<span class=\"property\">myVariable</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;myFunction&quot;</span>, importModule.<span class=\"title function_\">myFunction</span>(<span class=\"number\">300</span>))</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importModule [<span class=\"title class_\">Module</span>: <span class=\"literal\">null</span> prototype] &#123;</span><br><span class=\"line\">  <span class=\"attr\">myFunction</span>: [<span class=\"title class_\">Function</span>: myFunction],</span><br><span class=\"line\">  <span class=\"attr\">myVariable</span>: <span class=\"string\">&#x27;Hello from ES Module&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myVariable <span class=\"title class_\">Hello</span> <span class=\"keyword\">from</span> <span class=\"variable constant_\">ES</span> <span class=\"title class_\">Module</span></span><br><span class=\"line\">myFunction <span class=\"number\">400</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"預設匯出-Default-Export\"><a href=\"#預設匯出-Default-Export\" class=\"headerlink\" title=\"預設匯出(Default Export)\"></a>預設匯出(Default Export)</h3><ul>\n<li>模塊中唯一的默認導出。每個模塊只能使用一個 export default 來導出一個變數、函數、物件等。</li>\n<li>可以自行命名引入的變數名稱</li>\n</ul>\n<hr>\n<ul>\n<li>以下是匯出的JS檔案(Export.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓預設匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultVariable = <span class=\"string\">&quot;Hello from Default Export&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defaultVariable;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是匯入的JS檔案(Import.js)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯入 (Named Import)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Customize</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Customize&quot;</span>, <span class=\"title class_\">Customize</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模塊化使用教學\"><a href=\"#模塊化使用教學\" class=\"headerlink\" title=\"模塊化使用教學\"></a>模塊化使用教學</h2><h3 id=\"Nodejs\"><a href=\"#Nodejs\" class=\"headerlink\" title=\"Nodejs\"></a>Nodejs</h3><ul>\n<li>透過以下語法快速生成專案所需的package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新增type告訴專案使用的是commonjs或是module即可使用對應的方法。<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/Package_afp8hn.png\" alt=\"Package.json設定照片\"></li>\n</ul>\n<h3 id=\"瀏覽器\"><a href=\"#瀏覽器\" class=\"headerlink\" title=\"瀏覽器\"></a>瀏覽器</h3><h4 id=\"使用自己撰寫的js方法\"><a href=\"#使用自己撰寫的js方法\" class=\"headerlink\" title=\"使用自己撰寫的js方法\"></a>使用自己撰寫的js方法</h4><ul>\n<li>透過VS Code Live Server或是自幾架設Server(避免CORS限制)</li>\n<li>Export.js檔案內容如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ↓具名匯出變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myVariable = <span class=\"string\">&quot;Hello from ES Module&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ↓具名匯出函數</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">Value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Value</span> + <span class=\"number\">100</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myVariable, myFunction &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以下是HTML範例檔案</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>ES Module Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">import</span> &#123; myVariable, myFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Export.js&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myFunction</span>(<span class=\"number\">800</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示結果如下：<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E5%8C%AF%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84JS%E6%96%B9%E6%B3%95_tl41vj.png\" alt=\"ESM匯入自己的JS方法\"></p>\n<h4 id=\"使用第三方套件的JS方法\"><a href=\"#使用第三方套件的JS方法\" class=\"headerlink\" title=\"使用第三方套件的JS方法\"></a>使用第三方套件的JS方法</h4><ul>\n<li>透過CDN的網站查找別人已開發好的第三方套件方法</li>\n<li><a href=\"https://cdnjs.com/\">網站連結</a></li>\n<li>需確認CDN上面有寫esm標記，代表可以使用ECMAScript模塊的方式匯入<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007054/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/%E7%A2%BA%E5%AE%9ACDN%E6%9C%89esm%E7%9A%84%E6%A8%99%E8%A8%98_v7k94o.png\" alt=\"確定CDN有esm的標記\"></li>\n</ul>\n<hr>\n<ul>\n<li>範例如下(以Axios為例)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Using Axios in the Browser<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/esm/axios.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 發送 GET 請求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Data:&#x27;</span>, response.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error:&#x27;</span>, error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>顯示如下<br><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007053/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/JS-8/ESM%E4%BD%BF%E7%94%A8Axios%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6_v1snpg.png\" alt=\"ESM使用Axios第三方套件\"></p>\n"},{"title":"React(2)：JSX 是什麼？為何在 React 中使用 JSX？","date":"2023-11-29T08:03:40.000Z","description":"透過 JSX 語法糖，你能夠在一次 JavaScript 撰寫中包含 HTML 與 CSS 的內容","_content":"\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg)\n\n## 什麼是 JSX? 為什麼要用JSX?\n\n- JSX（JavaScript XML）是一種 JavaScript 的語法擴展，通常與 React 一同使用。它允許開發者在 JavaScript 中使用類似 XML 或 HTML 的語法來撰寫 React 元素，並透過渲染（Render）將其轉譯為實際的 DOM 元素及相對應的事件。這種語法使得 React 組件的描述更直觀、易讀，同時提供了更高效的元素創建方式。\n- JSX只是為React element(原生語法)提供語法糖。\n- 原生創建React元素語法：React.createElement(component, props, ...children)。\n  - component：React 元素的類型，可以是 HTML 元素名稱（字符串，例如 'div'）或 React 組件\n  - props：元素的屬性（attributes），是一個包含元素屬性及其值的物件。\n  - ...children：元素的子元素，可以是單一元素或一個包含多個子元素的數組。\n\n```javascript=\nReact.createElement(\n  div,\n  {className: 'info'},\n  'Hello World'\n)\n```\n\n- JSX寫法如下\n\n```javascript=\n<div className=\"info\">Hello World</div>\n```\n\n---\n\n- 巢狀寫法的案例如下：\n  - React.createElement寫法\n\n```javascript=\nReact.createElement(\n  'div',\n  { className: 'container' },\n  React.createElement(\n    'h1',\n    null,\n    'Nested Example'\n  ),\n  React.createElement(\n    'p',\n    { style: { color: 'blue' } },\n    'This is a nested paragraph.'\n  )\n);\n```\n\n- JSX寫法\n\n```javascript=\n<div className=\"container\">\n  <h1>Nested Example</h1>\n  <p style={{ color: 'blue' }}>This is a nested paragraph.</p>\n</div>\n```\n\n## JSX內部原理及規則\n\n- JSX會在編譯階段被轉譯成對應的 React.createElement 的呼叫，生成一個 JavaScript 物件，這個物件描述了 React 元素的類型、屬性（props），以及子元素。\n\n---\nJSX使用規則如下\n\n### 使用者定義的元件必須大寫\n\n- 錯誤寫法\n\n```javascript=\nimport React from 'react';\n// ↓ 正確：hello->Hello\nfunction hello(props) {\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  // ↓ 使用hello非大寫會導致發生錯誤，無法透過JSX引用該元件\n  //   正確的方式：hello->Hello\n  return <hello toWhat=\"World\" />;\n}\n```\n\n- 正確寫法\n\n```javascript=\nimport React from 'react';\n\nfunction Hello(props) {\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  return <Hello toWhat=\"World\" />;\n}\n```\n\n### React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)\n\n- 錯誤寫法\n\n```javascript=\nimport React from 'react';\n\n// PhotoStory 元件\nfunction PhotoStory(props) {\n  return <div>Photo Story: {props.story}</div>;\n}\n// VideoStory 元件\nfunction VideoStory(props) {\n  return <div>Video Story: {props.story}</div>;\n}\n// Story 元件\nconst Components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\nfunction Story(props) {\n  // ↓ 請用變數賦值，避免使用表達式\n  return <Components[props.storyType]; story={props.story} />;\n}\n// App 元件\nfunction App() {\n  return (\n    <div>\n      <Story storyType=\"photo\" story=\"A beautiful photo story\" />\n      <Story storyType=\"video\" story=\"An amazing video story\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n- 正確寫法\n- [CodePen連結](https://codepen.io/gwhvusel-the-builder/pen/ZEwamdE)\n\n```javascript=\nimport React from 'react';\n\n// PhotoStory 元件\nfunction PhotoStory(props) {\n  return <div>Photo Story: {props.story}</div>;\n}\n// VideoStory 元件\nfunction VideoStory(props) {\n  return <div>Video Story: {props.story}</div>;\n}\n// Story 元件\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\nfunction Story(props) {\n  // 根據 props 中的 storyType 選擇要渲染的元件\n  const SpecificStory = components[props.storyType];\n  // 渲染所選擇的元件，並將 story 作為 props 傳遞\n  return <SpecificStory story={props.story} />;\n}\n// App 元件\nfunction App() {\n  return (\n    <div>\n      <Story storyType=\"photo\" story=\"A beautiful photo story\" />\n      <Story storyType=\"video\" story=\"An amazing video story\" />\n    </div>\n  );\n}\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\nPhoto Story: A beautiful photo story\nVideo Story: An amazing video story\n```\n\n### 回傳單一個根元素\n\n- 最外層需要使用父層元素包覆(EX：div、或使用 Fragment (<> 和 </>))\n- 案例如下：\n\n```javascript=\nimport React from 'react';\n\nfunction App() {\n  return (\n    <>\n      <div>Content 1</div>\n      <div>Content 2</div>\n    </>\n  );\n}\n```\n\n### 所有標籤都需要結尾標籤\n\n範例如下：\n\n```javascript=\n<div></div>\n```\n\n- 自閉標籤(self-closing)範例如下\n\n```javascript=\n<img />\n```\n\n## JSX特色\n\n### Props可以使用Javascript表達式(foo={1 + 2 + 3 + 4})\n\n- Javascript表達式案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/eYxebZp)\n\n```javascript=\nfunction MyComponent(props) {\n    return <div>由App組件傳過來的foo參數：{props.foo}</div>\n}\nfunction App() {\n    return (\n        <div>\n            <MyComponent foo={1 + 2 + 3 + 4} />\n        </div>\n    );\n}\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\n由App組件傳過來的foo參數：10\n```\n\n- **if跟for不是表達式不能使用**\n- 三元運算符(肚子餓了嗎?餓了:還沒餓)及邏輯運算符(&&)算是表達式的一種\n- 三元運算符案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/qBgVLrX)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst Greeting = ({ isLoggedIn }) => {\n  return (\n    <div>\n      {isLoggedIn ? (\n        <p>Welcome back!</p>\n      ) : (\n        <p>Please log in.</p>\n      )}\n    </div>\n  );\n};\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const handleLoginToggle = () => {\n    setIsLoggedIn((prevIsLoggedIn) => !prevIsLoggedIn);\n  };\n  return (\n    <div>\n      <button onClick={handleLoginToggle}>\n        {isLoggedIn ? 'Logout' : 'Login'}\n      </button>\n      <Greeting isLoggedIn={isLoggedIn} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n- 邏輯運算符(&&)案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/QWYOzML)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst App = () => {\n    const isLoggedIn = true\n    return (\n        <div>\n            {isLoggedIn && <p>Welcome back!</p>}\n        </div>\n    );\n};\n\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\nWelcome back!\n```\n\n### 純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)\n\n```javascript=\n<div />\n\n<div></div>\n\n<div>{false}</div>\n\n<div>{null}</div>\n\n<div>{undefined}</div>\n\n<div>{true}</div>\n```\n\n### 屬性展開(...)\n\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/KKJybyw)\n\n```javascript=\nconst App = () => {\n    const props = { className: 'my-class', style: { color: 'red' } };\n    return (\n        <div>\n            <div {...props}>Hello, World!</div>\n        </div>\n    );\n};\n\nexport default App;\n```\n\n### 陣列作為子元素： 你可以使用陣列來傳遞多個子元素\n\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/QWYOzaW)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst App = () => {\n    const items = ['Item 1', 'Item 2', 'Item 3'];\n    return (\n        <div>\n            <ul>\n                {items.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default App;\n```\n\n### React內聯樣式（inline styles）\n\n- JSX不能使用保留字(會自動轉換成別的字詞避免與保留字衝突)\n  - class->className\n  - for->htmlfor(label)\n  - CSS內聯屬性stroke-width改成駝峰式命名(Camel-Case)strokeWidth\n\n```javascript=\nconst App = () => {\n    return (\n        <div>\n            <div style={{ color: 'red', fontSize: '16px' }}>Hello, World!</div>\n        </div>\n    );\n};\n```\n","source":"_posts/2023-11-29-React-2.md","raw":"---\ntitle: React(2)：JSX 是什麼？為何在 React 中使用 JSX？\ndate: 2023-11-29 16:03:40\ntags:\n- [JSX]\ncategories:\n- [React]\ndescription: 透過 JSX 語法糖，你能夠在一次 JavaScript 撰寫中包含 HTML 與 CSS 的內容\n---\n\n![Blog背景圖](https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg)\n\n## 什麼是 JSX? 為什麼要用JSX?\n\n- JSX（JavaScript XML）是一種 JavaScript 的語法擴展，通常與 React 一同使用。它允許開發者在 JavaScript 中使用類似 XML 或 HTML 的語法來撰寫 React 元素，並透過渲染（Render）將其轉譯為實際的 DOM 元素及相對應的事件。這種語法使得 React 組件的描述更直觀、易讀，同時提供了更高效的元素創建方式。\n- JSX只是為React element(原生語法)提供語法糖。\n- 原生創建React元素語法：React.createElement(component, props, ...children)。\n  - component：React 元素的類型，可以是 HTML 元素名稱（字符串，例如 'div'）或 React 組件\n  - props：元素的屬性（attributes），是一個包含元素屬性及其值的物件。\n  - ...children：元素的子元素，可以是單一元素或一個包含多個子元素的數組。\n\n```javascript=\nReact.createElement(\n  div,\n  {className: 'info'},\n  'Hello World'\n)\n```\n\n- JSX寫法如下\n\n```javascript=\n<div className=\"info\">Hello World</div>\n```\n\n---\n\n- 巢狀寫法的案例如下：\n  - React.createElement寫法\n\n```javascript=\nReact.createElement(\n  'div',\n  { className: 'container' },\n  React.createElement(\n    'h1',\n    null,\n    'Nested Example'\n  ),\n  React.createElement(\n    'p',\n    { style: { color: 'blue' } },\n    'This is a nested paragraph.'\n  )\n);\n```\n\n- JSX寫法\n\n```javascript=\n<div className=\"container\">\n  <h1>Nested Example</h1>\n  <p style={{ color: 'blue' }}>This is a nested paragraph.</p>\n</div>\n```\n\n## JSX內部原理及規則\n\n- JSX會在編譯階段被轉譯成對應的 React.createElement 的呼叫，生成一個 JavaScript 物件，這個物件描述了 React 元素的類型、屬性（props），以及子元素。\n\n---\nJSX使用規則如下\n\n### 使用者定義的元件必須大寫\n\n- 錯誤寫法\n\n```javascript=\nimport React from 'react';\n// ↓ 正確：hello->Hello\nfunction hello(props) {\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  // ↓ 使用hello非大寫會導致發生錯誤，無法透過JSX引用該元件\n  //   正確的方式：hello->Hello\n  return <hello toWhat=\"World\" />;\n}\n```\n\n- 正確寫法\n\n```javascript=\nimport React from 'react';\n\nfunction Hello(props) {\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  return <Hello toWhat=\"World\" />;\n}\n```\n\n### React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)\n\n- 錯誤寫法\n\n```javascript=\nimport React from 'react';\n\n// PhotoStory 元件\nfunction PhotoStory(props) {\n  return <div>Photo Story: {props.story}</div>;\n}\n// VideoStory 元件\nfunction VideoStory(props) {\n  return <div>Video Story: {props.story}</div>;\n}\n// Story 元件\nconst Components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\nfunction Story(props) {\n  // ↓ 請用變數賦值，避免使用表達式\n  return <Components[props.storyType]; story={props.story} />;\n}\n// App 元件\nfunction App() {\n  return (\n    <div>\n      <Story storyType=\"photo\" story=\"A beautiful photo story\" />\n      <Story storyType=\"video\" story=\"An amazing video story\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n- 正確寫法\n- [CodePen連結](https://codepen.io/gwhvusel-the-builder/pen/ZEwamdE)\n\n```javascript=\nimport React from 'react';\n\n// PhotoStory 元件\nfunction PhotoStory(props) {\n  return <div>Photo Story: {props.story}</div>;\n}\n// VideoStory 元件\nfunction VideoStory(props) {\n  return <div>Video Story: {props.story}</div>;\n}\n// Story 元件\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\nfunction Story(props) {\n  // 根據 props 中的 storyType 選擇要渲染的元件\n  const SpecificStory = components[props.storyType];\n  // 渲染所選擇的元件，並將 story 作為 props 傳遞\n  return <SpecificStory story={props.story} />;\n}\n// App 元件\nfunction App() {\n  return (\n    <div>\n      <Story storyType=\"photo\" story=\"A beautiful photo story\" />\n      <Story storyType=\"video\" story=\"An amazing video story\" />\n    </div>\n  );\n}\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\nPhoto Story: A beautiful photo story\nVideo Story: An amazing video story\n```\n\n### 回傳單一個根元素\n\n- 最外層需要使用父層元素包覆(EX：div、或使用 Fragment (<> 和 </>))\n- 案例如下：\n\n```javascript=\nimport React from 'react';\n\nfunction App() {\n  return (\n    <>\n      <div>Content 1</div>\n      <div>Content 2</div>\n    </>\n  );\n}\n```\n\n### 所有標籤都需要結尾標籤\n\n範例如下：\n\n```javascript=\n<div></div>\n```\n\n- 自閉標籤(self-closing)範例如下\n\n```javascript=\n<img />\n```\n\n## JSX特色\n\n### Props可以使用Javascript表達式(foo={1 + 2 + 3 + 4})\n\n- Javascript表達式案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/eYxebZp)\n\n```javascript=\nfunction MyComponent(props) {\n    return <div>由App組件傳過來的foo參數：{props.foo}</div>\n}\nfunction App() {\n    return (\n        <div>\n            <MyComponent foo={1 + 2 + 3 + 4} />\n        </div>\n    );\n}\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\n由App組件傳過來的foo參數：10\n```\n\n- **if跟for不是表達式不能使用**\n- 三元運算符(肚子餓了嗎?餓了:還沒餓)及邏輯運算符(&&)算是表達式的一種\n- 三元運算符案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/qBgVLrX)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst Greeting = ({ isLoggedIn }) => {\n  return (\n    <div>\n      {isLoggedIn ? (\n        <p>Welcome back!</p>\n      ) : (\n        <p>Please log in.</p>\n      )}\n    </div>\n  );\n};\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const handleLoginToggle = () => {\n    setIsLoggedIn((prevIsLoggedIn) => !prevIsLoggedIn);\n  };\n  return (\n    <div>\n      <button onClick={handleLoginToggle}>\n        {isLoggedIn ? 'Logout' : 'Login'}\n      </button>\n      <Greeting isLoggedIn={isLoggedIn} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n- 邏輯運算符(&&)案例如下：\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/QWYOzML)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst App = () => {\n    const isLoggedIn = true\n    return (\n        <div>\n            {isLoggedIn && <p>Welcome back!</p>}\n        </div>\n    );\n};\n\nexport default App;\n```\n\n顯示如下：\n\n```javascript=\nWelcome back!\n```\n\n### 純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)\n\n```javascript=\n<div />\n\n<div></div>\n\n<div>{false}</div>\n\n<div>{null}</div>\n\n<div>{undefined}</div>\n\n<div>{true}</div>\n```\n\n### 屬性展開(...)\n\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/KKJybyw)\n\n```javascript=\nconst App = () => {\n    const props = { className: 'my-class', style: { color: 'red' } };\n    return (\n        <div>\n            <div {...props}>Hello, World!</div>\n        </div>\n    );\n};\n\nexport default App;\n```\n\n### 陣列作為子元素： 你可以使用陣列來傳遞多個子元素\n\n- [Codepen連結](https://codepen.io/gwhvusel-the-builder/pen/QWYOzaW)\n\n```javascript=\nimport React, { useState } from 'react';\n\nconst App = () => {\n    const items = ['Item 1', 'Item 2', 'Item 3'];\n    return (\n        <div>\n            <ul>\n                {items.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default App;\n```\n\n### React內聯樣式（inline styles）\n\n- JSX不能使用保留字(會自動轉換成別的字詞避免與保留字衝突)\n  - class->className\n  - for->htmlfor(label)\n  - CSS內聯屬性stroke-width改成駝峰式命名(Camel-Case)strokeWidth\n\n```javascript=\nconst App = () => {\n    return (\n        <div>\n            <div style={{ color: 'red', fontSize: '16px' }}>Hello, World!</div>\n        </div>\n    );\n};\n```\n","slug":"React-2","published":1,"updated":"2024-05-31T14:23:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3w002e48z14gld6qva","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"什麼是-JSX-為什麼要用JSX\"><a href=\"#什麼是-JSX-為什麼要用JSX\" class=\"headerlink\" title=\"什麼是 JSX? 為什麼要用JSX?\"></a>什麼是 JSX? 為什麼要用JSX?</h2><ul>\n<li>JSX（JavaScript XML）是一種 JavaScript 的語法擴展，通常與 React 一同使用。它允許開發者在 JavaScript 中使用類似 XML 或 HTML 的語法來撰寫 React 元素，並透過渲染（Render）將其轉譯為實際的 DOM 元素及相對應的事件。這種語法使得 React 組件的描述更直觀、易讀，同時提供了更高效的元素創建方式。</li>\n<li>JSX只是為React element(原生語法)提供語法糖。</li>\n<li>原生創建React元素語法：React.createElement(component, props, …children)。<ul>\n<li>component：React 元素的類型，可以是 HTML 元素名稱（字符串，例如 ‘div’）或 React 組件</li>\n<li>props：元素的屬性（attributes），是一個包含元素屬性及其值的物件。</li>\n<li>…children：元素的子元素，可以是單一元素或一個包含多個子元素的數組。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">  div,</span><br><span class=\"line\">  &#123;<span class=\"attr\">className</span>: <span class=\"string\">&#x27;info&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSX寫法如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;info&quot;</span>&gt;<span class=\"title class_\">Hello</span> <span class=\"title class_\">World</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>巢狀寫法的案例如下：<ul>\n<li>React.createElement寫法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;container&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;h1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Nested Example&#x27;</span></span><br><span class=\"line\">  ),</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;p&#x27;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;blue&#x27;</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;This is a nested paragraph.&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSX寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Nested Example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">blue</span>&#x27; &#125;&#125;&gt;</span>This is a nested paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX內部原理及規則\"><a href=\"#JSX內部原理及規則\" class=\"headerlink\" title=\"JSX內部原理及規則\"></a>JSX內部原理及規則</h2><ul>\n<li>JSX會在編譯階段被轉譯成對應的 React.createElement 的呼叫，生成一個 JavaScript 物件，這個物件描述了 React 元素的類型、屬性（props），以及子元素。</li>\n</ul>\n<hr>\n<p>JSX使用規則如下</p>\n<h3 id=\"使用者定義的元件必須大寫\"><a href=\"#使用者定義的元件必須大寫\" class=\"headerlink\" title=\"使用者定義的元件必須大寫\"></a>使用者定義的元件必須大寫</h3><ul>\n<li>錯誤寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓ 正確：hello-&gt;Hello</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ↓ 使用hello非大寫會導致發生錯誤，無法透過JSX引用該元件</span></span><br><span class=\"line\">  <span class=\"comment\">//   正確的方式：hello-&gt;Hello</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">hello</span> <span class=\"attr\">toWhat</span>=<span class=\"string\">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正確寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Hello</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span> <span class=\"attr\">toWhat</span>=<span class=\"string\">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React元件不能使用表達式-只能是大寫字母開頭的變數或函數名\"><a href=\"#React元件不能使用表達式-只能是大寫字母開頭的變數或函數名\" class=\"headerlink\" title=\"React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)\"></a>React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)</h3><ul>\n<li>錯誤寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhotoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PhotoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// VideoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">VideoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Story 元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">photo</span>: <span class=\"title class_\">PhotoStory</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"title class_\">VideoStory</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Story</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ↓ 請用變數賦值，避免使用表達式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\">&lt;Components[props.storyType]; story=&#123;props.story&#125; /&gt;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;photo&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正確寫法</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/ZEwamdE\">CodePen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhotoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PhotoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// VideoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">VideoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Story 元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span><br><span class=\"line\">  <span class=\"attr\">photo</span>: <span class=\"title class_\">PhotoStory</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"title class_\">VideoStory</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Story</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根據 props 中的 storyType 選擇要渲染的元件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">SpecificStory</span> = components[props.<span class=\"property\">storyType</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 渲染所選擇的元件，並將 story 作為 props 傳遞</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SpecificStory</span> <span class=\"attr\">story</span>=<span class=\"string\">&#123;props.story&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;photo&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Photo</span> <span class=\"title class_\">Story</span>: A beautiful photo story</span><br><span class=\"line\"><span class=\"title class_\">Video</span> <span class=\"title class_\">Story</span>: <span class=\"title class_\">An</span> amazing video story</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回傳單一個根元素\"><a href=\"#回傳單一個根元素\" class=\"headerlink\" title=\"回傳單一個根元素\"></a>回傳單一個根元素</h3><ul>\n<li>最外層需要使用父層元素包覆(EX：div、或使用 Fragment (&lt;&gt; 和 &lt;&#x2F;&gt;))</li>\n<li>案例如下：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"所有標籤都需要結尾標籤\"><a href=\"#所有標籤都需要結尾標籤\" class=\"headerlink\" title=\"所有標籤都需要結尾標籤\"></a>所有標籤都需要結尾標籤</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自閉標籤(self-closing)範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX特色\"><a href=\"#JSX特色\" class=\"headerlink\" title=\"JSX特色\"></a>JSX特色</h2><h3 id=\"Props可以使用Javascript表達式-foo-1-2-3-4\"><a href=\"#Props可以使用Javascript表達式-foo-1-2-3-4\" class=\"headerlink\" title=\"Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})\"></a>Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})</h3><ul>\n<li>Javascript表達式案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/eYxebZp\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>由App組件傳過來的foo參數：&#123;props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">foo</span>=<span class=\"string\">&#123;1</span> + <span class=\"attr\">2</span> + <span class=\"attr\">3</span> + <span class=\"attr\">4</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由<span class=\"title class_\">App</span>組件傳過來的foo參數：<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>if跟for不是表達式不能使用</strong></li>\n<li>三元運算符(肚子餓了嗎?餓了:還沒餓)及邏輯運算符(&amp;&amp;)算是表達式的一種</li>\n<li>三元運算符案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/qBgVLrX\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Greeting</span> = (<span class=\"params\">&#123; isLoggedIn &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;isLoggedIn ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome back!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please log in.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoggedIn, setIsLoggedIn] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleLoginToggle</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIsLoggedIn</span>(<span class=\"function\">(<span class=\"params\">prevIsLoggedIn</span>) =&gt;</span> !prevIsLoggedIn);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleLoginToggle&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;isLoggedIn ? &#x27;Logout&#x27; : &#x27;Login&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">isLoggedIn</span>=<span class=\"string\">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>邏輯運算符(&amp;&amp;)案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/QWYOzML\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isLoggedIn = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;isLoggedIn &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome back!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Welcome</span> back!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白\"><a href=\"#純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白\" class=\"headerlink\" title=\"純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)\"></a>純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;false&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;null&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;undefined&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;true&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"屬性展開-…\"><a href=\"#屬性展開-…\" class=\"headerlink\" title=\"屬性展開(…)\"></a>屬性展開(…)</h3><ul>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/KKJybyw\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;my-class&#x27;</span>, <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列作為子元素：-你可以使用陣列來傳遞多個子元素\"><a href=\"#陣列作為子元素：-你可以使用陣列來傳遞多個子元素\" class=\"headerlink\" title=\"陣列作為子元素： 你可以使用陣列來傳遞多個子元素\"></a>陣列作為子元素： 你可以使用陣列來傳遞多個子元素</h3><ul>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/QWYOzaW\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = [<span class=\"string\">&#x27;Item 1&#x27;</span>, <span class=\"string\">&#x27;Item 2&#x27;</span>, <span class=\"string\">&#x27;Item 3&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;items.map((item, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React內聯樣式（inline-styles）\"><a href=\"#React內聯樣式（inline-styles）\" class=\"headerlink\" title=\"React內聯樣式（inline styles）\"></a>React內聯樣式（inline styles）</h3><ul>\n<li>JSX不能使用保留字(會自動轉換成別的字詞避免與保留字衝突)<ul>\n<li>class-&gt;className</li>\n<li>for-&gt;htmlfor(label)</li>\n<li>CSS內聯屬性stroke-width改成駝峰式命名(Camel-Case)strokeWidth</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">fontSize:</span> &#x27;<span class=\"attr\">16px</span>&#x27; &#125;&#125;&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":6250,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1708007057/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/React_xakmoo.jpg\" alt=\"Blog背景圖\"></p>\n<h2 id=\"什麼是-JSX-為什麼要用JSX\"><a href=\"#什麼是-JSX-為什麼要用JSX\" class=\"headerlink\" title=\"什麼是 JSX? 為什麼要用JSX?\"></a>什麼是 JSX? 為什麼要用JSX?</h2><ul>\n<li>JSX（JavaScript XML）是一種 JavaScript 的語法擴展，通常與 React 一同使用。它允許開發者在 JavaScript 中使用類似 XML 或 HTML 的語法來撰寫 React 元素，並透過渲染（Render）將其轉譯為實際的 DOM 元素及相對應的事件。這種語法使得 React 組件的描述更直觀、易讀，同時提供了更高效的元素創建方式。</li>\n<li>JSX只是為React element(原生語法)提供語法糖。</li>\n<li>原生創建React元素語法：React.createElement(component, props, …children)。<ul>\n<li>component：React 元素的類型，可以是 HTML 元素名稱（字符串，例如 ‘div’）或 React 組件</li>\n<li>props：元素的屬性（attributes），是一個包含元素屬性及其值的物件。</li>\n<li>…children：元素的子元素，可以是單一元素或一個包含多個子元素的數組。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">  div,</span><br><span class=\"line\">  &#123;<span class=\"attr\">className</span>: <span class=\"string\">&#x27;info&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSX寫法如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;info&quot;</span>&gt;<span class=\"title class_\">Hello</span> <span class=\"title class_\">World</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>巢狀寫法的案例如下：<ul>\n<li>React.createElement寫法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;container&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;h1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Nested Example&#x27;</span></span><br><span class=\"line\">  ),</span><br><span class=\"line\">  <span class=\"title class_\">React</span>.<span class=\"title function_\">createElement</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;p&#x27;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;blue&#x27;</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;This is a nested paragraph.&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSX寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Nested Example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">blue</span>&#x27; &#125;&#125;&gt;</span>This is a nested paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX內部原理及規則\"><a href=\"#JSX內部原理及規則\" class=\"headerlink\" title=\"JSX內部原理及規則\"></a>JSX內部原理及規則</h2><ul>\n<li>JSX會在編譯階段被轉譯成對應的 React.createElement 的呼叫，生成一個 JavaScript 物件，這個物件描述了 React 元素的類型、屬性（props），以及子元素。</li>\n</ul>\n<hr>\n<p>JSX使用規則如下</p>\n<h3 id=\"使用者定義的元件必須大寫\"><a href=\"#使用者定義的元件必須大寫\" class=\"headerlink\" title=\"使用者定義的元件必須大寫\"></a>使用者定義的元件必須大寫</h3><ul>\n<li>錯誤寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ↓ 正確：hello-&gt;Hello</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ↓ 使用hello非大寫會導致發生錯誤，無法透過JSX引用該元件</span></span><br><span class=\"line\">  <span class=\"comment\">//   正確的方式：hello-&gt;Hello</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">hello</span> <span class=\"attr\">toWhat</span>=<span class=\"string\">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正確寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Hello</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello &#123;props.toWhat&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span> <span class=\"attr\">toWhat</span>=<span class=\"string\">&quot;World&quot;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React元件不能使用表達式-只能是大寫字母開頭的變數或函數名\"><a href=\"#React元件不能使用表達式-只能是大寫字母開頭的變數或函數名\" class=\"headerlink\" title=\"React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)\"></a>React元件不能使用表達式(只能是大寫字母開頭的變數或函數名)</h3><ul>\n<li>錯誤寫法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhotoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PhotoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// VideoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">VideoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Story 元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">photo</span>: <span class=\"title class_\">PhotoStory</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"title class_\">VideoStory</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Story</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ↓ 請用變數賦值，避免使用表達式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\">&lt;Components[props.storyType]; story=&#123;props.story&#125; /&gt;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;photo&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正確寫法</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/ZEwamdE\">CodePen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhotoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PhotoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Photo Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// VideoStory 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">VideoStory</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Video Story: &#123;props.story&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Story 元件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = &#123;</span><br><span class=\"line\">  <span class=\"attr\">photo</span>: <span class=\"title class_\">PhotoStory</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"title class_\">VideoStory</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Story</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根據 props 中的 storyType 選擇要渲染的元件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">SpecificStory</span> = components[props.<span class=\"property\">storyType</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 渲染所選擇的元件，並將 story 作為 props 傳遞</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SpecificStory</span> <span class=\"attr\">story</span>=<span class=\"string\">&#123;props.story&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// App 元件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;photo&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;A beautiful photo story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Story</span> <span class=\"attr\">storyType</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">story</span>=<span class=\"string\">&quot;An amazing video story&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Photo</span> <span class=\"title class_\">Story</span>: A beautiful photo story</span><br><span class=\"line\"><span class=\"title class_\">Video</span> <span class=\"title class_\">Story</span>: <span class=\"title class_\">An</span> amazing video story</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回傳單一個根元素\"><a href=\"#回傳單一個根元素\" class=\"headerlink\" title=\"回傳單一個根元素\"></a>回傳單一個根元素</h3><ul>\n<li>最外層需要使用父層元素包覆(EX：div、或使用 Fragment (&lt;&gt; 和 &lt;&#x2F;&gt;))</li>\n<li>案例如下：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Content 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"所有標籤都需要結尾標籤\"><a href=\"#所有標籤都需要結尾標籤\" class=\"headerlink\" title=\"所有標籤都需要結尾標籤\"></a>所有標籤都需要結尾標籤</h3><p>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自閉標籤(self-closing)範例如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX特色\"><a href=\"#JSX特色\" class=\"headerlink\" title=\"JSX特色\"></a>JSX特色</h2><h3 id=\"Props可以使用Javascript表達式-foo-1-2-3-4\"><a href=\"#Props可以使用Javascript表達式-foo-1-2-3-4\" class=\"headerlink\" title=\"Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})\"></a>Props可以使用Javascript表達式(foo&#x3D;{1 + 2 + 3 + 4})</h3><ul>\n<li>Javascript表達式案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/eYxebZp\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>由App組件傳過來的foo參數：&#123;props.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">foo</span>=<span class=\"string\">&#123;1</span> + <span class=\"attr\">2</span> + <span class=\"attr\">3</span> + <span class=\"attr\">4</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由<span class=\"title class_\">App</span>組件傳過來的foo參數：<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>if跟for不是表達式不能使用</strong></li>\n<li>三元運算符(肚子餓了嗎?餓了:還沒餓)及邏輯運算符(&amp;&amp;)算是表達式的一種</li>\n<li>三元運算符案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/qBgVLrX\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Greeting</span> = (<span class=\"params\">&#123; isLoggedIn &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;isLoggedIn ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome back!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please log in.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoggedIn, setIsLoggedIn] = <span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleLoginToggle</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIsLoggedIn</span>(<span class=\"function\">(<span class=\"params\">prevIsLoggedIn</span>) =&gt;</span> !prevIsLoggedIn);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleLoginToggle&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;isLoggedIn ? &#x27;Logout&#x27; : &#x27;Login&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">isLoggedIn</span>=<span class=\"string\">&#123;isLoggedIn&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>邏輯運算符(&amp;&amp;)案例如下：</li>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/QWYOzML\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isLoggedIn = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            &#123;isLoggedIn &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome back!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<p>顯示如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Welcome</span> back!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白\"><a href=\"#純布林值、Null-和未定義值將被忽略-以下案例全部均顯示空白\" class=\"headerlink\" title=\"純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)\"></a>純布林值、Null 和未定義值將被忽略(以下案例全部均顯示空白)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;false&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;null&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;undefined&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;true&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"屬性展開-…\"><a href=\"#屬性展開-…\" class=\"headerlink\" title=\"屬性展開(…)\"></a>屬性展開(…)</h3><ul>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/KKJybyw\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123; <span class=\"attr\">className</span>: <span class=\"string\">&#x27;my-class&#x27;</span>, <span class=\"attr\">style</span>: &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...props</span>&#125;&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列作為子元素：-你可以使用陣列來傳遞多個子元素\"><a href=\"#陣列作為子元素：-你可以使用陣列來傳遞多個子元素\" class=\"headerlink\" title=\"陣列作為子元素： 你可以使用陣列來傳遞多個子元素\"></a>陣列作為子元素： 你可以使用陣列來傳遞多個子元素</h3><ul>\n<li><a href=\"https://codepen.io/gwhvusel-the-builder/pen/QWYOzaW\">Codepen連結</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = [<span class=\"string\">&#x27;Item 1&#x27;</span>, <span class=\"string\">&#x27;Item 2&#x27;</span>, <span class=\"string\">&#x27;Item 3&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;items.map((item, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"React內聯樣式（inline-styles）\"><a href=\"#React內聯樣式（inline-styles）\" class=\"headerlink\" title=\"React內聯樣式（inline styles）\"></a>React內聯樣式（inline styles）</h3><ul>\n<li>JSX不能使用保留字(會自動轉換成別的字詞避免與保留字衝突)<ul>\n<li>class-&gt;className</li>\n<li>for-&gt;htmlfor(label)</li>\n<li>CSS內聯屬性stroke-width改成駝峰式命名(Camel-Case)strokeWidth</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27;, <span class=\"attr\">fontSize:</span> &#x27;<span class=\"attr\">16px</span>&#x27; &#125;&#125;&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"css flex 軸線對齊技巧 - 預設屬性","date":"2024-10-24T12:29:08.000Z","description":"css flex 排版技巧你都了解了嗎？回歸學習初心的認識 flex 預設屬性","_content":"\n![Flex 軸線對齊的排版工具](https://res.cloudinary.com/dseg0uwc9/image/upload/v1729776553/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/Flex_%E8%BB%B8%E7%B7%9A%E5%B0%8D%E5%85%B6%E7%9A%84%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7_f9jvut.png)\n\n## flex 排版特性與區塊元素的差別\n\n一般如果使用三個區塊元素進行排版，區塊元素會自動填滿整個空間。\n\n```html\n<div class=\"container\">\n  <div class=\"flex-item\">1</div>\n  <div class=\"flex-item\">2</div>\n  <div class=\"flex-item\">3</div>\n</div>\n```\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/jOgaGOb?default-tab=html%2Cresult %}\n\n當我們將`continaer` class 設定`flex`佈局方式，每一個`flex-item`都會變成`flex 子元素`。\n\n> 請注意 flex 排版特性只影響 flex 容器及容器內的第一層子物件而已。\n\nflex 容器有以下預設屬性：\n\n- flex 容器預設會填滿父容器的寬度\n- flex-direction: row（預設主軸的定義是水平的，由左至右）\n- flex-wrap: nowrap（預設子元素在 Flex 容器裡面是不換行的，子元素會在單一行中排列）\n\n當 flex 容器內的第一層元素被轉換成`flex 子元素`時，flex 子元素有以下預設屬性：\n\n- justify-content：flex-start（預設 flex 子元素沿著主軸起始點排序）\n- align-items: stretch（預設交叉軸會將子元素延伸以填滿 flex 容器的高度）\n- flex-basis: auto（預設子元素的大小由內容、`width` 或 `height` 設定來決定）\n- flex-grow: 0（預設不會有所謂`擴展效果`）\n- flex-shrink: 1（預設會有`收縮效果`）\n\n## flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用\n\n這邊直接透過兩種情境快速理解這些特性：\n\n### 當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)\n\n![ 1. 當 flex 子元素總寬度小於 flex 容器預設排版 ](https://res.cloudinary.com/dseg0uwc9/image/upload/v1730212126/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/%E7%95%B6_flex_%E5%AD%90%E5%85%83%E7%B4%A0%E7%B8%BD%E5%AF%AC%E5%BA%A6%E5%B0%8F%E6%96%BC_flex_%E5%AE%B9%E5%99%A8%E9%A0%90%E8%A8%AD%E6%8E%92%E7%89%88_dorybi.png)\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/bGXYoJB?default-tab=html%2Cresult %}\n\n按照前面所提到的特性去理解(千萬不要死背，會出大事)：\n\n【 觀察`主軸`的方向 - flex `容器`預設屬性 】\n\n- flex-direction: row\n\n> 確認當前畫面主軸的方向，就可以確認交叉軸的方向。flex 元素會按照主軸的方向排列，當前畫面是由左至右，因此可以判斷當前主軸是由左至右的方向。但是`主軸並非永遠都是由左至右(非常重要)`，軸線的方向會因為 flex 主軸方向設定(flex-direction)、語系方向(HTML dir Attribute)、書寫模式(writing-mode)及內容呈現方向(direction)影響。\n\n【 觀察`主軸`的方向 - 說明 flex `子元素`預設屬性 】\n\n- flex-basis: auto\n\n> 預設 flex 子元素的寬度是由其內容撐開的，在未設定`width`及`height`的情況下。因此如果未設置寬度標籤內無內容的情況下，flex 子元素會看不到喔！！！\n\n- justify-content：flex-start\n\n> 預設 flex 子元素`主軸`對齊的方向是在主軸起始點。\n\n- flex-grow: 0\n\n> 注意到上面的圖中一塊的`剩餘空間`，這部分是由`flex-grow`進行管理。只有在 flex 子元素總寬度小於 flex 容器的時候會產生`剩餘空間`。預設的情況下，這個剩餘空間是不會進行分配的，也就是`0`。\n\n【 觀察`交叉軸`的方向 - 說明 flex `子元素`預設屬性 】\n\n- align-items: stretch\n\n> 預設 flex 子元素`交叉軸`對齊的方向是會延展至容器的高度。\n\n上面還有很多預設屬性沒有說明到！是不是想偷懶 > < ，才不是，因為透過另一個情境搭配說明可以讓大家更能理解。\n\n### 當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/poMLwGW?default-tab=html%2Cresult %}\n\n這邊可能會想說，你怎麼知道他超出去了容器的寬度限制呢？\n\n- flex-wrap：nowrap(預設不會換行)\n\n> 不管你在 flex 裡面放多少東西，他會試著把他`收縮`在同一行當中，不讓 flex 容器內的子容器換行。至於收縮這件事情，則是`flex-shrink`負責，因此若將`flex-shrink`設定為 0(關閉)，flex 子容器總寬度大於 flex 容器寬度時，不會嘗試壓縮，就會看到 flex 子元素衝出去 flex 容器的限制。\n\n- flex-shrink: 1(預設 flex 容器會試著收縮容器內的子容器)\n\n> 收縮的部分只會發生在`flex 子元素`總寬度大於`flex 容器`時。理解上也相對好理解，因為 flex 容器裝不下了，才會需要進行收縮，讓 flex 子元素能安全地待在 flex 容器裡，不要亂跑(不然前端工程師會哭給你看ＱＱ)\n\n這邊試著關掉`flex-shrink`將其改變成`0`，不讓 flex 子元素收縮的情況下，會發現其超出容器的寬度。\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/jOgxEwY?default-tab=html%2Cresult %}\n\n敲鐘下課囉～今天是睽違半年重新動筆，希望能找到自己撰寫風格 ❤️\n\n## 資料來源\n\n- 金魚都能懂的CSS 選取器(我是金魚粉，超級喜歡 Amos 老師，推薦大家都買一本來嗑)","source":"_posts/2024-10-24-css-flex-1.md","raw":"---\ntitle: css flex 軸線對齊技巧 - 預設屬性\ndate: 2024-10-24 20:29:08\ntags:\n- [flex]\n- [flex 預設屬性]\ncategories:\n- [css]\ndescription: css flex 排版技巧你都了解了嗎？回歸學習初心的認識 flex 預設屬性\n---\n\n![Flex 軸線對齊的排版工具](https://res.cloudinary.com/dseg0uwc9/image/upload/v1729776553/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/Flex_%E8%BB%B8%E7%B7%9A%E5%B0%8D%E5%85%B6%E7%9A%84%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7_f9jvut.png)\n\n## flex 排版特性與區塊元素的差別\n\n一般如果使用三個區塊元素進行排版，區塊元素會自動填滿整個空間。\n\n```html\n<div class=\"container\">\n  <div class=\"flex-item\">1</div>\n  <div class=\"flex-item\">2</div>\n  <div class=\"flex-item\">3</div>\n</div>\n```\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/jOgaGOb?default-tab=html%2Cresult %}\n\n當我們將`continaer` class 設定`flex`佈局方式，每一個`flex-item`都會變成`flex 子元素`。\n\n> 請注意 flex 排版特性只影響 flex 容器及容器內的第一層子物件而已。\n\nflex 容器有以下預設屬性：\n\n- flex 容器預設會填滿父容器的寬度\n- flex-direction: row（預設主軸的定義是水平的，由左至右）\n- flex-wrap: nowrap（預設子元素在 Flex 容器裡面是不換行的，子元素會在單一行中排列）\n\n當 flex 容器內的第一層元素被轉換成`flex 子元素`時，flex 子元素有以下預設屬性：\n\n- justify-content：flex-start（預設 flex 子元素沿著主軸起始點排序）\n- align-items: stretch（預設交叉軸會將子元素延伸以填滿 flex 容器的高度）\n- flex-basis: auto（預設子元素的大小由內容、`width` 或 `height` 設定來決定）\n- flex-grow: 0（預設不會有所謂`擴展效果`）\n- flex-shrink: 1（預設會有`收縮效果`）\n\n## flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用\n\n這邊直接透過兩種情境快速理解這些特性：\n\n### 當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)\n\n![ 1. 當 flex 子元素總寬度小於 flex 容器預設排版 ](https://res.cloudinary.com/dseg0uwc9/image/upload/v1730212126/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/%E7%95%B6_flex_%E5%AD%90%E5%85%83%E7%B4%A0%E7%B8%BD%E5%AF%AC%E5%BA%A6%E5%B0%8F%E6%96%BC_flex_%E5%AE%B9%E5%99%A8%E9%A0%90%E8%A8%AD%E6%8E%92%E7%89%88_dorybi.png)\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/bGXYoJB?default-tab=html%2Cresult %}\n\n按照前面所提到的特性去理解(千萬不要死背，會出大事)：\n\n【 觀察`主軸`的方向 - flex `容器`預設屬性 】\n\n- flex-direction: row\n\n> 確認當前畫面主軸的方向，就可以確認交叉軸的方向。flex 元素會按照主軸的方向排列，當前畫面是由左至右，因此可以判斷當前主軸是由左至右的方向。但是`主軸並非永遠都是由左至右(非常重要)`，軸線的方向會因為 flex 主軸方向設定(flex-direction)、語系方向(HTML dir Attribute)、書寫模式(writing-mode)及內容呈現方向(direction)影響。\n\n【 觀察`主軸`的方向 - 說明 flex `子元素`預設屬性 】\n\n- flex-basis: auto\n\n> 預設 flex 子元素的寬度是由其內容撐開的，在未設定`width`及`height`的情況下。因此如果未設置寬度標籤內無內容的情況下，flex 子元素會看不到喔！！！\n\n- justify-content：flex-start\n\n> 預設 flex 子元素`主軸`對齊的方向是在主軸起始點。\n\n- flex-grow: 0\n\n> 注意到上面的圖中一塊的`剩餘空間`，這部分是由`flex-grow`進行管理。只有在 flex 子元素總寬度小於 flex 容器的時候會產生`剩餘空間`。預設的情況下，這個剩餘空間是不會進行分配的，也就是`0`。\n\n【 觀察`交叉軸`的方向 - 說明 flex `子元素`預設屬性 】\n\n- align-items: stretch\n\n> 預設 flex 子元素`交叉軸`對齊的方向是會延展至容器的高度。\n\n上面還有很多預設屬性沒有說明到！是不是想偷懶 > < ，才不是，因為透過另一個情境搭配說明可以讓大家更能理解。\n\n### 當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/poMLwGW?default-tab=html%2Cresult %}\n\n這邊可能會想說，你怎麼知道他超出去了容器的寬度限制呢？\n\n- flex-wrap：nowrap(預設不會換行)\n\n> 不管你在 flex 裡面放多少東西，他會試著把他`收縮`在同一行當中，不讓 flex 容器內的子容器換行。至於收縮這件事情，則是`flex-shrink`負責，因此若將`flex-shrink`設定為 0(關閉)，flex 子容器總寬度大於 flex 容器寬度時，不會嘗試壓縮，就會看到 flex 子元素衝出去 flex 容器的限制。\n\n- flex-shrink: 1(預設 flex 容器會試著收縮容器內的子容器)\n\n> 收縮的部分只會發生在`flex 子元素`總寬度大於`flex 容器`時。理解上也相對好理解，因為 flex 容器裝不下了，才會需要進行收縮，讓 flex 子元素能安全地待在 flex 容器裡，不要亂跑(不然前端工程師會哭給你看ＱＱ)\n\n這邊試著關掉`flex-shrink`將其改變成`0`，不讓 flex 子元素收縮的情況下，會發現其超出容器的寬度。\n\n{% iframe https://codepen.io/gwhvusel-the-builder/embed/jOgxEwY?default-tab=html%2Cresult %}\n\n敲鐘下課囉～今天是睽違半年重新動筆，希望能找到自己撰寫風格 ❤️\n\n## 資料來源\n\n- 金魚都能懂的CSS 選取器(我是金魚粉，超級喜歡 Amos 老師，推薦大家都買一本來嗑)","slug":"css-flex-1","published":1,"updated":"2024-10-30T13:10:40.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2vwjm3w002g48z101qw77q5","content":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1729776553/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/Flex_%E8%BB%B8%E7%B7%9A%E5%B0%8D%E5%85%B6%E7%9A%84%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7_f9jvut.png\" alt=\"Flex 軸線對齊的排版工具\"></p>\n<h2 id=\"flex-排版特性與區塊元素的差別\"><a href=\"#flex-排版特性與區塊元素的差別\" class=\"headerlink\" title=\"flex 排版特性與區塊元素的差別\"></a>flex 排版特性與區塊元素的差別</h2><p>一般如果使用三個區塊元素進行排版，區塊元素會自動填滿整個空間。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/jOgaGOb?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>當我們將<code>continaer</code> class 設定<code>flex</code>佈局方式，每一個<code>flex-item</code>都會變成<code>flex 子元素</code>。</p>\n<blockquote>\n<p>請注意 flex 排版特性只影響 flex 容器及容器內的第一層子物件而已。</p>\n</blockquote>\n<p>flex 容器有以下預設屬性：</p>\n<ul>\n<li>flex 容器預設會填滿父容器的寬度</li>\n<li>flex-direction: row（預設主軸的定義是水平的，由左至右）</li>\n<li>flex-wrap: nowrap（預設子元素在 Flex 容器裡面是不換行的，子元素會在單一行中排列）</li>\n</ul>\n<p>當 flex 容器內的第一層元素被轉換成<code>flex 子元素</code>時，flex 子元素有以下預設屬性：</p>\n<ul>\n<li>justify-content：flex-start（預設 flex 子元素沿著主軸起始點排序）</li>\n<li>align-items: stretch（預設交叉軸會將子元素延伸以填滿 flex 容器的高度）</li>\n<li>flex-basis: auto（預設子元素的大小由內容、<code>width</code> 或 <code>height</code> 設定來決定）</li>\n<li>flex-grow: 0（預設不會有所謂<code>擴展效果</code>）</li>\n<li>flex-shrink: 1（預設會有<code>收縮效果</code>）</li>\n</ul>\n<h2 id=\"flex-情境解析-理解預設屬性在-flex-排版中的實際作用\"><a href=\"#flex-情境解析-理解預設屬性在-flex-排版中的實際作用\" class=\"headerlink\" title=\"flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用\"></a>flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用</h2><p>這邊直接透過兩種情境快速理解這些特性：</p>\n<h3 id=\"當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間\"><a href=\"#當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間\" class=\"headerlink\" title=\"當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)\"></a>當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1730212126/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/%E7%95%B6_flex_%E5%AD%90%E5%85%83%E7%B4%A0%E7%B8%BD%E5%AF%AC%E5%BA%A6%E5%B0%8F%E6%96%BC_flex_%E5%AE%B9%E5%99%A8%E9%A0%90%E8%A8%AD%E6%8E%92%E7%89%88_dorybi.png\" alt=\" 1. 當 flex 子元素總寬度小於 flex 容器預設排版 \"></p>\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/bGXYoJB?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>按照前面所提到的特性去理解(千萬不要死背，會出大事)：</p>\n<p>【 觀察<code>主軸</code>的方向 - flex <code>容器</code>預設屬性 】</p>\n<ul>\n<li>flex-direction: row</li>\n</ul>\n<blockquote>\n<p>確認當前畫面主軸的方向，就可以確認交叉軸的方向。flex 元素會按照主軸的方向排列，當前畫面是由左至右，因此可以判斷當前主軸是由左至右的方向。但是<code>主軸並非永遠都是由左至右(非常重要)</code>，軸線的方向會因為 flex 主軸方向設定(flex-direction)、語系方向(HTML dir Attribute)、書寫模式(writing-mode)及內容呈現方向(direction)影響。</p>\n</blockquote>\n<p>【 觀察<code>主軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>\n<ul>\n<li>flex-basis: auto</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素的寬度是由其內容撐開的，在未設定<code>width</code>及<code>height</code>的情況下。因此如果未設置寬度標籤內無內容的情況下，flex 子元素會看不到喔！！！</p>\n</blockquote>\n<ul>\n<li>justify-content：flex-start</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素<code>主軸</code>對齊的方向是在主軸起始點。</p>\n</blockquote>\n<ul>\n<li>flex-grow: 0</li>\n</ul>\n<blockquote>\n<p>注意到上面的圖中一塊的<code>剩餘空間</code>，這部分是由<code>flex-grow</code>進行管理。只有在 flex 子元素總寬度小於 flex 容器的時候會產生<code>剩餘空間</code>。預設的情況下，這個剩餘空間是不會進行分配的，也就是<code>0</code>。</p>\n</blockquote>\n<p>【 觀察<code>交叉軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>\n<ul>\n<li>align-items: stretch</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素<code>交叉軸</code>對齊的方向是會延展至容器的高度。</p>\n</blockquote>\n<p>上面還有很多預設屬性沒有說明到！是不是想偷懶 &gt; &lt; ，才不是，因為透過另一個情境搭配說明可以讓大家更能理解。</p>\n<h3 id=\"當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間\"><a href=\"#當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間\" class=\"headerlink\" title=\"當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)\"></a>當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)</h3><iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/poMLwGW?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>這邊可能會想說，你怎麼知道他超出去了容器的寬度限制呢？</p>\n<ul>\n<li>flex-wrap：nowrap(預設不會換行)</li>\n</ul>\n<blockquote>\n<p>不管你在 flex 裡面放多少東西，他會試著把他<code>收縮</code>在同一行當中，不讓 flex 容器內的子容器換行。至於收縮這件事情，則是<code>flex-shrink</code>負責，因此若將<code>flex-shrink</code>設定為 0(關閉)，flex 子容器總寬度大於 flex 容器寬度時，不會嘗試壓縮，就會看到 flex 子元素衝出去 flex 容器的限制。</p>\n</blockquote>\n<ul>\n<li>flex-shrink: 1(預設 flex 容器會試著收縮容器內的子容器)</li>\n</ul>\n<blockquote>\n<p>收縮的部分只會發生在<code>flex 子元素</code>總寬度大於<code>flex 容器</code>時。理解上也相對好理解，因為 flex 容器裝不下了，才會需要進行收縮，讓 flex 子元素能安全地待在 flex 容器裡，不要亂跑(不然前端工程師會哭給你看ＱＱ)</p>\n</blockquote>\n<p>這邊試著關掉<code>flex-shrink</code>將其改變成<code>0</code>，不讓 flex 子元素收縮的情況下，會發現其超出容器的寬度。</p>\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/jOgxEwY?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>敲鐘下課囉～今天是睽違半年重新動筆，希望能找到自己撰寫風格 ❤️</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><ul>\n<li>金魚都能懂的CSS 選取器(我是金魚粉，超級喜歡 Amos 老師，推薦大家都買一本來嗑)</li>\n</ul>\n","site":{"data":{}},"length":1924,"excerpt":"","more":"<p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1729776553/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/Flex_%E8%BB%B8%E7%B7%9A%E5%B0%8D%E5%85%B6%E7%9A%84%E6%8E%92%E7%89%88%E5%B7%A5%E5%85%B7_f9jvut.png\" alt=\"Flex 軸線對齊的排版工具\"></p>\n<h2 id=\"flex-排版特性與區塊元素的差別\"><a href=\"#flex-排版特性與區塊元素的差別\" class=\"headerlink\" title=\"flex 排版特性與區塊元素的差別\"></a>flex 排版特性與區塊元素的差別</h2><p>一般如果使用三個區塊元素進行排版，區塊元素會自動填滿整個空間。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex-item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/jOgaGOb?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>當我們將<code>continaer</code> class 設定<code>flex</code>佈局方式，每一個<code>flex-item</code>都會變成<code>flex 子元素</code>。</p>\n<blockquote>\n<p>請注意 flex 排版特性只影響 flex 容器及容器內的第一層子物件而已。</p>\n</blockquote>\n<p>flex 容器有以下預設屬性：</p>\n<ul>\n<li>flex 容器預設會填滿父容器的寬度</li>\n<li>flex-direction: row（預設主軸的定義是水平的，由左至右）</li>\n<li>flex-wrap: nowrap（預設子元素在 Flex 容器裡面是不換行的，子元素會在單一行中排列）</li>\n</ul>\n<p>當 flex 容器內的第一層元素被轉換成<code>flex 子元素</code>時，flex 子元素有以下預設屬性：</p>\n<ul>\n<li>justify-content：flex-start（預設 flex 子元素沿著主軸起始點排序）</li>\n<li>align-items: stretch（預設交叉軸會將子元素延伸以填滿 flex 容器的高度）</li>\n<li>flex-basis: auto（預設子元素的大小由內容、<code>width</code> 或 <code>height</code> 設定來決定）</li>\n<li>flex-grow: 0（預設不會有所謂<code>擴展效果</code>）</li>\n<li>flex-shrink: 1（預設會有<code>收縮效果</code>）</li>\n</ul>\n<h2 id=\"flex-情境解析-理解預設屬性在-flex-排版中的實際作用\"><a href=\"#flex-情境解析-理解預設屬性在-flex-排版中的實際作用\" class=\"headerlink\" title=\"flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用\"></a>flex 情境解析 - 理解預設屬性在 flex 排版中的實際作用</h2><p>這邊直接透過兩種情境快速理解這些特性：</p>\n<h3 id=\"當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間\"><a href=\"#當-flex-子元素總寬度小於-flex-容器預設排版-存在-flex-容器剩餘空間\" class=\"headerlink\" title=\"當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)\"></a>當 flex 子元素總寬度小於 flex 容器預設排版(存在 flex 容器剩餘空間)</h3><p><img src=\"https://res.cloudinary.com/dseg0uwc9/image/upload/v1730212126/%E9%83%A8%E8%90%BD%E6%A0%BC%E5%B0%88%E7%94%A8/%E5%89%8D%E7%AB%AF%E6%8E%92%E7%89%88%E7%A5%9E%E5%99%A8%20-%20%E6%8E%8C%E6%8F%A1%20flex%20%E8%BB%B8%E7%B7%9A%E5%B0%8D%E9%BD%8A%E6%8A%80%E5%B7%A7/%E7%95%B6_flex_%E5%AD%90%E5%85%83%E7%B4%A0%E7%B8%BD%E5%AF%AC%E5%BA%A6%E5%B0%8F%E6%96%BC_flex_%E5%AE%B9%E5%99%A8%E9%A0%90%E8%A8%AD%E6%8E%92%E7%89%88_dorybi.png\" alt=\" 1. 當 flex 子元素總寬度小於 flex 容器預設排版 \"></p>\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/bGXYoJB?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>按照前面所提到的特性去理解(千萬不要死背，會出大事)：</p>\n<p>【 觀察<code>主軸</code>的方向 - flex <code>容器</code>預設屬性 】</p>\n<ul>\n<li>flex-direction: row</li>\n</ul>\n<blockquote>\n<p>確認當前畫面主軸的方向，就可以確認交叉軸的方向。flex 元素會按照主軸的方向排列，當前畫面是由左至右，因此可以判斷當前主軸是由左至右的方向。但是<code>主軸並非永遠都是由左至右(非常重要)</code>，軸線的方向會因為 flex 主軸方向設定(flex-direction)、語系方向(HTML dir Attribute)、書寫模式(writing-mode)及內容呈現方向(direction)影響。</p>\n</blockquote>\n<p>【 觀察<code>主軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>\n<ul>\n<li>flex-basis: auto</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素的寬度是由其內容撐開的，在未設定<code>width</code>及<code>height</code>的情況下。因此如果未設置寬度標籤內無內容的情況下，flex 子元素會看不到喔！！！</p>\n</blockquote>\n<ul>\n<li>justify-content：flex-start</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素<code>主軸</code>對齊的方向是在主軸起始點。</p>\n</blockquote>\n<ul>\n<li>flex-grow: 0</li>\n</ul>\n<blockquote>\n<p>注意到上面的圖中一塊的<code>剩餘空間</code>，這部分是由<code>flex-grow</code>進行管理。只有在 flex 子元素總寬度小於 flex 容器的時候會產生<code>剩餘空間</code>。預設的情況下，這個剩餘空間是不會進行分配的，也就是<code>0</code>。</p>\n</blockquote>\n<p>【 觀察<code>交叉軸</code>的方向 - 說明 flex <code>子元素</code>預設屬性 】</p>\n<ul>\n<li>align-items: stretch</li>\n</ul>\n<blockquote>\n<p>預設 flex 子元素<code>交叉軸</code>對齊的方向是會延展至容器的高度。</p>\n</blockquote>\n<p>上面還有很多預設屬性沒有說明到！是不是想偷懶 &gt; &lt; ，才不是，因為透過另一個情境搭配說明可以讓大家更能理解。</p>\n<h3 id=\"當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間\"><a href=\"#當-flex-子元素總寬度大於-flex-容器預設排版-存在超出-flex-容器空間\" class=\"headerlink\" title=\"當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)\"></a>當 flex 子元素總寬度大於 flex 容器預設排版(存在超出 flex 容器空間)</h3><iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/poMLwGW?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>這邊可能會想說，你怎麼知道他超出去了容器的寬度限制呢？</p>\n<ul>\n<li>flex-wrap：nowrap(預設不會換行)</li>\n</ul>\n<blockquote>\n<p>不管你在 flex 裡面放多少東西，他會試著把他<code>收縮</code>在同一行當中，不讓 flex 容器內的子容器換行。至於收縮這件事情，則是<code>flex-shrink</code>負責，因此若將<code>flex-shrink</code>設定為 0(關閉)，flex 子容器總寬度大於 flex 容器寬度時，不會嘗試壓縮，就會看到 flex 子元素衝出去 flex 容器的限制。</p>\n</blockquote>\n<ul>\n<li>flex-shrink: 1(預設 flex 容器會試著收縮容器內的子容器)</li>\n</ul>\n<blockquote>\n<p>收縮的部分只會發生在<code>flex 子元素</code>總寬度大於<code>flex 容器</code>時。理解上也相對好理解，因為 flex 容器裝不下了，才會需要進行收縮，讓 flex 子元素能安全地待在 flex 容器裡，不要亂跑(不然前端工程師會哭給你看ＱＱ)</p>\n</blockquote>\n<p>這邊試著關掉<code>flex-shrink</code>將其改變成<code>0</code>，不讓 flex 子元素收縮的情況下，會發現其超出容器的寬度。</p>\n<iframe src=\"https://codepen.io/gwhvusel-the-builder/embed/jOgxEwY?default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<p>敲鐘下課囉～今天是睽違半年重新動筆，希望能找到自己撰寫風格 ❤️</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><ul>\n<li>金魚都能懂的CSS 選取器(我是金魚粉，超級喜歡 Amos 老師，推薦大家都買一本來嗑)</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm2vwjm3m000148z16p1yev56","category_id":"cm2vwjm3p000748z1d2ecbh7v","_id":"cm2vwjm3r000k48z19rnh9xrf"},{"post_id":"cm2vwjm3q000e48z1e5282zyj","category_id":"cm2vwjm3p000748z1d2ecbh7v","_id":"cm2vwjm3s000r48z12v4o6ees"},{"post_id":"cm2vwjm3n000348z1eoirbp0l","category_id":"cm2vwjm3p000748z1d2ecbh7v","_id":"cm2vwjm3s000t48z11epvdrec"},{"post_id":"cm2vwjm3p000648z12a3979ar","category_id":"cm2vwjm3p000748z1d2ecbh7v","_id":"cm2vwjm3t000x48z1e4u437bm"},{"post_id":"cm2vwjm3p000948z16atk7lex","category_id":"cm2vwjm3s000o48z1cvmu8x2u","_id":"cm2vwjm3t001348z11ftca87u"},{"post_id":"cm2vwjm3q000a48z14eoy5jnj","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3t001748z15kkc4xup"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3t001948z14qvphih5"},{"post_id":"cm2vwjm3t001248z10sez4ejo","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3u001c48z1eqt48lq6"},{"post_id":"cm2vwjm3r000j48z14z6m6g2o","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3u001e48z1arj0fnoh"},{"post_id":"cm2vwjm3r000m48z10yp6d17u","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3u001h48z11vschmo0"},{"post_id":"cm2vwjm3s000q48z11cieg94v","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3u001j48z17mvk3tjh"},{"post_id":"cm2vwjm3s000s48z17s1m827w","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3u001l48z12igadbai"},{"post_id":"cm2vwjm3s000w48z186zf3rr2","category_id":"cm2vwjm3u001i48z13hf30mul","_id":"cm2vwjm3u001p48z1h2d394cy"},{"post_id":"cm2vwjm3v002a48z11vly98em","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3w002h48z12j7pbbxg"},{"post_id":"cm2vwjm3w002d48z19yls3xw9","category_id":"cm2vwjm3s000v48z13u0ney8m","_id":"cm2vwjm3x002l48z14lv7h5gq"},{"post_id":"cm2vwjm3w002e48z14gld6qva","category_id":"cm2vwjm3u001i48z13hf30mul","_id":"cm2vwjm3x002n48z17gm43504"},{"post_id":"cm2vwjm3w002b48z1694f34iv","category_id":"cm2vwjm3w002f48z113t12n8n","_id":"cm2vwjm3x002o48z191gp9vol"},{"post_id":"cm2vwjm3w002g48z101qw77q5","category_id":"cm2vwjm3x002k48z1fzs0eljj","_id":"cm2vwjm3x002r48z109plfpf8"}],"PostTag":[{"post_id":"cm2vwjm3m000148z16p1yev56","tag_id":"cm2vwjm3o000448z1cu0h289u","_id":"cm2vwjm3q000d48z1951h5jil"},{"post_id":"cm2vwjm3q000e48z1e5282zyj","tag_id":"cm2vwjm3o000448z1cu0h289u","_id":"cm2vwjm3r000i48z16j941mol"},{"post_id":"cm2vwjm3n000348z1eoirbp0l","tag_id":"cm2vwjm3o000448z1cu0h289u","_id":"cm2vwjm3r000l48z18b9gef0f"},{"post_id":"cm2vwjm3p000648z12a3979ar","tag_id":"cm2vwjm3o000448z1cu0h289u","_id":"cm2vwjm3s000p48z10531520b"},{"post_id":"cm2vwjm3p000948z16atk7lex","tag_id":"cm2vwjm3s000n48z159cj8rcf","_id":"cm2vwjm3t000y48z1h4zh2jzm"},{"post_id":"cm2vwjm3q000a48z14eoy5jnj","tag_id":"cm2vwjm3s000u48z1284vcac3","_id":"cm2vwjm3t001448z1avzf8dlw"},{"post_id":"cm2vwjm3r000j48z14z6m6g2o","tag_id":"cm2vwjm3t001048z193lzbqdc","_id":"cm2vwjm3t001848z1aqa89rp1"},{"post_id":"cm2vwjm3r000m48z10yp6d17u","tag_id":"cm2vwjm3t001648z1dbhedzls","_id":"cm2vwjm3u001d48z184b8cg1e"},{"post_id":"cm2vwjm3s000s48z17s1m827w","tag_id":"cm2vwjm3t001b48z18lft98fw","_id":"cm2vwjm3u001n48z19fgf7760"},{"post_id":"cm2vwjm3s000s48z17s1m827w","tag_id":"cm2vwjm3u001g48z17nvpcvzc","_id":"cm2vwjm3u001o48z12ap3e8fi"},{"post_id":"cm2vwjm3s000s48z17s1m827w","tag_id":"cm2vwjm3u001k48z1hb392ns4","_id":"cm2vwjm3u001r48z14xu6da8t"},{"post_id":"cm2vwjm3s000w48z186zf3rr2","tag_id":"cm2vwjm3u001m48z1exse85ki","_id":"cm2vwjm3u001s48z15zp84o1m"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3u001q48z10gti96u0","_id":"cm2vwjm3v001z48z158ixb5uh"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3u001t48z116wjdqjh","_id":"cm2vwjm3v002048z15n1u1hrw"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3u001u48z1czqs6zz5","_id":"cm2vwjm3v002248z112b9ey6a"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3u001v48z19d672zn7","_id":"cm2vwjm3v002348z10nxp36wm"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3u001w48z1459245s0","_id":"cm2vwjm3v002548z14e2n9t2e"},{"post_id":"cm2vwjm3t000z48z1f7w2b6mr","tag_id":"cm2vwjm3v001x48z115tddeqg","_id":"cm2vwjm3v002648z1568ugikm"},{"post_id":"cm2vwjm3t001248z10sez4ejo","tag_id":"cm2vwjm3v001y48z17daj2y0n","_id":"cm2vwjm3v002748z18rzm86di"},{"post_id":"cm2vwjm3t001248z10sez4ejo","tag_id":"cm2vwjm3v002148z1esrea6qb","_id":"cm2vwjm3v002848z1dktv79no"},{"post_id":"cm2vwjm3t001248z10sez4ejo","tag_id":"cm2vwjm3v002448z12a1b4kzr","_id":"cm2vwjm3v002948z155uy19jv"},{"post_id":"cm2vwjm3v002a48z11vly98em","tag_id":"cm2vwjm3w002c48z1hubz0gg2","_id":"cm2vwjm3w002j48z1djpnhzeq"},{"post_id":"cm2vwjm3w002b48z1694f34iv","tag_id":"cm2vwjm3w002i48z10gfp1cmk","_id":"cm2vwjm3x002s48z119wig6fh"},{"post_id":"cm2vwjm3w002b48z1694f34iv","tag_id":"cm2vwjm3x002m48z14wl8h50x","_id":"cm2vwjm3x002t48z1a79v2irh"},{"post_id":"cm2vwjm3w002b48z1694f34iv","tag_id":"cm2vwjm3x002p48z1ffb4er73","_id":"cm2vwjm3x002v48z17e6535tt"},{"post_id":"cm2vwjm3w002d48z19yls3xw9","tag_id":"cm2vwjm3x002q48z1b9icawcd","_id":"cm2vwjm3x002x48z14ezr3zbb"},{"post_id":"cm2vwjm3w002d48z19yls3xw9","tag_id":"cm2vwjm3x002u48z14kbjfqqq","_id":"cm2vwjm3x002y48z1476wa7k2"},{"post_id":"cm2vwjm3w002e48z14gld6qva","tag_id":"cm2vwjm3x002w48z14a3c04ex","_id":"cm2vwjm3x003048z10gskfnfo"},{"post_id":"cm2vwjm3w002g48z101qw77q5","tag_id":"cm2vwjm3x002z48z17hpe8wcg","_id":"cm2vwjm3x003248z110cc2v7g"},{"post_id":"cm2vwjm3w002g48z101qw77q5","tag_id":"cm2vwjm3x003148z1ap3p9996","_id":"cm2vwjm3x003348z15ummfzhs"}],"Tag":[{"name":"Hexo","_id":"cm2vwjm3o000448z1cu0h289u"},{"name":"Web Development Tool","_id":"cm2vwjm3s000n48z159cj8rcf"},{"name":"ES6","_id":"cm2vwjm3s000u48z1284vcac3"},{"name":"Arrow Function","_id":"cm2vwjm3t001048z193lzbqdc"},{"name":"SoC","_id":"cm2vwjm3t001648z1dbhedzls"},{"name":"Pass by reference","_id":"cm2vwjm3t001b48z18lft98fw"},{"name":"shallow copy","_id":"cm2vwjm3u001g48z17nvpcvzc"},{"name":"deep copy","_id":"cm2vwjm3u001k48z1hb392ns4"},{"name":"Pure Function","_id":"cm2vwjm3u001m48z1exse85ki"},{"name":"Array.forEach","_id":"cm2vwjm3u001q48z10gti96u0"},{"name":"Array.map","_id":"cm2vwjm3u001t48z116wjdqjh"},{"name":"Array.filter","_id":"cm2vwjm3u001u48z1czqs6zz5"},{"name":"Array.findIndex","_id":"cm2vwjm3u001v48z19d672zn7"},{"name":"Array.reduce","_id":"cm2vwjm3u001w48z1459245s0"},{"name":"Array.sort","_id":"cm2vwjm3v001x48z115tddeqg"},{"name":"var","_id":"cm2vwjm3v001y48z17daj2y0n"},{"name":"let","_id":"cm2vwjm3v002148z1esrea6qb"},{"name":"const","_id":"cm2vwjm3v002448z12a1b4kzr"},{"name":"Promise","_id":"cm2vwjm3w002c48z1hubz0gg2"},{"name":"六角學院","_id":"cm2vwjm3w002i48z10gfp1cmk"},{"name":"軟體工程師體驗營","_id":"cm2vwjm3x002m48z14wl8h50x"},{"name":"心得分享","_id":"cm2vwjm3x002p48z1ffb4er73"},{"name":"CommonJS","_id":"cm2vwjm3x002q48z1b9icawcd"},{"name":"ES Module","_id":"cm2vwjm3x002u48z14kbjfqqq"},{"name":"JSX","_id":"cm2vwjm3x002w48z14a3c04ex"},{"name":"flex","_id":"cm2vwjm3x002z48z17hpe8wcg"},{"name":"flex 預設屬性","_id":"cm2vwjm3x003148z1ap3p9996"}]}}